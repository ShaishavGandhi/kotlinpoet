{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KotlinPoet KotlinPoet is a Kotlin and Java API for generating .kt source files. Source file generation can be useful when doing things such as annotation processing or interacting with metadata files (e.g., database schemas, protocol formats). By generating code, you eliminate the need to write boilerplate while also keeping a single source of truth for the metadata. Example Here s a HelloWorld file: class Greeter ( val name : String ) { fun greet () { println ( Hello, $name ) } } fun main ( vararg args : String ) { Greeter ( args [ 0 ]). greet () } And this is the code to generate it with KotlinPoet: val greeterClass = ClassName ( , Greeter ) val file = FileSpec . builder ( , HelloWorld ) . addType ( TypeSpec . classBuilder ( Greeter ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( name , String :: class ) . build ()) . addProperty ( PropertySpec . builder ( name , String :: class ) . initializer ( name ) . build ()) . addFunction ( FunSpec . builder ( greet ) . addStatement ( println(%P) , Hello, \\$name ) . build ()) . build ()) . addFunction ( FunSpec . builder ( main ) . addParameter ( args , String :: class , VARARG ) . addStatement ( %T(args[0]).greet() , greeterClass ) . build ()) . build () file . writeTo ( System . out ) The KDoc catalogs the complete KotlinPoet API, which is inspired by JavaPoet . Code Control Flow Most of KotlinPoet s API uses immutable Kotlin objects. There s also builders, method chaining and varargs to make the API friendly. KotlinPoet offers models for Kotlin files ( FileSpec ), classes, interfaces objects ( TypeSpec ), type aliases ( TypeAliasSpec ), properties ( PropertySpec ), functions constructors ( FunSpec ), parameters ( ParameterSpec ) and annotations ( AnnotationSpec ). But the body of methods and constructors is not modeled. There s no expression class, no statement class or syntax tree nodes. Instead, KotlinPoet uses strings for code blocks, and you can take advantage of Kotlin s multiline strings to make this look nice: val main = FunSpec . builder ( main ) . addCode ( |var total = 0 |for (i in 0 until 10) { | total += i |} | . trimMargin ()) . build () Which generates this: fun main () { var total = 0 for ( i in 0 until 10 ) { total += i } } There are additional APIs to assist with newlines, braces and indentation: val main = FunSpec . builder ( main ) . addStatement ( var total = 0 ) . beginControlFlow ( for (i in 0 until 10) ) . addStatement ( total += i ) . endControlFlow () . build () This example is lame because the generated code is constant! Suppose instead of just adding 0 to 10, we want to make the operation and range configurable. Here s a method that generates a method: private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( var result = 1 ) . beginControlFlow ( for (i in $from until $to) ) . addStatement ( result = result $op i ) . endControlFlow () . addStatement ( return result ) . build () } And here s what we get when we call computeRange(\"multiply10to20\", 10, 20, \"*\") : fun multiply10to20 (): kotlin . Int { var result = 1 for ( i in 10 until 20 ) { result = result * i } return result } Methods generating methods! And since KotlinPoet generates source instead of bytecode, you can read through it to make sure it s right. %S for Strings When emitting code that includes string literals, we can use %S to emit a string , complete with wrapping quotation marks and escaping. Here s a program that emits 3 methods, each of which returns its own name: fun main ( args : Array String ) { val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addFunction ( whatsMyNameYo ( slimShady )) . addFunction ( whatsMyNameYo ( eminem )) . addFunction ( whatsMyNameYo ( marshallMathers )) . build () val kotlinFile = FileSpec . builder ( com.example.helloworld , HelloWorld ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) } private fun whatsMyNameYo ( name : String ): FunSpec { return FunSpec . builder ( name ) . returns ( String :: class ) . addStatement ( return %S , name ) . build () } In this case, using %S gives us quotation marks: class HelloWorld { fun slimShady (): String = slimShady fun eminem (): String = eminem fun marshallMathers (): String = marshallMathers } %P for String Templates %S also handles the escaping of dollar signs ( $ ), to avoid inadvertent creation of string templates, which may fail to compile in generated code: val stringWithADollar = Your total is + $ + 50 val funSpec = FunSpec . builder ( printTotal ) . returns ( String :: class ) . addStatement ( return %S , stringWithADollar ) . build () produces: fun printTotal (): String = Your total is ${ $ }50 If you need to generate string templates, use %P , which doesn t escape dollars: val amount = 50 val stringWithADollar = Your total is + $ + amount val funSpec = FunSpec . builder ( printTotal ) . returns ( String :: class ) . addStatement ( return %P , stringWithADollar ) . build () produces: fun printTotal (): String = Your total is $amount You can also use CodeBlock s as arguments to %P , which is handy when you need to reference importable types or members inside the string template: val file = FileSpec . builder ( com.example , Digits ) . addFunction ( FunSpec . builder ( print ) . addParameter ( digits , IntArray :: class ) . addStatement ( println(%P) , buildCodeBlock { val contentToString = MemberName ( kotlin.collections , contentToString ) add ( These are the digits: \\${digits.%M()} , contentToString ) }) . build ()) . build () println ( file ) The snippet above will produce the following output, handling the imports properly: package com.example import kotlin.IntArray import kotlin.collections.contentToString fun print ( digits : IntArray ) { println ( These are the digits: ${digits.contentToString()} ) } %T for Types KotlinPoet has rich built-in support for types, including automatic generation of import statements. Just use %T to reference types : val today = FunSpec . builder ( today ) . returns ( Date :: class ) . addStatement ( return %T() , Date :: class ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addFunction ( today ) . build () val kotlinFile = FileSpec . builder ( com.example.helloworld , HelloWorld ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) That generates the following .kt file, complete with the necessary import : package com.example.helloworld import java.util.Date class HelloWorld { fun today (): Date = Date () } We passed Date::class to reference a class that just-so-happens to be available when we re generating code. This doesn t need to be the case. Here s a similar example, but this one references a class that doesn t exist (yet): val hoverboard = ClassName ( com.mattel , Hoverboard ) val tomorrow = FunSpec . builder ( tomorrow ) . returns ( hoverboard ) . addStatement ( return %T() , hoverboard ) . build () And that not-yet-existent class is imported as well: package com.example.helloworld import com.mattel.Hoverboard class HelloWorld { fun tomorrow (): Hoverboard = Hoverboard () } The ClassName type is very important, and you ll need it frequently when you re using KotlinPoet. It can identify any declared class. Declared types are just the beginning of Kotlin s rich type system: we also have arrays, parameterized types, wildcard types, lambda types and type variables. KotlinPoet has classes for building each of these: import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy val hoverboard = ClassName ( com.mattel , Hoverboard ) val list = ClassName ( kotlin.collections , List ) val arrayList = ClassName ( kotlin.collections , ArrayList ) val listOfHoverboards = list . parameterizedBy ( hoverboard ) val arrayListOfHoverboards = arrayList . parameterizedBy ( hoverboard ) val thing = ClassName ( com.misc , Thing ) val array = ClassName ( kotlin , Array ) val producerArrayOfThings = array . parameterizedBy ( WildcardTypeName . producerOf ( thing )) val beyond = FunSpec . builder ( beyond ) . returns ( listOfHoverboards ) . addStatement ( val result = %T() , arrayListOfHoverboards ) . addStatement ( result += %T() , hoverboard ) . addStatement ( result += %T() , hoverboard ) . addStatement ( result += %T() , hoverboard ) . addStatement ( return result ) . build () val printThings = FunSpec . builder ( printThings ) . addParameter ( things , producerArrayOfThings ) . addStatement ( println(things) ) . build () KotlinPoet will decompose each type and import its components where possible. package com.example.helloworld import com.mattel.Hoverboard import com.misc.Thing import kotlin.Array import kotlin.collections.ArrayList import kotlin.collections.List class HelloWorld { fun beyond (): List Hoverboard { val result = ArrayList Hoverboard () result += Hoverboard () result += Hoverboard () result += Hoverboard () return result } fun printThings ( things : Array out Thing ) { println ( things ) } } Note that due to a bug , the IDE will not autocomplete the parameterizedBy or plusParameter extensions and you ll have to add the import statement manually to get those extensions. Nullable Types KotlinPoet supports nullable types. To convert a TypeName into its nullable counterpart, use the copy() method with nullable parameter set to true : val java = PropertySpec . builder ( java , String :: class . asTypeName (). copy ( nullable = true )) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( null ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addProperty ( java ) . addProperty ( kotlin , String :: class , KModifier . PRIVATE ) . build () generates: class HelloWorld { private var java : String ? = null private val kotlin : String } %M for Members Similar to types, KotlinPoet has a special placeholder for members (functions and properties), which comes handy when your code needs to access top-level members and members declared inside objects. Use %M to reference members, pass an instance of MemberName as the argument for the placeholder, and KotlinPoet will handle imports automatically: val createTaco = MemberName ( com.squareup.tacos , createTaco ) val isVegan = MemberName ( com.squareup.tacos , isVegan ) val file = FileSpec . builder ( com.squareup.example , TacoTest ) . addFunction ( FunSpec . builder ( main ) . addStatement ( val taco = %M() , createTaco ) . addStatement ( println(taco.%M) , isVegan ) . build ()) . build () println ( file ) The code above generates the following file: package com.squareup.example import com.squareup.tacos.createTaco import com.squareup.tacos.isVegan fun main () { val taco = createTaco () println ( taco . isVegan ) } As you can see, it s also possible to use %M to reference extension functions and properties. You just need to make sure the member can be imported without simple name collisions, otherwise importing will fail and the code generator output will not pass compilation. There s a way to work around such cases though - use FileSpec.addAliasedImport() to create an alias for a clashing MemberName : val createTaco = MemberName ( com.squareup.tacos , createTaco ) val createCake = MemberName ( com.squareup.cakes , createCake ) val isTacoVegan = MemberName ( com.squareup.tacos , isVegan ) val isCakeVegan = MemberName ( com.squareup.cakes , isVegan ) val file = FileSpec . builder ( com.squareup.example , Test ) . addAliasedImport ( isTacoVegan , isTacoVegan ) . addAliasedImport ( isCakeVegan , isCakeVegan ) . addFunction ( FunSpec . builder ( main ) . addStatement ( val taco = %M() , createTaco ) . addStatement ( val cake = %M() , createCake ) . addStatement ( println(taco.%M) , isTacoVegan ) . addStatement ( println(cake.%M) , isCakeVegan ) . build ()) . build () println ( file ) KotlinPoet will produce an aliased import for com.squareup.tacos2.isVegan : package com.squareup.example import com.squareup.cakes.createCake import com.squareup.tacos.createTaco import com.squareup.cakes.isVegan as isCakeVegan import com.squareup.tacos.isVegan as isTacoVegan fun main () { val taco = createTaco () val cake = createCake () println ( taco . isTacoVegan ) println ( cake . isCakeVegan ) } %N for Names Generated code is often self-referential. Use %N to refer to another generated declaration by its name. Here s a method that calls another: fun byteToHex ( b : Int ): String { val result = CharArray ( 2 ) result [ 0 ] = hexDigit (( b ushr 4 ) and 0 xf ) result [ 1 ] = hexDigit ( b and 0 xf ) return String ( result ) } fun hexDigit ( i : Int ): Char { return ( if ( i 10 ) i + 0 . toInt () else i - 10 + a . toInt ()). toChar () } When generating the code above, we pass the hexDigit() method as an argument to the byteToHex() method using %N : val hexDigit = FunSpec . builder ( hexDigit ) . addParameter ( i , Int :: class ) . returns ( Char :: class ) . addStatement ( return (if (i 10) i + 0 .toInt() else i - 10 + a .toInt()).toChar() ) . build () val byteToHex = FunSpec . builder ( byteToHex ) . addParameter ( b , Int :: class ) . returns ( String :: class ) . addStatement ( val result = CharArray(2) ) . addStatement ( result[0] = %N((b ushr 4) and 0xf) , hexDigit ) . addStatement ( result[1] = %N(b and 0xf) , hexDigit ) . addStatement ( return String(result) ) . build () Another handy feature that %N provides is automatically escaping names that contain illegal identifier characters with double ticks. Suppose your code creates a MemberName with a Kotlin keyword as the simple name: val taco = ClassName ( com.squareup.tacos , Taco ) val packager = ClassName ( com.squareup.tacos , TacoPackager ) val file = FileSpec . builder ( com.example , Test ) . addFunction ( FunSpec . builder ( packageTacos ) . addParameter ( tacos , LIST . parameterizedBy ( taco )) . addParameter ( packager , packager ) . addStatement ( packager.%N(tacos) , packager . member ( package )) . build ()) . build () %N will escape the name for you, ensuring that the output will pass compilation: package com.example import com.squareup.tacos.Taco import com.squareup.tacos.TacoPackager import kotlin.collections.List fun packageTacos ( tacos : List Taco , packager : TacoPackager ) { packager . `package` ( tacos ) } %L for Literals Although Kotlin s string templates usually work well in cases when you want to include literals into generated code, KotlinPoet offers additional syntax inspired-by but incompatible-with String.format() . It accepts %L to emit a literal value in the output. This works just like Formatter s %s : private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( var result = 0 ) . beginControlFlow ( for (i in %L until %L) , from , to ) . addStatement ( result = result %L i , op ) . endControlFlow () . addStatement ( return result ) . build () } Literals are emitted directly to the output code with no escaping. Arguments for literals may be strings, primitives, and a few KotlinPoet types described below. Code block format strings Code blocks may specify the values for their placeholders in a few ways. Only one style may be used for each operation on a code block. Relative Arguments Pass an argument value for each placeholder in the format string to CodeBlock.add() . In each example, we generate code to say I ate 3 tacos CodeBlock . builder (). add ( I ate %L %L , 3 , tacos ) Positional Arguments Place an integer index (1-based) before the placeholder in the format string to specify which argument to use. CodeBlock . builder (). add ( I ate %2L %1L , tacos , 3 ) Named Arguments Use the syntax %argumentName:X where X is the format character and call CodeBlock.addNamed() with a map containing all argument keys in the format string. Argument names use characters in a-z , A-Z , 0-9 , and _ , and must start with a lowercase character. val map = LinkedHashMap String , Any () map += food to tacos map += count to 3 CodeBlock . builder (). addNamed ( I ate %count:L %food:L , map ) Functions All of the above functions have a code body. Use KModifier.ABSTRACT to get a function without any body. This is only legal if it is enclosed by an abstract class or an interface. val flux = FunSpec . builder ( flux ) . addModifiers ( KModifier . ABSTRACT , KModifier . PROTECTED ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addModifiers ( KModifier . ABSTRACT ) . addFunction ( flux ) . build () Which generates this: abstract class HelloWorld { protected abstract fun flux () } The other modifiers work where permitted. Methods also have parameters, varargs, KDoc, annotations, type variables, return type and receiver type for extension functions. All of these are configured with FunSpec.Builder . Also, KotlinPoet can recognize single-expression functions and print them out properly. It treats each function with a body that starts with return as a single-expression function: val abs = FunSpec . builder ( abs ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( return if (this 0) -this else this ) . build () Which outputs: fun Int . abs (): Int = if ( this 0 ) - this else this Default function arguments Consider the example below. Function argument b has a default value of 0 to avoid overloading this function. fun add ( a : Int , b : Int = 0 ) { print ( a + b = ${ a + b } ) } Use the defaultValue() builder function to declare default value for a function argument. FunSpec . builder ( add ) . addParameter ( a , Int :: class ) . addParameter ( ParameterSpec . builder ( b , Int :: class ) . defaultValue ( %L , 0 ) . build ()) . addStatement ( print(\\ a + b = ${ a + b }\\ ) ) . build () Spaces wrap by default! In order to provide meaningful formatting, KotlinPoet would replace spaces, found in blocks of code, with new line symbols, in cases when the line of code exceeds the length limit. Let s take this function for example: val funSpec = FunSpec . builder ( foo ) . addStatement ( return (100..10000).map { number - number * number }.map { number - number.toString() }.also { string - println(string) } ) . build () Depending on where it s found in the file, it may end up being printed out like this: fun foo () = ( 100. . 10000 ). map { number - number * number }. map { number - number . toString () }. also { string - println ( string ) } Unfortunately this code is broken: the compiler expects also and { to be on the same line. KotlinPoet is unable to understand the context of the expression and fix the formatting for you, but there s a trick you can use to declare a non-breaking space - use the \u00b7 symbol where you would otherwise use a space. Let s apply this to our example: val funSpec = FunSpec . builder ( foo ) . addStatement ( return (100..10000).map\u00b7{ number - number * number }.map\u00b7{ number - number.toString() }.also\u00b7{ string - println(string) } ) . build () This will now produce the following result: fun foo () = ( 100. . 10000 ). map { number - number * number }. map { number - number . toString () }. also { string - println ( string ) } The code is now correct and will compile properly. It still doesn t look perfect - you can play with replacing other spaces in the code block with \u00b7 symbols to achieve better formatting. Constructors FunSpec is a slight misnomer; it can also be used for constructors: val flux = FunSpec . constructorBuilder () . addParameter ( greeting , String :: class ) . addStatement ( this.%N = %N , greeting , greeting ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addProperty ( greeting , String :: class , KModifier . PRIVATE ) . addFunction ( flux ) . build () Which generates this: class HelloWorld { private val greeting : String constructor ( greeting : String ) { this . greeting = greeting } } For the most part, constructors work just like methods. When emitting code, KotlinPoet will place constructors before methods in the output file. Often times you ll need to generate the primary constructor for a class: val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . primaryConstructor ( flux ) . addProperty ( greeting , String :: class , KModifier . PRIVATE ) . build () This code, however, generates the following: class HelloWorld ( greeting : String ) { private val greeting : String init { this . greeting = greeting } } By default, KotlinPoet won t merge primary constructor parameters and properties, even if they share the same name. To achieve the effect, you have to tell KotlinPoet that the property is initialized via the constructor parameter: val flux = FunSpec . constructorBuilder () . addParameter ( greeting , String :: class ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . primaryConstructor ( flux ) . addProperty ( PropertySpec . builder ( greeting , String :: class ) . initializer ( greeting ) . addModifiers ( KModifier . PRIVATE ) . build ()) . build () Now we re getting the following output: class HelloWorld ( private val greeting : String ) Notice that KotlinPoet omits {} for classes with empty bodies. Parameters Declare parameters on methods and constructors with either ParameterSpec.builder() or FunSpec s convenient addParameter() API: val android = ParameterSpec . builder ( android , String :: class ) . defaultValue ( \\ pie\\ ) . build () val welcomeOverlords = FunSpec . builder ( welcomeOverlords ) . addParameter ( android ) . addParameter ( robot , String :: class ) . build () The code above generates: fun welcomeOverlords ( android : String = pie , robot : String ) { } The extended Builder form is necessary when the parameter has annotations (such as @Inject ). Properties Like parameters, properties can be created either with builders or by using convenient helper methods: val android = PropertySpec . builder ( android , String :: class ) . addModifiers ( KModifier . PRIVATE ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addProperty ( android ) . addProperty ( robot , String :: class , KModifier . PRIVATE ) . build () Which generates: class HelloWorld { private val android : String private val robot : String } The extended Builder form is necessary when a field has KDoc, annotations, or a field initializer. Field initializers use the same String.format() -like syntax as the code blocks above: val android = PropertySpec . builder ( android , String :: class ) . addModifiers ( KModifier . PRIVATE ) . initializer ( %S + %L , Oreo v. , 8.1 ) . build () Which generates: private val android : String = Oreo v. + 8.1 By default PropertySpec.Builder produces val properties. Use mutable() if you need a var : val android = PropertySpec . builder ( android , String :: class ) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( %S + %L , Oreo v. , 8.1 ) . build () Inline properties The way KotlinPoet models inline properties deserves special mention. The following snippet of code: val android = PropertySpec . builder ( android , String :: class ) . addModifiers ( KModifier . INLINE ) . build () will produce an error: java.lang.IllegalArgumentException: KotlinPoet doesn t allow setting the inline modifier on properties. You should mark either the getter, the setter, or both inline. Indeed, a property marked with inline should have at least one accessor which will be inlined by the compiler. Let s add a getter to this property: val android = PropertySpec . builder ( android , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( return %S , foo ) . build ()) . build () The result is the following: val android : kotlin . String inline get () = foo Now, what if we wanted to add a non-inline setter to the property above? We can do so without modifying any of the code we wrote previously: val android = PropertySpec . builder ( android , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( return %S , foo ) . build ()) . setter ( FunSpec . setterBuilder () . addParameter ( value , String :: class ) . build ()) . build () We get the expected result: val android : kotlin . String inline get () = foo set ( value ) { } Finally, if we go back and add KModifier.INLINE to the setter, KotlinPoet can wrap it nicely and produce the following result: inline val android : kotlin . String get () = foo set ( value ) { } Removing the modifier from either the getter or the setter will unwrap the expression back. If, on the other hand, KotlinPoet had allowed marking a property inline directly, the programmer would have had to manually add/remove the modifier whenever the state of the accessors changes in order to get correct and compilable output. We re solving this problem by making accessors the source of truth for the inline modifier. Interfaces KotlinPoet has no trouble with interfaces. Note that interface methods must always be ABSTRACT . The modifier is necessary when defining the interface: val helloWorld = TypeSpec . interfaceBuilder ( HelloWorld ) . addProperty ( buzz , String :: class ) . addFunction ( FunSpec . builder ( beep ) . addModifiers ( KModifier . ABSTRACT ) . build ()) . build () But these modifiers are omitted when the code is generated. These are the defaults so we don t need to include them for kotlinc s benefit! interface HelloWorld { val buzz : String fun beep () } Objects KotlinPoet supports objects: val helloWorld = TypeSpec . objectBuilder ( HelloWorld ) . addProperty ( PropertySpec . builder ( buzz , String :: class ) . initializer ( %S , buzz ) . build ()) . addFunction ( FunSpec . builder ( beep ) . addStatement ( println(%S) , Beep! ) . build ()) . build () Similarly, you can create companion objects and add them to classes using addType() : val companion = TypeSpec . companionObjectBuilder () . addProperty ( PropertySpec . builder ( buzz , String :: class ) . initializer ( %S , buzz ) . build ()) . addFunction ( FunSpec . builder ( beep ) . addStatement ( println(%S) , Beep! ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addType ( companion ) . build () You can provide an optional name for a companion object. Enums Use enumBuilder to create the enum type, and addEnumConstant() for each value: val helloWorld = TypeSpec . enumBuilder ( Roshambo ) . addEnumConstant ( ROCK ) . addEnumConstant ( SCISSORS ) . addEnumConstant ( PAPER ) . build () To generate this: enum class Roshambo { ROCK , SCISSORS , PAPER } Fancy enums are supported, where the enum values override methods or call a superclass constructor. Here s a comprehensive example: val helloWorld = TypeSpec . enumBuilder ( Roshambo ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( handsign , String :: class ) . build ()) . addEnumConstant ( ROCK , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( %S , fist ) . addFunction ( FunSpec . builder ( toString ) . addModifiers ( KModifier . OVERRIDE ) . addStatement ( return %S , avalanche! ) . returns ( String :: class ) . build ()) . build ()) . addEnumConstant ( SCISSORS , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( %S , peace ) . build ()) . addEnumConstant ( PAPER , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( %S , flat ) . build ()) . addProperty ( PropertySpec . builder ( handsign , String :: class , KModifier . PRIVATE ) . initializer ( handsign ) . build ()) . build () Which generates this: enum class Roshambo ( private val handsign : String ) { ROCK ( fist ) { override fun toString (): String = avalanche! }, SCISSORS ( peace ), PAPER ( flat ); } Anonymous Inner Classes In the enum code, we used TypeSpec.anonymousClassBuilder() . Anonymous inner classes can also be used in code blocks. They are values that can be referenced with %L : val comparator = TypeSpec . anonymousClassBuilder () . addSuperinterface ( Comparator :: class . parameterizedBy ( String :: class )) . addFunction ( FunSpec . builder ( compare ) . addModifiers ( KModifier . OVERRIDE ) . addParameter ( a , String :: class ) . addParameter ( b , String :: class ) . returns ( Int :: class ) . addStatement ( return %N.length - %N.length , a , b ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addFunction ( FunSpec . builder ( sortByLength ) . addParameter ( strings , List :: class . parameterizedBy ( String :: class )) . addStatement ( %N.sortedWith(%L) , strings , comparator ) . build ()) . build () This generates a method that contains a class that contains a method: class HelloWorld { fun sortByLength ( strings : List String ) { strings . sortedWith ( object : Comparator String { override fun compare ( a : String , b : String ): Int = a . length - b . length }) } } One particularly tricky part of defining anonymous inner classes is the arguments to the superclass constructor. To pass them use TypeSpec.Builder s addSuperclassConstructorParameter() method. Annotations Simple annotations are easy: val test = FunSpec . builder ( test string equality ) . addAnnotation ( Test :: class ) . addStatement ( assertThat(%1S).isEqualTo(%1S) , foo ) . build () Which generates this function with an @Test annotation: @Test fun `test string equality` () { assertThat ( foo ). isEqualTo ( foo ) } Use AnnotationSpec.builder() to set properties on annotations: val logRecord = FunSpec . builder ( recordEvent ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( Headers :: class ) . addMember ( accept = %S , application/json; charset=utf-8 ) . addMember ( userAgent = %S , Square Cash ) . build ()) . addParameter ( logRecord , LogRecord :: class ) . returns ( LogReceipt :: class ) . build () Which generates this annotation with accept and userAgent properties: @Headers ( accept = application/json; charset=utf-8 , userAgent = Square Cash ) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt When you get fancy, annotation values can be annotations themselves. Use %L for embedded annotations: val headerList = ClassName ( , HeaderList ) val header = ClassName ( , Header ) val logRecord = FunSpec . builder ( recordEvent ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( headerList ) . addMember ( [\\n\u21e5%L,\\n%L\u21e4\\n] , AnnotationSpec . builder ( header ) . addMember ( name = %S , Accept ) . addMember ( value = %S , application/json; charset=utf-8 ) . build (), AnnotationSpec . builder ( header ) . addMember ( name = %S , User-Agent ) . addMember ( value = %S , Square Cash ) . build ()) . build ()) . addParameter ( logRecord , logRecordName ) . returns ( logReceipt ) . build () Which generates this: @HeaderList ([ Header ( name = Accept , value = application/json; charset=utf-8 ), Header ( name = User-Agent , value = Square Cash ) ]) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt KotlinPoet supports use-site targets for annotations: val utils = FileSpec . builder ( com.example , Utils ) . addAnnotation ( AnnotationSpec . builder ( JvmName :: class ) . useSiteTarget ( UseSiteTarget . FILE ) . build ()) . addFunction ( FunSpec . builder ( abs ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( return if (this 0) -this else this ) . build ()) . build () Will output this: @file : JvmName package com.example import kotlin.Int import kotlin.jvm.JvmName fun Int . abs (): Int = if ( this 0 ) - this else this Type Aliases KotlinPoet provides API for creating Type Aliases, which supports simple class names, parameterized types and lambdas: val fileTable = Map :: class . asClassName () . parameterizedBy ( TypeVariableName ( K ), Set :: class . parameterizedBy ( File :: class )) val predicate = LambdaTypeName . get ( parameters = * arrayOf ( TypeVariableName ( T )), returnType = Boolean :: class . asClassName ()) val helloWorld = FileSpec . builder ( com.example , HelloWorld ) . addTypeAlias ( TypeAliasSpec . builder ( Word , String :: class ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( FileTable K , fileTable ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( Predicate T , predicate ). build ()) . build () Which generates the following: package com.example import java.io.File import kotlin.Boolean import kotlin.String import kotlin.collections.Map import kotlin.collections.Set typealias Word = String typealias FileTable K = Map K , Set File typealias Predicate T = ( T ) - Boolean Callable References Callable references to constructors, functions, and properties may be emitted via: ClassName.constructorReference() for constructors MemberName.reference() for functions and properties For example, val helloClass = ClassName ( com.example.hello , Hello ) val worldFunction : MemberName = helloClass . member ( world ) val byeProperty : MemberName = helloClass . nestedClass ( World ). member ( bye ) val factoriesFun = FunSpec . builder ( factories ) . addStatement ( val hello = %L , helloClass . constructorReference ()) . addStatement ( val world = %L , worldFunction . reference ()) . addStatement ( val bye = %L , byeProperty . reference ()) . build () FileSpec . builder ( com.example , HelloWorld ) . addFunction ( factoriesFun ) . build () would generate: package com.example import com.example.hello.Hello fun factories () { val hello = :: Hello val world = Hello :: world val bye = Hello . World :: bye } Top-level classes and members with conflicting names may require aliased imports, as with member names . Download Download the latest .jar or depend via Maven: dependency groupId com.squareup /groupId artifactId kotlinpoet /artifactId version 1.3.0 /version /dependency or Gradle: compile com.squareup:kotlinpoet:1.3.0 Snapshots of the development version are available in Sonatype s snapshots repository . License Copyright 2017 Square, Inc. Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#kotlinpoet","text":"KotlinPoet is a Kotlin and Java API for generating .kt source files. Source file generation can be useful when doing things such as annotation processing or interacting with metadata files (e.g., database schemas, protocol formats). By generating code, you eliminate the need to write boilerplate while also keeping a single source of truth for the metadata.","title":"KotlinPoet"},{"location":"#example","text":"Here s a HelloWorld file: class Greeter ( val name : String ) { fun greet () { println ( Hello, $name ) } } fun main ( vararg args : String ) { Greeter ( args [ 0 ]). greet () } And this is the code to generate it with KotlinPoet: val greeterClass = ClassName ( , Greeter ) val file = FileSpec . builder ( , HelloWorld ) . addType ( TypeSpec . classBuilder ( Greeter ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( name , String :: class ) . build ()) . addProperty ( PropertySpec . builder ( name , String :: class ) . initializer ( name ) . build ()) . addFunction ( FunSpec . builder ( greet ) . addStatement ( println(%P) , Hello, \\$name ) . build ()) . build ()) . addFunction ( FunSpec . builder ( main ) . addParameter ( args , String :: class , VARARG ) . addStatement ( %T(args[0]).greet() , greeterClass ) . build ()) . build () file . writeTo ( System . out ) The KDoc catalogs the complete KotlinPoet API, which is inspired by JavaPoet .","title":"Example"},{"location":"#code-control-flow","text":"Most of KotlinPoet s API uses immutable Kotlin objects. There s also builders, method chaining and varargs to make the API friendly. KotlinPoet offers models for Kotlin files ( FileSpec ), classes, interfaces objects ( TypeSpec ), type aliases ( TypeAliasSpec ), properties ( PropertySpec ), functions constructors ( FunSpec ), parameters ( ParameterSpec ) and annotations ( AnnotationSpec ). But the body of methods and constructors is not modeled. There s no expression class, no statement class or syntax tree nodes. Instead, KotlinPoet uses strings for code blocks, and you can take advantage of Kotlin s multiline strings to make this look nice: val main = FunSpec . builder ( main ) . addCode ( |var total = 0 |for (i in 0 until 10) { | total += i |} | . trimMargin ()) . build () Which generates this: fun main () { var total = 0 for ( i in 0 until 10 ) { total += i } } There are additional APIs to assist with newlines, braces and indentation: val main = FunSpec . builder ( main ) . addStatement ( var total = 0 ) . beginControlFlow ( for (i in 0 until 10) ) . addStatement ( total += i ) . endControlFlow () . build () This example is lame because the generated code is constant! Suppose instead of just adding 0 to 10, we want to make the operation and range configurable. Here s a method that generates a method: private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( var result = 1 ) . beginControlFlow ( for (i in $from until $to) ) . addStatement ( result = result $op i ) . endControlFlow () . addStatement ( return result ) . build () } And here s what we get when we call computeRange(\"multiply10to20\", 10, 20, \"*\") : fun multiply10to20 (): kotlin . Int { var result = 1 for ( i in 10 until 20 ) { result = result * i } return result } Methods generating methods! And since KotlinPoet generates source instead of bytecode, you can read through it to make sure it s right.","title":"Code &amp; Control Flow"},{"location":"#s-for-strings","text":"When emitting code that includes string literals, we can use %S to emit a string , complete with wrapping quotation marks and escaping. Here s a program that emits 3 methods, each of which returns its own name: fun main ( args : Array String ) { val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addFunction ( whatsMyNameYo ( slimShady )) . addFunction ( whatsMyNameYo ( eminem )) . addFunction ( whatsMyNameYo ( marshallMathers )) . build () val kotlinFile = FileSpec . builder ( com.example.helloworld , HelloWorld ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) } private fun whatsMyNameYo ( name : String ): FunSpec { return FunSpec . builder ( name ) . returns ( String :: class ) . addStatement ( return %S , name ) . build () } In this case, using %S gives us quotation marks: class HelloWorld { fun slimShady (): String = slimShady fun eminem (): String = eminem fun marshallMathers (): String = marshallMathers }","title":"%S for Strings"},{"location":"#p-for-string-templates","text":"%S also handles the escaping of dollar signs ( $ ), to avoid inadvertent creation of string templates, which may fail to compile in generated code: val stringWithADollar = Your total is + $ + 50 val funSpec = FunSpec . builder ( printTotal ) . returns ( String :: class ) . addStatement ( return %S , stringWithADollar ) . build () produces: fun printTotal (): String = Your total is ${ $ }50 If you need to generate string templates, use %P , which doesn t escape dollars: val amount = 50 val stringWithADollar = Your total is + $ + amount val funSpec = FunSpec . builder ( printTotal ) . returns ( String :: class ) . addStatement ( return %P , stringWithADollar ) . build () produces: fun printTotal (): String = Your total is $amount You can also use CodeBlock s as arguments to %P , which is handy when you need to reference importable types or members inside the string template: val file = FileSpec . builder ( com.example , Digits ) . addFunction ( FunSpec . builder ( print ) . addParameter ( digits , IntArray :: class ) . addStatement ( println(%P) , buildCodeBlock { val contentToString = MemberName ( kotlin.collections , contentToString ) add ( These are the digits: \\${digits.%M()} , contentToString ) }) . build ()) . build () println ( file ) The snippet above will produce the following output, handling the imports properly: package com.example import kotlin.IntArray import kotlin.collections.contentToString fun print ( digits : IntArray ) { println ( These are the digits: ${digits.contentToString()} ) }","title":"%P for String Templates"},{"location":"#t-for-types","text":"KotlinPoet has rich built-in support for types, including automatic generation of import statements. Just use %T to reference types : val today = FunSpec . builder ( today ) . returns ( Date :: class ) . addStatement ( return %T() , Date :: class ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addFunction ( today ) . build () val kotlinFile = FileSpec . builder ( com.example.helloworld , HelloWorld ) . addType ( helloWorld ) . build () kotlinFile . writeTo ( System . out ) That generates the following .kt file, complete with the necessary import : package com.example.helloworld import java.util.Date class HelloWorld { fun today (): Date = Date () } We passed Date::class to reference a class that just-so-happens to be available when we re generating code. This doesn t need to be the case. Here s a similar example, but this one references a class that doesn t exist (yet): val hoverboard = ClassName ( com.mattel , Hoverboard ) val tomorrow = FunSpec . builder ( tomorrow ) . returns ( hoverboard ) . addStatement ( return %T() , hoverboard ) . build () And that not-yet-existent class is imported as well: package com.example.helloworld import com.mattel.Hoverboard class HelloWorld { fun tomorrow (): Hoverboard = Hoverboard () } The ClassName type is very important, and you ll need it frequently when you re using KotlinPoet. It can identify any declared class. Declared types are just the beginning of Kotlin s rich type system: we also have arrays, parameterized types, wildcard types, lambda types and type variables. KotlinPoet has classes for building each of these: import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy val hoverboard = ClassName ( com.mattel , Hoverboard ) val list = ClassName ( kotlin.collections , List ) val arrayList = ClassName ( kotlin.collections , ArrayList ) val listOfHoverboards = list . parameterizedBy ( hoverboard ) val arrayListOfHoverboards = arrayList . parameterizedBy ( hoverboard ) val thing = ClassName ( com.misc , Thing ) val array = ClassName ( kotlin , Array ) val producerArrayOfThings = array . parameterizedBy ( WildcardTypeName . producerOf ( thing )) val beyond = FunSpec . builder ( beyond ) . returns ( listOfHoverboards ) . addStatement ( val result = %T() , arrayListOfHoverboards ) . addStatement ( result += %T() , hoverboard ) . addStatement ( result += %T() , hoverboard ) . addStatement ( result += %T() , hoverboard ) . addStatement ( return result ) . build () val printThings = FunSpec . builder ( printThings ) . addParameter ( things , producerArrayOfThings ) . addStatement ( println(things) ) . build () KotlinPoet will decompose each type and import its components where possible. package com.example.helloworld import com.mattel.Hoverboard import com.misc.Thing import kotlin.Array import kotlin.collections.ArrayList import kotlin.collections.List class HelloWorld { fun beyond (): List Hoverboard { val result = ArrayList Hoverboard () result += Hoverboard () result += Hoverboard () result += Hoverboard () return result } fun printThings ( things : Array out Thing ) { println ( things ) } } Note that due to a bug , the IDE will not autocomplete the parameterizedBy or plusParameter extensions and you ll have to add the import statement manually to get those extensions.","title":"%T for Types"},{"location":"#nullable-types","text":"KotlinPoet supports nullable types. To convert a TypeName into its nullable counterpart, use the copy() method with nullable parameter set to true : val java = PropertySpec . builder ( java , String :: class . asTypeName (). copy ( nullable = true )) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( null ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addProperty ( java ) . addProperty ( kotlin , String :: class , KModifier . PRIVATE ) . build () generates: class HelloWorld { private var java : String ? = null private val kotlin : String }","title":"Nullable Types"},{"location":"#m-for-members","text":"Similar to types, KotlinPoet has a special placeholder for members (functions and properties), which comes handy when your code needs to access top-level members and members declared inside objects. Use %M to reference members, pass an instance of MemberName as the argument for the placeholder, and KotlinPoet will handle imports automatically: val createTaco = MemberName ( com.squareup.tacos , createTaco ) val isVegan = MemberName ( com.squareup.tacos , isVegan ) val file = FileSpec . builder ( com.squareup.example , TacoTest ) . addFunction ( FunSpec . builder ( main ) . addStatement ( val taco = %M() , createTaco ) . addStatement ( println(taco.%M) , isVegan ) . build ()) . build () println ( file ) The code above generates the following file: package com.squareup.example import com.squareup.tacos.createTaco import com.squareup.tacos.isVegan fun main () { val taco = createTaco () println ( taco . isVegan ) } As you can see, it s also possible to use %M to reference extension functions and properties. You just need to make sure the member can be imported without simple name collisions, otherwise importing will fail and the code generator output will not pass compilation. There s a way to work around such cases though - use FileSpec.addAliasedImport() to create an alias for a clashing MemberName : val createTaco = MemberName ( com.squareup.tacos , createTaco ) val createCake = MemberName ( com.squareup.cakes , createCake ) val isTacoVegan = MemberName ( com.squareup.tacos , isVegan ) val isCakeVegan = MemberName ( com.squareup.cakes , isVegan ) val file = FileSpec . builder ( com.squareup.example , Test ) . addAliasedImport ( isTacoVegan , isTacoVegan ) . addAliasedImport ( isCakeVegan , isCakeVegan ) . addFunction ( FunSpec . builder ( main ) . addStatement ( val taco = %M() , createTaco ) . addStatement ( val cake = %M() , createCake ) . addStatement ( println(taco.%M) , isTacoVegan ) . addStatement ( println(cake.%M) , isCakeVegan ) . build ()) . build () println ( file ) KotlinPoet will produce an aliased import for com.squareup.tacos2.isVegan : package com.squareup.example import com.squareup.cakes.createCake import com.squareup.tacos.createTaco import com.squareup.cakes.isVegan as isCakeVegan import com.squareup.tacos.isVegan as isTacoVegan fun main () { val taco = createTaco () val cake = createCake () println ( taco . isTacoVegan ) println ( cake . isCakeVegan ) }","title":"%M for Members"},{"location":"#n-for-names","text":"Generated code is often self-referential. Use %N to refer to another generated declaration by its name. Here s a method that calls another: fun byteToHex ( b : Int ): String { val result = CharArray ( 2 ) result [ 0 ] = hexDigit (( b ushr 4 ) and 0 xf ) result [ 1 ] = hexDigit ( b and 0 xf ) return String ( result ) } fun hexDigit ( i : Int ): Char { return ( if ( i 10 ) i + 0 . toInt () else i - 10 + a . toInt ()). toChar () } When generating the code above, we pass the hexDigit() method as an argument to the byteToHex() method using %N : val hexDigit = FunSpec . builder ( hexDigit ) . addParameter ( i , Int :: class ) . returns ( Char :: class ) . addStatement ( return (if (i 10) i + 0 .toInt() else i - 10 + a .toInt()).toChar() ) . build () val byteToHex = FunSpec . builder ( byteToHex ) . addParameter ( b , Int :: class ) . returns ( String :: class ) . addStatement ( val result = CharArray(2) ) . addStatement ( result[0] = %N((b ushr 4) and 0xf) , hexDigit ) . addStatement ( result[1] = %N(b and 0xf) , hexDigit ) . addStatement ( return String(result) ) . build () Another handy feature that %N provides is automatically escaping names that contain illegal identifier characters with double ticks. Suppose your code creates a MemberName with a Kotlin keyword as the simple name: val taco = ClassName ( com.squareup.tacos , Taco ) val packager = ClassName ( com.squareup.tacos , TacoPackager ) val file = FileSpec . builder ( com.example , Test ) . addFunction ( FunSpec . builder ( packageTacos ) . addParameter ( tacos , LIST . parameterizedBy ( taco )) . addParameter ( packager , packager ) . addStatement ( packager.%N(tacos) , packager . member ( package )) . build ()) . build () %N will escape the name for you, ensuring that the output will pass compilation: package com.example import com.squareup.tacos.Taco import com.squareup.tacos.TacoPackager import kotlin.collections.List fun packageTacos ( tacos : List Taco , packager : TacoPackager ) { packager . `package` ( tacos ) }","title":"%N for Names"},{"location":"#l-for-literals","text":"Although Kotlin s string templates usually work well in cases when you want to include literals into generated code, KotlinPoet offers additional syntax inspired-by but incompatible-with String.format() . It accepts %L to emit a literal value in the output. This works just like Formatter s %s : private fun computeRange ( name : String , from : Int , to : Int , op : String ): FunSpec { return FunSpec . builder ( name ) . returns ( Int :: class ) . addStatement ( var result = 0 ) . beginControlFlow ( for (i in %L until %L) , from , to ) . addStatement ( result = result %L i , op ) . endControlFlow () . addStatement ( return result ) . build () } Literals are emitted directly to the output code with no escaping. Arguments for literals may be strings, primitives, and a few KotlinPoet types described below.","title":"%L for Literals"},{"location":"#code-block-format-strings","text":"Code blocks may specify the values for their placeholders in a few ways. Only one style may be used for each operation on a code block.","title":"Code block format strings"},{"location":"#relative-arguments","text":"Pass an argument value for each placeholder in the format string to CodeBlock.add() . In each example, we generate code to say I ate 3 tacos CodeBlock . builder (). add ( I ate %L %L , 3 , tacos )","title":"Relative Arguments"},{"location":"#positional-arguments","text":"Place an integer index (1-based) before the placeholder in the format string to specify which argument to use. CodeBlock . builder (). add ( I ate %2L %1L , tacos , 3 )","title":"Positional Arguments"},{"location":"#named-arguments","text":"Use the syntax %argumentName:X where X is the format character and call CodeBlock.addNamed() with a map containing all argument keys in the format string. Argument names use characters in a-z , A-Z , 0-9 , and _ , and must start with a lowercase character. val map = LinkedHashMap String , Any () map += food to tacos map += count to 3 CodeBlock . builder (). addNamed ( I ate %count:L %food:L , map )","title":"Named Arguments"},{"location":"#functions","text":"All of the above functions have a code body. Use KModifier.ABSTRACT to get a function without any body. This is only legal if it is enclosed by an abstract class or an interface. val flux = FunSpec . builder ( flux ) . addModifiers ( KModifier . ABSTRACT , KModifier . PROTECTED ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addModifiers ( KModifier . ABSTRACT ) . addFunction ( flux ) . build () Which generates this: abstract class HelloWorld { protected abstract fun flux () } The other modifiers work where permitted. Methods also have parameters, varargs, KDoc, annotations, type variables, return type and receiver type for extension functions. All of these are configured with FunSpec.Builder . Also, KotlinPoet can recognize single-expression functions and print them out properly. It treats each function with a body that starts with return as a single-expression function: val abs = FunSpec . builder ( abs ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( return if (this 0) -this else this ) . build () Which outputs: fun Int . abs (): Int = if ( this 0 ) - this else this","title":"Functions"},{"location":"#default-function-arguments","text":"Consider the example below. Function argument b has a default value of 0 to avoid overloading this function. fun add ( a : Int , b : Int = 0 ) { print ( a + b = ${ a + b } ) } Use the defaultValue() builder function to declare default value for a function argument. FunSpec . builder ( add ) . addParameter ( a , Int :: class ) . addParameter ( ParameterSpec . builder ( b , Int :: class ) . defaultValue ( %L , 0 ) . build ()) . addStatement ( print(\\ a + b = ${ a + b }\\ ) ) . build ()","title":"Default function arguments"},{"location":"#spaces-wrap-by-default","text":"In order to provide meaningful formatting, KotlinPoet would replace spaces, found in blocks of code, with new line symbols, in cases when the line of code exceeds the length limit. Let s take this function for example: val funSpec = FunSpec . builder ( foo ) . addStatement ( return (100..10000).map { number - number * number }.map { number - number.toString() }.also { string - println(string) } ) . build () Depending on where it s found in the file, it may end up being printed out like this: fun foo () = ( 100. . 10000 ). map { number - number * number }. map { number - number . toString () }. also { string - println ( string ) } Unfortunately this code is broken: the compiler expects also and { to be on the same line. KotlinPoet is unable to understand the context of the expression and fix the formatting for you, but there s a trick you can use to declare a non-breaking space - use the \u00b7 symbol where you would otherwise use a space. Let s apply this to our example: val funSpec = FunSpec . builder ( foo ) . addStatement ( return (100..10000).map\u00b7{ number - number * number }.map\u00b7{ number - number.toString() }.also\u00b7{ string - println(string) } ) . build () This will now produce the following result: fun foo () = ( 100. . 10000 ). map { number - number * number }. map { number - number . toString () }. also { string - println ( string ) } The code is now correct and will compile properly. It still doesn t look perfect - you can play with replacing other spaces in the code block with \u00b7 symbols to achieve better formatting.","title":"Spaces wrap by default!"},{"location":"#constructors","text":"FunSpec is a slight misnomer; it can also be used for constructors: val flux = FunSpec . constructorBuilder () . addParameter ( greeting , String :: class ) . addStatement ( this.%N = %N , greeting , greeting ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addProperty ( greeting , String :: class , KModifier . PRIVATE ) . addFunction ( flux ) . build () Which generates this: class HelloWorld { private val greeting : String constructor ( greeting : String ) { this . greeting = greeting } } For the most part, constructors work just like methods. When emitting code, KotlinPoet will place constructors before methods in the output file. Often times you ll need to generate the primary constructor for a class: val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . primaryConstructor ( flux ) . addProperty ( greeting , String :: class , KModifier . PRIVATE ) . build () This code, however, generates the following: class HelloWorld ( greeting : String ) { private val greeting : String init { this . greeting = greeting } } By default, KotlinPoet won t merge primary constructor parameters and properties, even if they share the same name. To achieve the effect, you have to tell KotlinPoet that the property is initialized via the constructor parameter: val flux = FunSpec . constructorBuilder () . addParameter ( greeting , String :: class ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . primaryConstructor ( flux ) . addProperty ( PropertySpec . builder ( greeting , String :: class ) . initializer ( greeting ) . addModifiers ( KModifier . PRIVATE ) . build ()) . build () Now we re getting the following output: class HelloWorld ( private val greeting : String ) Notice that KotlinPoet omits {} for classes with empty bodies.","title":"Constructors"},{"location":"#parameters","text":"Declare parameters on methods and constructors with either ParameterSpec.builder() or FunSpec s convenient addParameter() API: val android = ParameterSpec . builder ( android , String :: class ) . defaultValue ( \\ pie\\ ) . build () val welcomeOverlords = FunSpec . builder ( welcomeOverlords ) . addParameter ( android ) . addParameter ( robot , String :: class ) . build () The code above generates: fun welcomeOverlords ( android : String = pie , robot : String ) { } The extended Builder form is necessary when the parameter has annotations (such as @Inject ).","title":"Parameters"},{"location":"#properties","text":"Like parameters, properties can be created either with builders or by using convenient helper methods: val android = PropertySpec . builder ( android , String :: class ) . addModifiers ( KModifier . PRIVATE ) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addProperty ( android ) . addProperty ( robot , String :: class , KModifier . PRIVATE ) . build () Which generates: class HelloWorld { private val android : String private val robot : String } The extended Builder form is necessary when a field has KDoc, annotations, or a field initializer. Field initializers use the same String.format() -like syntax as the code blocks above: val android = PropertySpec . builder ( android , String :: class ) . addModifiers ( KModifier . PRIVATE ) . initializer ( %S + %L , Oreo v. , 8.1 ) . build () Which generates: private val android : String = Oreo v. + 8.1 By default PropertySpec.Builder produces val properties. Use mutable() if you need a var : val android = PropertySpec . builder ( android , String :: class ) . mutable () . addModifiers ( KModifier . PRIVATE ) . initializer ( %S + %L , Oreo v. , 8.1 ) . build ()","title":"Properties"},{"location":"#inline-properties","text":"The way KotlinPoet models inline properties deserves special mention. The following snippet of code: val android = PropertySpec . builder ( android , String :: class ) . addModifiers ( KModifier . INLINE ) . build () will produce an error: java.lang.IllegalArgumentException: KotlinPoet doesn t allow setting the inline modifier on properties. You should mark either the getter, the setter, or both inline. Indeed, a property marked with inline should have at least one accessor which will be inlined by the compiler. Let s add a getter to this property: val android = PropertySpec . builder ( android , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( return %S , foo ) . build ()) . build () The result is the following: val android : kotlin . String inline get () = foo Now, what if we wanted to add a non-inline setter to the property above? We can do so without modifying any of the code we wrote previously: val android = PropertySpec . builder ( android , String :: class ) . getter ( FunSpec . getterBuilder () . addModifiers ( KModifier . INLINE ) . addStatement ( return %S , foo ) . build ()) . setter ( FunSpec . setterBuilder () . addParameter ( value , String :: class ) . build ()) . build () We get the expected result: val android : kotlin . String inline get () = foo set ( value ) { } Finally, if we go back and add KModifier.INLINE to the setter, KotlinPoet can wrap it nicely and produce the following result: inline val android : kotlin . String get () = foo set ( value ) { } Removing the modifier from either the getter or the setter will unwrap the expression back. If, on the other hand, KotlinPoet had allowed marking a property inline directly, the programmer would have had to manually add/remove the modifier whenever the state of the accessors changes in order to get correct and compilable output. We re solving this problem by making accessors the source of truth for the inline modifier.","title":"Inline properties"},{"location":"#interfaces","text":"KotlinPoet has no trouble with interfaces. Note that interface methods must always be ABSTRACT . The modifier is necessary when defining the interface: val helloWorld = TypeSpec . interfaceBuilder ( HelloWorld ) . addProperty ( buzz , String :: class ) . addFunction ( FunSpec . builder ( beep ) . addModifiers ( KModifier . ABSTRACT ) . build ()) . build () But these modifiers are omitted when the code is generated. These are the defaults so we don t need to include them for kotlinc s benefit! interface HelloWorld { val buzz : String fun beep () }","title":"Interfaces"},{"location":"#objects","text":"KotlinPoet supports objects: val helloWorld = TypeSpec . objectBuilder ( HelloWorld ) . addProperty ( PropertySpec . builder ( buzz , String :: class ) . initializer ( %S , buzz ) . build ()) . addFunction ( FunSpec . builder ( beep ) . addStatement ( println(%S) , Beep! ) . build ()) . build () Similarly, you can create companion objects and add them to classes using addType() : val companion = TypeSpec . companionObjectBuilder () . addProperty ( PropertySpec . builder ( buzz , String :: class ) . initializer ( %S , buzz ) . build ()) . addFunction ( FunSpec . builder ( beep ) . addStatement ( println(%S) , Beep! ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addType ( companion ) . build () You can provide an optional name for a companion object.","title":"Objects"},{"location":"#enums","text":"Use enumBuilder to create the enum type, and addEnumConstant() for each value: val helloWorld = TypeSpec . enumBuilder ( Roshambo ) . addEnumConstant ( ROCK ) . addEnumConstant ( SCISSORS ) . addEnumConstant ( PAPER ) . build () To generate this: enum class Roshambo { ROCK , SCISSORS , PAPER } Fancy enums are supported, where the enum values override methods or call a superclass constructor. Here s a comprehensive example: val helloWorld = TypeSpec . enumBuilder ( Roshambo ) . primaryConstructor ( FunSpec . constructorBuilder () . addParameter ( handsign , String :: class ) . build ()) . addEnumConstant ( ROCK , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( %S , fist ) . addFunction ( FunSpec . builder ( toString ) . addModifiers ( KModifier . OVERRIDE ) . addStatement ( return %S , avalanche! ) . returns ( String :: class ) . build ()) . build ()) . addEnumConstant ( SCISSORS , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( %S , peace ) . build ()) . addEnumConstant ( PAPER , TypeSpec . anonymousClassBuilder () . addSuperclassConstructorParameter ( %S , flat ) . build ()) . addProperty ( PropertySpec . builder ( handsign , String :: class , KModifier . PRIVATE ) . initializer ( handsign ) . build ()) . build () Which generates this: enum class Roshambo ( private val handsign : String ) { ROCK ( fist ) { override fun toString (): String = avalanche! }, SCISSORS ( peace ), PAPER ( flat ); }","title":"Enums"},{"location":"#anonymous-inner-classes","text":"In the enum code, we used TypeSpec.anonymousClassBuilder() . Anonymous inner classes can also be used in code blocks. They are values that can be referenced with %L : val comparator = TypeSpec . anonymousClassBuilder () . addSuperinterface ( Comparator :: class . parameterizedBy ( String :: class )) . addFunction ( FunSpec . builder ( compare ) . addModifiers ( KModifier . OVERRIDE ) . addParameter ( a , String :: class ) . addParameter ( b , String :: class ) . returns ( Int :: class ) . addStatement ( return %N.length - %N.length , a , b ) . build ()) . build () val helloWorld = TypeSpec . classBuilder ( HelloWorld ) . addFunction ( FunSpec . builder ( sortByLength ) . addParameter ( strings , List :: class . parameterizedBy ( String :: class )) . addStatement ( %N.sortedWith(%L) , strings , comparator ) . build ()) . build () This generates a method that contains a class that contains a method: class HelloWorld { fun sortByLength ( strings : List String ) { strings . sortedWith ( object : Comparator String { override fun compare ( a : String , b : String ): Int = a . length - b . length }) } } One particularly tricky part of defining anonymous inner classes is the arguments to the superclass constructor. To pass them use TypeSpec.Builder s addSuperclassConstructorParameter() method.","title":"Anonymous Inner Classes"},{"location":"#annotations","text":"Simple annotations are easy: val test = FunSpec . builder ( test string equality ) . addAnnotation ( Test :: class ) . addStatement ( assertThat(%1S).isEqualTo(%1S) , foo ) . build () Which generates this function with an @Test annotation: @Test fun `test string equality` () { assertThat ( foo ). isEqualTo ( foo ) } Use AnnotationSpec.builder() to set properties on annotations: val logRecord = FunSpec . builder ( recordEvent ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( Headers :: class ) . addMember ( accept = %S , application/json; charset=utf-8 ) . addMember ( userAgent = %S , Square Cash ) . build ()) . addParameter ( logRecord , LogRecord :: class ) . returns ( LogReceipt :: class ) . build () Which generates this annotation with accept and userAgent properties: @Headers ( accept = application/json; charset=utf-8 , userAgent = Square Cash ) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt When you get fancy, annotation values can be annotations themselves. Use %L for embedded annotations: val headerList = ClassName ( , HeaderList ) val header = ClassName ( , Header ) val logRecord = FunSpec . builder ( recordEvent ) . addModifiers ( KModifier . ABSTRACT ) . addAnnotation ( AnnotationSpec . builder ( headerList ) . addMember ( [\\n\u21e5%L,\\n%L\u21e4\\n] , AnnotationSpec . builder ( header ) . addMember ( name = %S , Accept ) . addMember ( value = %S , application/json; charset=utf-8 ) . build (), AnnotationSpec . builder ( header ) . addMember ( name = %S , User-Agent ) . addMember ( value = %S , Square Cash ) . build ()) . build ()) . addParameter ( logRecord , logRecordName ) . returns ( logReceipt ) . build () Which generates this: @HeaderList ([ Header ( name = Accept , value = application/json; charset=utf-8 ), Header ( name = User-Agent , value = Square Cash ) ]) abstract fun recordEvent ( logRecord : LogRecord ): LogReceipt KotlinPoet supports use-site targets for annotations: val utils = FileSpec . builder ( com.example , Utils ) . addAnnotation ( AnnotationSpec . builder ( JvmName :: class ) . useSiteTarget ( UseSiteTarget . FILE ) . build ()) . addFunction ( FunSpec . builder ( abs ) . receiver ( Int :: class ) . returns ( Int :: class ) . addStatement ( return if (this 0) -this else this ) . build ()) . build () Will output this: @file : JvmName package com.example import kotlin.Int import kotlin.jvm.JvmName fun Int . abs (): Int = if ( this 0 ) - this else this","title":"Annotations"},{"location":"#type-aliases","text":"KotlinPoet provides API for creating Type Aliases, which supports simple class names, parameterized types and lambdas: val fileTable = Map :: class . asClassName () . parameterizedBy ( TypeVariableName ( K ), Set :: class . parameterizedBy ( File :: class )) val predicate = LambdaTypeName . get ( parameters = * arrayOf ( TypeVariableName ( T )), returnType = Boolean :: class . asClassName ()) val helloWorld = FileSpec . builder ( com.example , HelloWorld ) . addTypeAlias ( TypeAliasSpec . builder ( Word , String :: class ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( FileTable K , fileTable ). build ()) . addTypeAlias ( TypeAliasSpec . builder ( Predicate T , predicate ). build ()) . build () Which generates the following: package com.example import java.io.File import kotlin.Boolean import kotlin.String import kotlin.collections.Map import kotlin.collections.Set typealias Word = String typealias FileTable K = Map K , Set File typealias Predicate T = ( T ) - Boolean","title":"Type Aliases"},{"location":"#callable-references","text":"Callable references to constructors, functions, and properties may be emitted via: ClassName.constructorReference() for constructors MemberName.reference() for functions and properties For example, val helloClass = ClassName ( com.example.hello , Hello ) val worldFunction : MemberName = helloClass . member ( world ) val byeProperty : MemberName = helloClass . nestedClass ( World ). member ( bye ) val factoriesFun = FunSpec . builder ( factories ) . addStatement ( val hello = %L , helloClass . constructorReference ()) . addStatement ( val world = %L , worldFunction . reference ()) . addStatement ( val bye = %L , byeProperty . reference ()) . build () FileSpec . builder ( com.example , HelloWorld ) . addFunction ( factoriesFun ) . build () would generate: package com.example import com.example.hello.Hello fun factories () { val hello = :: Hello val world = Hello :: world val bye = Hello . World :: bye } Top-level classes and members with conflicting names may require aliased imports, as with member names .","title":"Callable References"},{"location":"#download","text":"Download the latest .jar or depend via Maven: dependency groupId com.squareup /groupId artifactId kotlinpoet /artifactId version 1.3.0 /version /dependency or Gradle: compile com.squareup:kotlinpoet:1.3.0 Snapshots of the development version are available in Sonatype s snapshots repository .","title":"Download"},{"location":"#license","text":"Copyright 2017 Square, Inc. Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log Version 1.3.0 2019-05-30 New: Don t inline annotations in the primary constructor. New: Force new lines when emitting primary constructors. New: Support using MemberNames as arguments to %N. New: Add more ClassName constants: ClassName.STRING, ClassName.LIST, etc. New: Add ClassName.constructorReference() and MemberName.reference(). New: Make %N accept MemberNames. New: Escape spaces in import aliases. New: Escape spaces in ClassNames. New: Escape spaces in MemberNames. New: Escape imports containing spaces. New: Escape package name containing spaces. New: Use 2-space indents. New: Only indent one level on annotation values. Fix: Pass only unique originating elements to Filer. Fix: Fix bug with MemberNames in same package nested inside a class. Version 1.2.0 2019-03-28 New: Add writeTo(Filer) and originating element API. New: Make *Spec types taggable. New: Make FunSpec.Builder#addCode take vararg Any?. Fix: Import members from default package. Fix: Add non-wrapping spaces in control flow creation methods. Fix: Named value argument being omitted in annotation array types. Version 1.1.0 2019-02-28 New: Kotlin 1.3.21. New: Support referencing members using %M and MemberName type. New: Add extensions for getting a MemberName from a ClassName , KClass and Class . New: Allow passing CodeBlock s as arguments to %P . New: Allow interface delegation for objects. Fix: Don t emit visible whitespace in toString() . Fix: Prevent line wrapping in weird places inside function signature. Fix: No line wrapping between val and property name. Fix: Allow passing line prefix into LineWrapper to enable proper line wrapping in KDoc. Fix: Add newline for TypeSpec Kdoc with no tags. Fix: Add newline for remaining Specs. Fix: Fix kdoc formatting for property getter/setters. Fix: Don t wrap single line comments inside FunSpec . Fix: Add non-wrapping package name. Fix: Remove n^2 algorithm in CodeWriter.resolve() by precomputing all of the nested simple names of a TypeSpec . Fix: Fix edge case with empty enum classes. Fix: Fix Nullable Type Parameter handling in KType.asTypeName() . Fix: Fix incorrect long comment wrapping in FileSpec . Fix: Attach primary constructor param/property KDoc to the element vs emitting it inside the type header. Version 1.0.1 2019-01-02 New: Allow enums without constants. New: Improved formatting of TypeSpec KDoc. New: Support @property and @param KDoc tags in TypeSpec. Fix: Use pre-formatted strings for arguments to %P. Version 1.0.0 2018-12-10 New: Kotlin 1.3.11. Fix: Prevent wrapping in import statements. Version 1.0.0-RC3 2018-11-28 New: Kotlin 1.3.10. New: Add %P placeholder for string templates. New: Add support for receiver kdoc. New: Avoid emitting Unit as return type. New: Add support for empty setters. New: Add checks for inline classes. New: Escape property and variable names if keywords. New: Replace % , % , %[ , %] placeholders with \u21e5 , \u21e4 , \u00ab , \u00bb . New: Replace %W with space, and add \u00b7 as a non-breaking space. New: Change TypeName to sealed class. New: Documentation improvements. New: Replace TypeName modifier methods with copy() . New: Rename members of WildcardTypeName to match with the producer/consumer generics model. New: Rename TypeName.nullable into TypeName.isNullable . New: Rename LambdaTypeName.suspending into LambdaTypeName.isSuspending . New: Rename TypeVariableName.reified into TypeVariableName.isReified . Fix: Emit star-projection only for types with Any? upper bound. Fix: Fold property with escaped name. Version 1.0.0-RC2 2018-10-22 New: Kotlin 1.2.71. New: README improvements. New: Allow opening braces and params in beginControlFlow() . New: Add KDoc to ParameterSpec , collapse into parent KDoc. New: Support TypeVariable s in PropertySpec . New: Add parens for annotated types in LambdaTypeName . New: Improve error messaging and documentation for inline properties. New: Allow sealed classes to declare abstract properties. New: Added buildCodeBlock() helper function. New: Allow using CodeBlock s with statements as property initializers and default parameter values. New: Rename NameAllocator.clone() into `NameAllocator.copy(). New: Rename TypeName.asNonNullable() to TypeName.asNonNull() . New: Remove PropertySpec.varBuilder() (use mutable() instead). New: Allow importing top-level members in default package. New: Add overloads to add KDoc to return type. Fix: Distinguishing IntArray and Array Int when creating TypeName . Fix: Use TypeName instead of ClassName as parameter type of plusParameter() . Fix: Keep type-parameter variance when constructing TypeName from KType . Fix: Don t validate modifiers when merging properties with primary constructor parameters. Fix: Escape $ characters in formatted strings. Fix: FileSpec.Builder blank package and subfolder fix. Fix: Append new line at end of parameter KDoc. Fix: Add parameter KDoc in toBuilder() . Version 1.0.0-RC1 2018-07-16 New: Escape keywords in imports and canonical class names. New: Improve external support. New: Extensions for KType and KTypeParameter . New: Add builder methods to simplify adding common kotlin.jvm annotations. New: Enums are able to have companion objects. New: Add missing primaryConstructor companionObject to TypeSpec#toBuilder() . New: Make subtype checking vals inside Kind public. New: Escape (class/property/function/variable) names automatically if they contain space, hyphen, or other symbols. New: Improve ParameterizedTypeName API. New: Add WildcardTypeName.STAR constant. New: Expose mutable builder properties and move their validations to build-time. Fix: Use regular indents for parameter lists. Fix: Inline annotations on properties defined in primary constructor. Fix: Use Any? as the default type variable bounds. Fix: Fix importing annotated TypeName . Fix: If any primary constructor property has KDoc, put properties on new lines. Fix: Properly emit where block in type signature. Fix: Avoid type name collisions in primary constructor. Fix: Remove implicit TypeVariable bound when more bounds are added. Fix: Combine annotations and modifiers from constructor params and properties. Fix: Replace delegate constructor args along with the constructor. Version 0.7.0 2018-02-16 New: Increase indent to 4 spaces. New: Delegate super interfaces as constructor parameters. New: Support PropertySpec s as CodeBlock literals. New: Support KDoc for TypeAliasSpec . New: Allow for adding an initializer block inside a companion object. New: Escape name in ParameterSpec which is also a keyword. New: Escape names in statements. New: Set com.squareup.kotlinpoet as automatic module name. New: Support suspending lambda types. New: Support named LambdaTypeName parameters. New: Support dynamic type. New: Disallow wildcard imports. New: Depend on Kotlin 1.2.21. Fix: Correct handling of super-classes/interfaces on anonymous classes. Fix: Fix boundary filtering to Any? . Fix: Wrap long property initializers. Fix: Fix formatting and indentation of parameter lists. Version 0.6.0 2017-11-03 New: Support lambda extensions. New: Support renames in imports like import bar.Bar as bBar . New: Support extension and inline properties. New: Support reified types. New: Expose enclosed types inside LambdaTypeName . New: Depend on Kotlin Kotlin 1.1.51. New: Improved API and formatting of annotations. New: Improved multiplatform support. Fix: Escape function and package names if they are a Kotlin keyword. Fix: Properly format WildcardTypeName s class declaration. Version 0.5.0 2017-09-13 New: Rename addFun() to addFunction() . New: Rename KotlinFile to FileSpec . New: Rename KotlinFile.addFileAnnotation() to addAnnotation() . New: Rename KotlinFile.addFileComment() to addComment() . New: Support cross-platform code, including HEADER and IMPL modifiers. New: Support type variables for type aliases. New: Support constructor delegation. New: Support named companion objects. New: Depend on Kotlin 1.1.4-3. Fix: Format one parameter per line when there are more than two parameters. Fix: Don t emit braces when the constructor body is empty. Fix: Do not invoke superclass constructor when no primary constructor. Fix: Enforce the right modifiers on functions. Version 0.4.0 2017-08-08 New: Change KotlinPoet s extensions like asClassName() to be top-level functions. New: Add declaration-site variance support. New: Improve handling of single expression bodies. New: Support file annotations. New: Support imports from the top-level file. New: Accept superclass constructor parameters. New: Support primary constructors using the constructor keyword. Fix: Don t emit setter parameter types. Fix: Support Kotlin keywords in NameAllocator . Fix: Emit the right default parameters for primary constructors. Fix: Format annotations properly when used as parameters. Fix: Recognize imports when emitting nullable types. Fix: Call through to the superclass constructor when superclass has a no-args constructor. Fix: Omit class braces if all properties are declared in primary constructor. Fix: Don t emit empty class bodies. Fix: Emit the right syntax for declaring multiple generic type constraints. Fix: Support properties on objects, companions and interfaces. Fix: Use AnnotationSpec for throws. Version 0.3.0 2017-06-11 New: Objects and companion objects. New: TypeAliasSpec to create type aliases. New: LambdaTypeName to create lambda types. New: Collapse property declarations into constructor params. New: Extension and invoke functions for creating type names: Runnable::class.asClassName() . New: Basic support for expression bodies. New: Basic support for custom accessors. New: Remove Filer writing and originating elements concept. These stem from javac annotation processors. Fix: Generate valid annotation classes. Fix: Use KModifier for varargs. Fix: Use ParameterizedTypeName for array types. Fix: Extract Kotlin name from KClass instead of Java name. Fix: Emit valid class literals: Double::class instead of Double.class . Fix: Emit modifiers in the expected order. Fix: Emit the correct syntax for enum classes and overridden members. Version 0.2.0 2017-05-21 New: Flip API signatures to be (name, type) instead of (type, name). New: Support for nullable types. New: Support delegated properties. New: Extension functions. New: Support top-level properties. Fix: Inheritance should use : instead of extends and implements . Fix: Make initializerBlock emit init {} . Version 0.1.0 2017-05-16 Initial public release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-130","text":"2019-05-30 New: Don t inline annotations in the primary constructor. New: Force new lines when emitting primary constructors. New: Support using MemberNames as arguments to %N. New: Add more ClassName constants: ClassName.STRING, ClassName.LIST, etc. New: Add ClassName.constructorReference() and MemberName.reference(). New: Make %N accept MemberNames. New: Escape spaces in import aliases. New: Escape spaces in ClassNames. New: Escape spaces in MemberNames. New: Escape imports containing spaces. New: Escape package name containing spaces. New: Use 2-space indents. New: Only indent one level on annotation values. Fix: Pass only unique originating elements to Filer. Fix: Fix bug with MemberNames in same package nested inside a class.","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2019-03-28 New: Add writeTo(Filer) and originating element API. New: Make *Spec types taggable. New: Make FunSpec.Builder#addCode take vararg Any?. Fix: Import members from default package. Fix: Add non-wrapping spaces in control flow creation methods. Fix: Named value argument being omitted in annotation array types.","title":"Version 1.2.0"},{"location":"changelog/#version-110","text":"2019-02-28 New: Kotlin 1.3.21. New: Support referencing members using %M and MemberName type. New: Add extensions for getting a MemberName from a ClassName , KClass and Class . New: Allow passing CodeBlock s as arguments to %P . New: Allow interface delegation for objects. Fix: Don t emit visible whitespace in toString() . Fix: Prevent line wrapping in weird places inside function signature. Fix: No line wrapping between val and property name. Fix: Allow passing line prefix into LineWrapper to enable proper line wrapping in KDoc. Fix: Add newline for TypeSpec Kdoc with no tags. Fix: Add newline for remaining Specs. Fix: Fix kdoc formatting for property getter/setters. Fix: Don t wrap single line comments inside FunSpec . Fix: Add non-wrapping package name. Fix: Remove n^2 algorithm in CodeWriter.resolve() by precomputing all of the nested simple names of a TypeSpec . Fix: Fix edge case with empty enum classes. Fix: Fix Nullable Type Parameter handling in KType.asTypeName() . Fix: Fix incorrect long comment wrapping in FileSpec . Fix: Attach primary constructor param/property KDoc to the element vs emitting it inside the type header.","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2019-01-02 New: Allow enums without constants. New: Improved formatting of TypeSpec KDoc. New: Support @property and @param KDoc tags in TypeSpec. Fix: Use pre-formatted strings for arguments to %P.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2018-12-10 New: Kotlin 1.3.11. Fix: Prevent wrapping in import statements.","title":"Version 1.0.0"},{"location":"changelog/#version-100-rc3","text":"2018-11-28 New: Kotlin 1.3.10. New: Add %P placeholder for string templates. New: Add support for receiver kdoc. New: Avoid emitting Unit as return type. New: Add support for empty setters. New: Add checks for inline classes. New: Escape property and variable names if keywords. New: Replace % , % , %[ , %] placeholders with \u21e5 , \u21e4 , \u00ab , \u00bb . New: Replace %W with space, and add \u00b7 as a non-breaking space. New: Change TypeName to sealed class. New: Documentation improvements. New: Replace TypeName modifier methods with copy() . New: Rename members of WildcardTypeName to match with the producer/consumer generics model. New: Rename TypeName.nullable into TypeName.isNullable . New: Rename LambdaTypeName.suspending into LambdaTypeName.isSuspending . New: Rename TypeVariableName.reified into TypeVariableName.isReified . Fix: Emit star-projection only for types with Any? upper bound. Fix: Fold property with escaped name.","title":"Version 1.0.0-RC3"},{"location":"changelog/#version-100-rc2","text":"2018-10-22 New: Kotlin 1.2.71. New: README improvements. New: Allow opening braces and params in beginControlFlow() . New: Add KDoc to ParameterSpec , collapse into parent KDoc. New: Support TypeVariable s in PropertySpec . New: Add parens for annotated types in LambdaTypeName . New: Improve error messaging and documentation for inline properties. New: Allow sealed classes to declare abstract properties. New: Added buildCodeBlock() helper function. New: Allow using CodeBlock s with statements as property initializers and default parameter values. New: Rename NameAllocator.clone() into `NameAllocator.copy(). New: Rename TypeName.asNonNullable() to TypeName.asNonNull() . New: Remove PropertySpec.varBuilder() (use mutable() instead). New: Allow importing top-level members in default package. New: Add overloads to add KDoc to return type. Fix: Distinguishing IntArray and Array Int when creating TypeName . Fix: Use TypeName instead of ClassName as parameter type of plusParameter() . Fix: Keep type-parameter variance when constructing TypeName from KType . Fix: Don t validate modifiers when merging properties with primary constructor parameters. Fix: Escape $ characters in formatted strings. Fix: FileSpec.Builder blank package and subfolder fix. Fix: Append new line at end of parameter KDoc. Fix: Add parameter KDoc in toBuilder() .","title":"Version 1.0.0-RC2"},{"location":"changelog/#version-100-rc1","text":"2018-07-16 New: Escape keywords in imports and canonical class names. New: Improve external support. New: Extensions for KType and KTypeParameter . New: Add builder methods to simplify adding common kotlin.jvm annotations. New: Enums are able to have companion objects. New: Add missing primaryConstructor companionObject to TypeSpec#toBuilder() . New: Make subtype checking vals inside Kind public. New: Escape (class/property/function/variable) names automatically if they contain space, hyphen, or other symbols. New: Improve ParameterizedTypeName API. New: Add WildcardTypeName.STAR constant. New: Expose mutable builder properties and move their validations to build-time. Fix: Use regular indents for parameter lists. Fix: Inline annotations on properties defined in primary constructor. Fix: Use Any? as the default type variable bounds. Fix: Fix importing annotated TypeName . Fix: If any primary constructor property has KDoc, put properties on new lines. Fix: Properly emit where block in type signature. Fix: Avoid type name collisions in primary constructor. Fix: Remove implicit TypeVariable bound when more bounds are added. Fix: Combine annotations and modifiers from constructor params and properties. Fix: Replace delegate constructor args along with the constructor.","title":"Version 1.0.0-RC1"},{"location":"changelog/#version-070","text":"2018-02-16 New: Increase indent to 4 spaces. New: Delegate super interfaces as constructor parameters. New: Support PropertySpec s as CodeBlock literals. New: Support KDoc for TypeAliasSpec . New: Allow for adding an initializer block inside a companion object. New: Escape name in ParameterSpec which is also a keyword. New: Escape names in statements. New: Set com.squareup.kotlinpoet as automatic module name. New: Support suspending lambda types. New: Support named LambdaTypeName parameters. New: Support dynamic type. New: Disallow wildcard imports. New: Depend on Kotlin 1.2.21. Fix: Correct handling of super-classes/interfaces on anonymous classes. Fix: Fix boundary filtering to Any? . Fix: Wrap long property initializers. Fix: Fix formatting and indentation of parameter lists.","title":"Version 0.7.0"},{"location":"changelog/#version-060","text":"2017-11-03 New: Support lambda extensions. New: Support renames in imports like import bar.Bar as bBar . New: Support extension and inline properties. New: Support reified types. New: Expose enclosed types inside LambdaTypeName . New: Depend on Kotlin Kotlin 1.1.51. New: Improved API and formatting of annotations. New: Improved multiplatform support. Fix: Escape function and package names if they are a Kotlin keyword. Fix: Properly format WildcardTypeName s class declaration.","title":"Version 0.6.0"},{"location":"changelog/#version-050","text":"2017-09-13 New: Rename addFun() to addFunction() . New: Rename KotlinFile to FileSpec . New: Rename KotlinFile.addFileAnnotation() to addAnnotation() . New: Rename KotlinFile.addFileComment() to addComment() . New: Support cross-platform code, including HEADER and IMPL modifiers. New: Support type variables for type aliases. New: Support constructor delegation. New: Support named companion objects. New: Depend on Kotlin 1.1.4-3. Fix: Format one parameter per line when there are more than two parameters. Fix: Don t emit braces when the constructor body is empty. Fix: Do not invoke superclass constructor when no primary constructor. Fix: Enforce the right modifiers on functions.","title":"Version 0.5.0"},{"location":"changelog/#version-040","text":"2017-08-08 New: Change KotlinPoet s extensions like asClassName() to be top-level functions. New: Add declaration-site variance support. New: Improve handling of single expression bodies. New: Support file annotations. New: Support imports from the top-level file. New: Accept superclass constructor parameters. New: Support primary constructors using the constructor keyword. Fix: Don t emit setter parameter types. Fix: Support Kotlin keywords in NameAllocator . Fix: Emit the right default parameters for primary constructors. Fix: Format annotations properly when used as parameters. Fix: Recognize imports when emitting nullable types. Fix: Call through to the superclass constructor when superclass has a no-args constructor. Fix: Omit class braces if all properties are declared in primary constructor. Fix: Don t emit empty class bodies. Fix: Emit the right syntax for declaring multiple generic type constraints. Fix: Support properties on objects, companions and interfaces. Fix: Use AnnotationSpec for throws.","title":"Version 0.4.0"},{"location":"changelog/#version-030","text":"2017-06-11 New: Objects and companion objects. New: TypeAliasSpec to create type aliases. New: LambdaTypeName to create lambda types. New: Collapse property declarations into constructor params. New: Extension and invoke functions for creating type names: Runnable::class.asClassName() . New: Basic support for expression bodies. New: Basic support for custom accessors. New: Remove Filer writing and originating elements concept. These stem from javac annotation processors. Fix: Generate valid annotation classes. Fix: Use KModifier for varargs. Fix: Use ParameterizedTypeName for array types. Fix: Extract Kotlin name from KClass instead of Java name. Fix: Emit valid class literals: Double::class instead of Double.class . Fix: Emit modifiers in the expected order. Fix: Emit the correct syntax for enum classes and overridden members.","title":"Version 0.3.0"},{"location":"changelog/#version-020","text":"2017-05-21 New: Flip API signatures to be (name, type) instead of (type, name). New: Support for nullable types. New: Support delegated properties. New: Extension functions. New: Support top-level properties. Fix: Inheritance should use : instead of extends and implements . Fix: Make initializerBlock emit init {} .","title":"Version 0.2.0"},{"location":"changelog/#version-010","text":"2017-05-16 Initial public release.","title":"Version 0.1.0"},{"location":"contributing/","text":"Contributing If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"1.x/kotlinpoet/","text":"kotlinpoet Packages Name Summary com.squareup.kotlinpoet com.squareup.kotlinpoet.jvm Index All Types","title":"Home"},{"location":"1.x/kotlinpoet/#packages","text":"Name Summary com.squareup.kotlinpoet com.squareup.kotlinpoet.jvm","title":"Packages"},{"location":"1.x/kotlinpoet/#index","text":"All Types","title":"Index"},{"location":"1.x/kotlinpoet/alltypes/","text":"All Types Name Summary com.squareup.kotlinpoet.AnnotationSpec A generated annotation on a declaration. java.lang.Class (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.ClassName A fully-qualified class name for top-level and member classes. com.squareup.kotlinpoet.CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! kotlin.collections.Collection (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.Dynamic com.squareup.kotlinpoet.FileSpec A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. com.squareup.kotlinpoet.FunSpec A generated function declaration. kotlin.reflect.KClass (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.KModifier kotlin.reflect.KType (extensions in package com.squareup.kotlinpoet) kotlin.reflect.KTypeParameter (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.LambdaTypeName com.squareup.kotlinpoet.MemberName Represents the name of a member (such as a function or a property). com.squareup.kotlinpoet.NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: com.squareup.kotlinpoet.OriginatingElementsHolder A type that can have originating elements . java.lang.reflect.ParameterizedType (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.ParameterizedTypeName com.squareup.kotlinpoet.ParameterSpec A generated parameter declaration. com.squareup.kotlinpoet.PropertySpec A generated property declaration. com.squareup.kotlinpoet.Taggable A type that can be tagged with extra metadata of the user s choice. java.lang.reflect.Type (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeAliasSpec A generated typealias declaration javax.lang.model.element.TypeElement (extensions in package com.squareup.kotlinpoet) javax.lang.model.type.TypeMirror (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeName Any type in Kotlin s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array String and Set String , and unassignable types like Unit . javax.lang.model.element.TypeParameterElement (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeSpec A generated class, interface, or enum declaration. javax.lang.model.type.TypeVariable (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeVariableName javax.lang.model.type.WildcardType (extensions in package com.squareup.kotlinpoet) java.lang.reflect.WildcardType (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.WildcardTypeName","title":"Home"},{"location":"1.x/kotlinpoet/alltypes/#all-types","text":"Name Summary com.squareup.kotlinpoet.AnnotationSpec A generated annotation on a declaration. java.lang.Class (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.ClassName A fully-qualified class name for top-level and member classes. com.squareup.kotlinpoet.CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! kotlin.collections.Collection (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.Dynamic com.squareup.kotlinpoet.FileSpec A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. com.squareup.kotlinpoet.FunSpec A generated function declaration. kotlin.reflect.KClass (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.KModifier kotlin.reflect.KType (extensions in package com.squareup.kotlinpoet) kotlin.reflect.KTypeParameter (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.LambdaTypeName com.squareup.kotlinpoet.MemberName Represents the name of a member (such as a function or a property). com.squareup.kotlinpoet.NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: com.squareup.kotlinpoet.OriginatingElementsHolder A type that can have originating elements . java.lang.reflect.ParameterizedType (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.ParameterizedTypeName com.squareup.kotlinpoet.ParameterSpec A generated parameter declaration. com.squareup.kotlinpoet.PropertySpec A generated property declaration. com.squareup.kotlinpoet.Taggable A type that can be tagged with extra metadata of the user s choice. java.lang.reflect.Type (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeAliasSpec A generated typealias declaration javax.lang.model.element.TypeElement (extensions in package com.squareup.kotlinpoet) javax.lang.model.type.TypeMirror (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeName Any type in Kotlin s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array String and Set String , and unassignable types like Unit . javax.lang.model.element.TypeParameterElement (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeSpec A generated class, interface, or enum declaration. javax.lang.model.type.TypeVariable (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.TypeVariableName javax.lang.model.type.WildcardType (extensions in package com.squareup.kotlinpoet) java.lang.reflect.WildcardType (extensions in package com.squareup.kotlinpoet) com.squareup.kotlinpoet.WildcardTypeName","title":"All Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/","text":"kotlinpoet / com.squareup.kotlinpoet Package com.squareup.kotlinpoet Types Name Summary AnnotationSpec class AnnotationSpec : Taggable A generated annotation on a declaration. ClassName class ClassName : TypeName , Comparable ClassName A fully-qualified class name for top-level and member classes. CodeBlock class CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! Dynamic object Dynamic : TypeName FileSpec class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. KModifier enum class KModifier LambdaTypeName class LambdaTypeName : TypeName MemberName data class MemberName Represents the name of a member (such as a function or a property). NameAllocator class NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: OriginatingElementsHolder interface OriginatingElementsHolder A type that can have originating elements . ParameterizedTypeName class ParameterizedTypeName : TypeName ParameterSpec class ParameterSpec : Taggable A generated parameter declaration. PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. Taggable interface Taggable A type that can be tagged with extra metadata of the user s choice. TypeAliasSpec class TypeAliasSpec : Taggable A generated typealias declaration TypeName sealed class TypeName Any type in Kotlin s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array String and Set String , and unassignable types like Unit . TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration. TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName Extensions for External Classes Name Summary java.lang.Class java.lang.reflect.ParameterizedType java.lang.reflect.Type java.lang.reflect.WildcardType javax.lang.model.element.TypeElement javax.lang.model.element.TypeParameterElement javax.lang.model.type.TypeMirror javax.lang.model.type.TypeVariable javax.lang.model.type.WildcardType kotlin.collections.Collection kotlin.reflect.KClass kotlin.reflect.KType kotlin.reflect.KTypeParameter Properties Name Summary ANNOTATION val ANNOTATION: ClassName ANY val ANY: ClassName ARRAY val ARRAY: ClassName BOOLEAN val BOOLEAN: ClassName BOOLEAN_ARRAY val BOOLEAN_ARRAY: ClassName BYTE val BYTE: ClassName BYTE_ARRAY val BYTE_ARRAY: ClassName CHAR val CHAR: ClassName CHAR_ARRAY val CHAR_ARRAY: ClassName CHAR_SEQUENCE val CHAR_SEQUENCE: ClassName COLLECTION val COLLECTION: ClassName COMPARABLE val COMPARABLE: ClassName DOUBLE val DOUBLE: ClassName DOUBLE_ARRAY val DOUBLE_ARRAY: ClassName DYNAMIC val DYNAMIC: Dynamic Dynamic is a singleton object type, so this is a shorthand for it in Java. ENUM val ENUM: ClassName FLOAT val FLOAT: ClassName FLOAT_ARRAY val FLOAT_ARRAY: ClassName INT val INT: ClassName INT_ARRAY val INT_ARRAY: ClassName ITERABLE val ITERABLE: ClassName LIST val LIST: ClassName LONG val LONG: ClassName LONG_ARRAY val LONG_ARRAY: ClassName MAP val MAP: ClassName MAP_ENTRY val MAP_ENTRY: ClassName MUTABLE_COLLECTION val MUTABLE_COLLECTION: ClassName MUTABLE_ITERABLE val MUTABLE_ITERABLE: ClassName MUTABLE_LIST val MUTABLE_LIST: ClassName MUTABLE_MAP val MUTABLE_MAP: ClassName MUTABLE_MAP_ENTRY val MUTABLE_MAP_ENTRY: ClassName MUTABLE_SET val MUTABLE_SET: ClassName NOTHING val NOTHING: ClassName NUMBER val NUMBER: ClassName SET val SET: ClassName SHORT val SHORT: ClassName SHORT_ARRAY val SHORT_ARRAY: ClassName STAR val STAR: WildcardTypeName The wildcard type * which is shorthand for out Any? . STRING val STRING: ClassName THROWABLE val THROWABLE: ClassName U_BYTE val U_BYTE: ClassName U_BYTE_ARRAY val U_BYTE_ARRAY: ClassName U_INT val U_INT: ClassName U_INT_ARRAY val U_INT_ARRAY: ClassName U_LONG val U_LONG: ClassName U_LONG_ARRAY val U_LONG_ARRAY: ClassName U_SHORT val U_SHORT: ClassName U_SHORT_ARRAY val U_SHORT_ARRAY: ClassName UNIT val UNIT: ClassName Functions Name Summary buildCodeBlock fun buildCodeBlock(builderAction: CodeBlock.Builder .() - Unit ): CodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock . tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key. fun T : Any AnnotationSpec.Builder .tag(tag: T ?): AnnotationSpec.Builder fun T : Any FileSpec.Builder .tag(tag: T ?): FileSpec.Builder fun T : Any FunSpec.Builder .tag(tag: T ?): FunSpec.Builder fun T : Any ParameterSpec.Builder .tag(tag: T ?): ParameterSpec.Builder fun T : Any PropertySpec.Builder .tag(tag: T ?): PropertySpec.Builder fun T : Any TypeAliasSpec.Builder .tag(tag: T ?): TypeAliasSpec.Builder fun T : Any TypeSpec.Builder .tag(tag: T ?): TypeSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"API"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#package-comsquareupkotlinpoet","text":"","title":"Package com.squareup.kotlinpoet"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#types","text":"Name Summary AnnotationSpec class AnnotationSpec : Taggable A generated annotation on a declaration. ClassName class ClassName : TypeName , Comparable ClassName A fully-qualified class name for top-level and member classes. CodeBlock class CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! Dynamic object Dynamic : TypeName FileSpec class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. KModifier enum class KModifier LambdaTypeName class LambdaTypeName : TypeName MemberName data class MemberName Represents the name of a member (such as a function or a property). NameAllocator class NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: OriginatingElementsHolder interface OriginatingElementsHolder A type that can have originating elements . ParameterizedTypeName class ParameterizedTypeName : TypeName ParameterSpec class ParameterSpec : Taggable A generated parameter declaration. PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. Taggable interface Taggable A type that can be tagged with extra metadata of the user s choice. TypeAliasSpec class TypeAliasSpec : Taggable A generated typealias declaration TypeName sealed class TypeName Any type in Kotlin s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array String and Set String , and unassignable types like Unit . TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration. TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#extensions-for-external-classes","text":"Name Summary java.lang.Class java.lang.reflect.ParameterizedType java.lang.reflect.Type java.lang.reflect.WildcardType javax.lang.model.element.TypeElement javax.lang.model.element.TypeParameterElement javax.lang.model.type.TypeMirror javax.lang.model.type.TypeVariable javax.lang.model.type.WildcardType kotlin.collections.Collection kotlin.reflect.KClass kotlin.reflect.KType kotlin.reflect.KTypeParameter","title":"Extensions for External Classes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#properties","text":"Name Summary ANNOTATION val ANNOTATION: ClassName ANY val ANY: ClassName ARRAY val ARRAY: ClassName BOOLEAN val BOOLEAN: ClassName BOOLEAN_ARRAY val BOOLEAN_ARRAY: ClassName BYTE val BYTE: ClassName BYTE_ARRAY val BYTE_ARRAY: ClassName CHAR val CHAR: ClassName CHAR_ARRAY val CHAR_ARRAY: ClassName CHAR_SEQUENCE val CHAR_SEQUENCE: ClassName COLLECTION val COLLECTION: ClassName COMPARABLE val COMPARABLE: ClassName DOUBLE val DOUBLE: ClassName DOUBLE_ARRAY val DOUBLE_ARRAY: ClassName DYNAMIC val DYNAMIC: Dynamic Dynamic is a singleton object type, so this is a shorthand for it in Java. ENUM val ENUM: ClassName FLOAT val FLOAT: ClassName FLOAT_ARRAY val FLOAT_ARRAY: ClassName INT val INT: ClassName INT_ARRAY val INT_ARRAY: ClassName ITERABLE val ITERABLE: ClassName LIST val LIST: ClassName LONG val LONG: ClassName LONG_ARRAY val LONG_ARRAY: ClassName MAP val MAP: ClassName MAP_ENTRY val MAP_ENTRY: ClassName MUTABLE_COLLECTION val MUTABLE_COLLECTION: ClassName MUTABLE_ITERABLE val MUTABLE_ITERABLE: ClassName MUTABLE_LIST val MUTABLE_LIST: ClassName MUTABLE_MAP val MUTABLE_MAP: ClassName MUTABLE_MAP_ENTRY val MUTABLE_MAP_ENTRY: ClassName MUTABLE_SET val MUTABLE_SET: ClassName NOTHING val NOTHING: ClassName NUMBER val NUMBER: ClassName SET val SET: ClassName SHORT val SHORT: ClassName SHORT_ARRAY val SHORT_ARRAY: ClassName STAR val STAR: WildcardTypeName The wildcard type * which is shorthand for out Any? . STRING val STRING: ClassName THROWABLE val THROWABLE: ClassName U_BYTE val U_BYTE: ClassName U_BYTE_ARRAY val U_BYTE_ARRAY: ClassName U_INT val U_INT: ClassName U_INT_ARRAY val U_INT_ARRAY: ClassName U_LONG val U_LONG: ClassName U_LONG_ARRAY val U_LONG_ARRAY: ClassName U_SHORT val U_SHORT: ClassName U_SHORT_ARRAY val U_SHORT_ARRAY: ClassName UNIT val UNIT: ClassName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/#functions","text":"Name Summary buildCodeBlock fun buildCodeBlock(builderAction: CodeBlock.Builder .() - Unit ): CodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock . tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key. fun T : Any AnnotationSpec.Builder .tag(tag: T ?): AnnotationSpec.Builder fun T : Any FileSpec.Builder .tag(tag: T ?): FileSpec.Builder fun T : Any FunSpec.Builder .tag(tag: T ?): FunSpec.Builder fun T : Any ParameterSpec.Builder .tag(tag: T ?): ParameterSpec.Builder fun T : Any PropertySpec.Builder .tag(tag: T ?): PropertySpec.Builder fun T : Any TypeAliasSpec.Builder .tag(tag: T ?): TypeAliasSpec.Builder fun T : Any TypeSpec.Builder .tag(tag: T ?): TypeSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-n-o-t-a-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / ANNOTATION ANNOTATION val ANNOTATION: ClassName","title":" a n n o t a t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-n-o-t-a-t-i-o-n/#annotation","text":"val ANNOTATION: ClassName","title":"ANNOTATION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-y/","text":"kotlinpoet / com.squareup.kotlinpoet / ANY ANY val ANY: ClassName","title":" a n y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-n-y/#any","text":"val ANY: ClassName","title":"ANY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / ARRAY ARRAY val ARRAY: ClassName","title":" a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-a-r-r-a-y/#array","text":"val ARRAY: ClassName","title":"ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n/","text":"kotlinpoet / com.squareup.kotlinpoet / BOOLEAN BOOLEAN val BOOLEAN: ClassName","title":" b o o l e a n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n/#boolean","text":"val BOOLEAN: ClassName","title":"BOOLEAN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / BOOLEAN_ARRAY BOOLEAN_ARRAY val BOOLEAN_ARRAY: ClassName","title":" b o o l e a n  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-o-o-l-e-a-n_-a-r-r-a-y/#boolean_array","text":"val BOOLEAN_ARRAY: ClassName","title":"BOOLEAN_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / BYTE BYTE val BYTE: ClassName","title":" b y t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e/#byte","text":"val BYTE: ClassName","title":"BYTE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / BYTE_ARRAY BYTE_ARRAY val BYTE_ARRAY: ClassName","title":" b y t e  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-b-y-t-e_-a-r-r-a-y/#byte_array","text":"val BYTE_ARRAY: ClassName","title":"BYTE_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r/","text":"kotlinpoet / com.squareup.kotlinpoet / CHAR CHAR val CHAR: ClassName","title":" c h a r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r/#char","text":"val CHAR: ClassName","title":"CHAR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / CHAR_ARRAY CHAR_ARRAY val CHAR_ARRAY: ClassName","title":" c h a r  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-a-r-r-a-y/#char_array","text":"val CHAR_ARRAY: ClassName","title":"CHAR_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-s-e-q-u-e-n-c-e/","text":"kotlinpoet / com.squareup.kotlinpoet / CHAR_SEQUENCE CHAR_SEQUENCE val CHAR_SEQUENCE: ClassName","title":" c h a r  s e q u e n c e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-h-a-r_-s-e-q-u-e-n-c-e/#char_sequence","text":"val CHAR_SEQUENCE: ClassName","title":"CHAR_SEQUENCE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-l-l-e-c-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / COLLECTION COLLECTION val COLLECTION: ClassName","title":" c o l l e c t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-l-l-e-c-t-i-o-n/#collection","text":"val COLLECTION: ClassName","title":"COLLECTION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-m-p-a-r-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / COMPARABLE COMPARABLE val COMPARABLE: ClassName","title":" c o m p a r a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-c-o-m-p-a-r-a-b-l-e/#comparable","text":"val COMPARABLE: ClassName","title":"COMPARABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / DOUBLE DOUBLE val DOUBLE: ClassName","title":" d o u b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e/#double","text":"val DOUBLE: ClassName","title":"DOUBLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / DOUBLE_ARRAY DOUBLE_ARRAY val DOUBLE_ARRAY: ClassName","title":" d o u b l e  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-o-u-b-l-e_-a-r-r-a-y/#double_array","text":"val DOUBLE_ARRAY: ClassName","title":"DOUBLE_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-y-n-a-m-i-c/","text":"kotlinpoet / com.squareup.kotlinpoet / DYNAMIC DYNAMIC val DYNAMIC: Dynamic Dynamic is a singleton object type, so this is a shorthand for it in Java.","title":" d y n a m i c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-d-y-n-a-m-i-c/#dynamic","text":"val DYNAMIC: Dynamic Dynamic is a singleton object type, so this is a shorthand for it in Java.","title":"DYNAMIC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-e-n-u-m/","text":"kotlinpoet / com.squareup.kotlinpoet / ENUM ENUM val ENUM: ClassName","title":" e n u m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-e-n-u-m/#enum","text":"val ENUM: ClassName","title":"ENUM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t/","text":"kotlinpoet / com.squareup.kotlinpoet / FLOAT FLOAT val FLOAT: ClassName","title":" f l o a t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t/#float","text":"val FLOAT: ClassName","title":"FLOAT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / FLOAT_ARRAY FLOAT_ARRAY val FLOAT_ARRAY: ClassName","title":" f l o a t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-f-l-o-a-t_-a-r-r-a-y/#float_array","text":"val FLOAT_ARRAY: ClassName","title":"FLOAT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t/","text":"kotlinpoet / com.squareup.kotlinpoet / INT INT val INT: ClassName","title":" i n t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t/#int","text":"val INT: ClassName","title":"INT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / INT_ARRAY INT_ARRAY val INT_ARRAY: ClassName","title":" i n t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-n-t_-a-r-r-a-y/#int_array","text":"val INT_ARRAY: ClassName","title":"INT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-t-e-r-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / ITERABLE ITERABLE val ITERABLE: ClassName","title":" i t e r a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-i-t-e-r-a-b-l-e/#iterable","text":"val ITERABLE: ClassName","title":"ITERABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-i-s-t/","text":"kotlinpoet / com.squareup.kotlinpoet / LIST LIST val LIST: ClassName","title":" l i s t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-i-s-t/#list","text":"val LIST: ClassName","title":"LIST"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / LONG LONG val LONG: ClassName","title":" l o n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g/#long","text":"val LONG: ClassName","title":"LONG"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / LONG_ARRAY LONG_ARRAY val LONG_ARRAY: ClassName","title":" l o n g  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-l-o-n-g_-a-r-r-a-y/#long_array","text":"val LONG_ARRAY: ClassName","title":"LONG_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p/","text":"kotlinpoet / com.squareup.kotlinpoet / MAP MAP val MAP: ClassName","title":" m a p"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p/#map","text":"val MAP: ClassName","title":"MAP"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p_-e-n-t-r-y/","text":"kotlinpoet / com.squareup.kotlinpoet / MAP_ENTRY MAP_ENTRY val MAP_ENTRY: ClassName","title":" m a p  e n t r y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-a-p_-e-n-t-r-y/#map_entry","text":"val MAP_ENTRY: ClassName","title":"MAP_ENTRY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-c-o-l-l-e-c-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_COLLECTION MUTABLE_COLLECTION val MUTABLE_COLLECTION: ClassName","title":" m u t a b l e  c o l l e c t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-c-o-l-l-e-c-t-i-o-n/#mutable_collection","text":"val MUTABLE_COLLECTION: ClassName","title":"MUTABLE_COLLECTION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-i-t-e-r-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_ITERABLE MUTABLE_ITERABLE val MUTABLE_ITERABLE: ClassName","title":" m u t a b l e  i t e r a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-i-t-e-r-a-b-l-e/#mutable_iterable","text":"val MUTABLE_ITERABLE: ClassName","title":"MUTABLE_ITERABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-l-i-s-t/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_LIST MUTABLE_LIST val MUTABLE_LIST: ClassName","title":" m u t a b l e  l i s t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-l-i-s-t/#mutable_list","text":"val MUTABLE_LIST: ClassName","title":"MUTABLE_LIST"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_MAP MUTABLE_MAP val MUTABLE_MAP: ClassName","title":" m u t a b l e  m a p"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p/#mutable_map","text":"val MUTABLE_MAP: ClassName","title":"MUTABLE_MAP"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p_-e-n-t-r-y/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_MAP_ENTRY MUTABLE_MAP_ENTRY val MUTABLE_MAP_ENTRY: ClassName","title":" m u t a b l e  m a p  e n t r y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-m-a-p_-e-n-t-r-y/#mutable_map_entry","text":"val MUTABLE_MAP_ENTRY: ClassName","title":"MUTABLE_MAP_ENTRY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-s-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / MUTABLE_SET MUTABLE_SET val MUTABLE_SET: ClassName","title":" m u t a b l e  s e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-m-u-t-a-b-l-e_-s-e-t/#mutable_set","text":"val MUTABLE_SET: ClassName","title":"MUTABLE_SET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-o-t-h-i-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / NOTHING NOTHING val NOTHING: ClassName","title":" n o t h i n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-o-t-h-i-n-g/#nothing","text":"val NOTHING: ClassName","title":"NOTHING"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-u-m-b-e-r/","text":"kotlinpoet / com.squareup.kotlinpoet / NUMBER NUMBER val NUMBER: ClassName","title":" n u m b e r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-n-u-m-b-e-r/#number","text":"val NUMBER: ClassName","title":"NUMBER"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / SET SET val SET: ClassName","title":" s e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-e-t/#set","text":"val SET: ClassName","title":"SET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t/","text":"kotlinpoet / com.squareup.kotlinpoet / SHORT SHORT val SHORT: ClassName","title":" s h o r t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t/#short","text":"val SHORT: ClassName","title":"SHORT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / SHORT_ARRAY SHORT_ARRAY val SHORT_ARRAY: ClassName","title":" s h o r t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-h-o-r-t_-a-r-r-a-y/#short_array","text":"val SHORT_ARRAY: ClassName","title":"SHORT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-a-r/","text":"kotlinpoet / com.squareup.kotlinpoet / STAR STAR val STAR: WildcardTypeName The wildcard type * which is shorthand for out Any? .","title":" s t a r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-a-r/#star","text":"val STAR: WildcardTypeName The wildcard type * which is shorthand for out Any? .","title":"STAR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-r-i-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / STRING STRING val STRING: ClassName","title":" s t r i n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-s-t-r-i-n-g/#string","text":"val STRING: ClassName","title":"STRING"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-t-h-r-o-w-a-b-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / THROWABLE THROWABLE val THROWABLE: ClassName","title":" t h r o w a b l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-t-h-r-o-w-a-b-l-e/#throwable","text":"val THROWABLE: ClassName","title":"THROWABLE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u-n-i-t/","text":"kotlinpoet / com.squareup.kotlinpoet / UNIT UNIT val UNIT: ClassName","title":" u n i t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u-n-i-t/#unit","text":"val UNIT: ClassName","title":"UNIT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / U_BYTE U_BYTE val U_BYTE: ClassName","title":" u  b y t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e/#u_byte","text":"val U_BYTE: ClassName","title":"U_BYTE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_BYTE_ARRAY U_BYTE_ARRAY val U_BYTE_ARRAY: ClassName","title":" u  b y t e  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-b-y-t-e_-a-r-r-a-y/#u_byte_array","text":"val U_BYTE_ARRAY: ClassName","title":"U_BYTE_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t/","text":"kotlinpoet / com.squareup.kotlinpoet / U_INT U_INT val U_INT: ClassName","title":" u  i n t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t/#u_int","text":"val U_INT: ClassName","title":"U_INT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_INT_ARRAY U_INT_ARRAY val U_INT_ARRAY: ClassName","title":" u  i n t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-i-n-t_-a-r-r-a-y/#u_int_array","text":"val U_INT_ARRAY: ClassName","title":"U_INT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g/","text":"kotlinpoet / com.squareup.kotlinpoet / U_LONG U_LONG val U_LONG: ClassName","title":" u  l o n g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g/#u_long","text":"val U_LONG: ClassName","title":"U_LONG"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_LONG_ARRAY U_LONG_ARRAY val U_LONG_ARRAY: ClassName","title":" u  l o n g  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-l-o-n-g_-a-r-r-a-y/#u_long_array","text":"val U_LONG_ARRAY: ClassName","title":"U_LONG_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t/","text":"kotlinpoet / com.squareup.kotlinpoet / U_SHORT U_SHORT val U_SHORT: ClassName","title":" u  s h o r t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t/#u_short","text":"val U_SHORT: ClassName","title":"U_SHORT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t_-a-r-r-a-y/","text":"kotlinpoet / com.squareup.kotlinpoet / U_SHORT_ARRAY U_SHORT_ARRAY val U_SHORT_ARRAY: ClassName","title":" u  s h o r t  a r r a y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-u_-s-h-o-r-t_-a-r-r-a-y/#u_short_array","text":"val U_SHORT_ARRAY: ClassName","title":"U_SHORT_ARRAY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/build-code-block/","text":"kotlinpoet / com.squareup.kotlinpoet / buildCodeBlock buildCodeBlock inline fun buildCodeBlock(builderAction: CodeBlock.Builder .() - Unit ): CodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock .","title":"Build code block"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/build-code-block/#buildcodeblock","text":"inline fun buildCodeBlock(builderAction: CodeBlock.Builder .() - Unit ): CodeBlock Builds new CodeBlock by populating newly created CodeBlock.Builder using provided builderAction and then converting it to CodeBlock .","title":"buildCodeBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/tag/","text":"kotlinpoet / com.squareup.kotlinpoet / tag tag inline fun reified T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key. inline fun reified T : Any AnnotationSpec.Builder .tag(tag: T ?): AnnotationSpec.Builder inline fun reified T : Any FileSpec.Builder .tag(tag: T ?): FileSpec.Builder inline fun reified T : Any FunSpec.Builder .tag(tag: T ?): FunSpec.Builder inline fun reified T : Any ParameterSpec.Builder .tag(tag: T ?): ParameterSpec.Builder inline fun reified T : Any PropertySpec.Builder .tag(tag: T ?): PropertySpec.Builder inline fun reified T : Any TypeAliasSpec.Builder .tag(tag: T ?): TypeAliasSpec.Builder inline fun reified T : Any TypeSpec.Builder .tag(tag: T ?): TypeSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . Use this API to attach debugging or other application data to a spec so that you may read it in other APIs or callbacks.","title":"Tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/tag/#tag","text":"inline fun reified T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key. inline fun reified T : Any AnnotationSpec.Builder .tag(tag: T ?): AnnotationSpec.Builder inline fun reified T : Any FileSpec.Builder .tag(tag: T ?): FileSpec.Builder inline fun reified T : Any FunSpec.Builder .tag(tag: T ?): FunSpec.Builder inline fun reified T : Any ParameterSpec.Builder .tag(tag: T ?): ParameterSpec.Builder inline fun reified T : Any PropertySpec.Builder .tag(tag: T ?): PropertySpec.Builder inline fun reified T : Any TypeAliasSpec.Builder .tag(tag: T ?): TypeAliasSpec.Builder inline fun reified T : Any TypeSpec.Builder .tag(tag: T ?): TypeSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . Use this API to attach debugging or other application data to a spec so that you may read it in other APIs or callbacks.","title":"tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec AnnotationSpec class AnnotationSpec : Taggable A generated annotation on a declaration. Types Name Summary Builder class Builder : Taggable.Builder AnnotationSpec.Builder UseSiteTarget enum class UseSiteTarget Properties Name Summary className val className: ClassName members val members: List CodeBlock useSiteTarget val useSiteTarget: AnnotationSpec.UseSiteTarget ? Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): AnnotationSpec.Builder toString fun toString(): String Companion Object Functions Name Summary builder fun builder(type: ClassName ): AnnotationSpec.Builder fun builder(type: Class out Annotation ): AnnotationSpec.Builder fun builder(type: KClass out Annotation ): AnnotationSpec.Builder get fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec fun get(annotation: AnnotationMirror ): AnnotationSpec Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#annotationspec","text":"class AnnotationSpec : Taggable A generated annotation on a declaration.","title":"AnnotationSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder AnnotationSpec.Builder UseSiteTarget enum class UseSiteTarget","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#properties","text":"Name Summary className val className: ClassName members val members: List CodeBlock useSiteTarget val useSiteTarget: AnnotationSpec.UseSiteTarget ?","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): AnnotationSpec.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#companion-object-functions","text":"Name Summary builder fun builder(type: ClassName ): AnnotationSpec.Builder fun builder(type: Class out Annotation ): AnnotationSpec.Builder fun builder(type: KClass out Annotation ): AnnotationSpec.Builder get fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec fun get(annotation: AnnotationMirror ): AnnotationSpec","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / builder builder @JvmStatic fun builder(type: ClassName ): AnnotationSpec.Builder @JvmStatic fun builder(type: Class out Annotation ): AnnotationSpec.Builder @JvmStatic fun builder(type: KClass out Annotation ): AnnotationSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/builder/#builder","text":"@JvmStatic fun builder(type: ClassName ): AnnotationSpec.Builder @JvmStatic fun builder(type: Class out Annotation ): AnnotationSpec.Builder @JvmStatic fun builder(type: KClass out Annotation ): AnnotationSpec.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / className className val className: ClassName","title":"Class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/class-name/#classname","text":"val className: ClassName","title":"className"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/get/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / get get @JvmStatic @JvmOverloads fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec @JvmStatic fun get(annotation: AnnotationMirror ): AnnotationSpec","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/get/#get","text":"@JvmStatic @JvmOverloads fun get(annotation: Annotation , includeDefaultValues: Boolean = false): AnnotationSpec @JvmStatic fun get(annotation: AnnotationMirror ): AnnotationSpec","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/members/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / members members val members: List CodeBlock","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/members/#members","text":"val members: List CodeBlock","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / toBuilder toBuilder fun toBuilder(): AnnotationSpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-builder/#tobuilder","text":"fun toBuilder(): AnnotationSpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/use-site-target/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / useSiteTarget useSiteTarget val useSiteTarget: AnnotationSpec.UseSiteTarget ?","title":"Use site target"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/use-site-target/#usesitetarget","text":"val useSiteTarget: AnnotationSpec.UseSiteTarget ?","title":"useSiteTarget"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder Builder class Builder : Taggable.Builder AnnotationSpec.Builder Properties Name Summary members val members: MutableList CodeBlock tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. Functions Name Summary addMember fun addMember(format: String , vararg args: Any ): AnnotationSpec.Builder fun addMember(codeBlock: CodeBlock ): AnnotationSpec.Builder build fun build(): AnnotationSpec useSiteTarget fun useSiteTarget(useSiteTarget: AnnotationSpec.UseSiteTarget ?): AnnotationSpec.Builder Inherited Functions Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary tag fun T : Any AnnotationSpec.Builder .tag(tag: T ?): AnnotationSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#builder","text":"class Builder : Taggable.Builder AnnotationSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#properties","text":"Name Summary members val members: MutableList CodeBlock tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#functions","text":"Name Summary addMember fun addMember(format: String , vararg args: Any ): AnnotationSpec.Builder fun addMember(codeBlock: CodeBlock ): AnnotationSpec.Builder build fun build(): AnnotationSpec useSiteTarget fun useSiteTarget(useSiteTarget: AnnotationSpec.UseSiteTarget ?): AnnotationSpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#inherited-functions","text":"Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/#extension-functions","text":"Name Summary tag fun T : Any AnnotationSpec.Builder .tag(tag: T ?): AnnotationSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/add-member/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / addMember addMember fun addMember(format: String , vararg args: Any ): AnnotationSpec.Builder fun addMember(codeBlock: CodeBlock ): AnnotationSpec.Builder","title":"Add member"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/add-member/#addmember","text":"fun addMember(format: String , vararg args: Any ): AnnotationSpec.Builder fun addMember(codeBlock: CodeBlock ): AnnotationSpec.Builder","title":"addMember"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / build build fun build(): AnnotationSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/build/#build","text":"fun build(): AnnotationSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/members/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / members members val members: MutableList CodeBlock","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/members/#members","text":"val members: MutableList CodeBlock","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/use-site-target/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / Builder / useSiteTarget useSiteTarget fun useSiteTarget(useSiteTarget: AnnotationSpec.UseSiteTarget ?): AnnotationSpec.Builder","title":"Use site target"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-builder/use-site-target/#usesitetarget","text":"fun useSiteTarget(useSiteTarget: AnnotationSpec.UseSiteTarget ?): AnnotationSpec.Builder","title":"useSiteTarget"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget UseSiteTarget enum class UseSiteTarget Enum Values Name Summary FILE PROPERTY FIELD GET SET RECEIVER PARAM SETPARAM DELEGATE","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/#usesitetarget","text":"enum class UseSiteTarget","title":"UseSiteTarget"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/#enum-values","text":"Name Summary FILE PROPERTY FIELD GET SET RECEIVER PARAM SETPARAM DELEGATE","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-d-e-l-e-g-a-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / DELEGATE DELEGATE DELEGATE","title":" d e l e g a t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-d-e-l-e-g-a-t-e/#delegate","text":"DELEGATE","title":"DELEGATE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-e-l-d/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / FIELD FIELD FIELD","title":" f i e l d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-e-l-d/#field","text":"FIELD","title":"FIELD"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-l-e/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / FILE FILE FILE","title":" f i l e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-f-i-l-e/#file","text":"FILE","title":"FILE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-g-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / GET GET GET","title":" g e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-g-e-t/#get","text":"GET","title":"GET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-a-r-a-m/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / PARAM PARAM PARAM","title":" p a r a m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-a-r-a-m/#param","text":"PARAM","title":"PARAM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-r-o-p-e-r-t-y/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / PROPERTY PROPERTY PROPERTY","title":" p r o p e r t y"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-p-r-o-p-e-r-t-y/#property","text":"PROPERTY","title":"PROPERTY"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-r-e-c-e-i-v-e-r/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / RECEIVER RECEIVER RECEIVER","title":" r e c e i v e r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-r-e-c-e-i-v-e-r/#receiver","text":"RECEIVER","title":"RECEIVER"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t-p-a-r-a-m/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / SETPARAM SETPARAM SETPARAM","title":" s e t p a r a m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t-p-a-r-a-m/#setparam","text":"SETPARAM","title":"SETPARAM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t/","text":"kotlinpoet / com.squareup.kotlinpoet / AnnotationSpec / UseSiteTarget / SET SET SET","title":" s e t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-annotation-spec/-use-site-target/-s-e-t/#set","text":"SET","title":"SET"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName ClassName class ClassName : TypeName , Comparable ClassName A fully-qualified class name for top-level and member classes. Constructors Name Summary init ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry . Properties Name Summary canonicalName val canonicalName: String Fully qualified name using . as a separator, like kotlin.collections.Map.Entry . packageName val packageName: String Package name, like \"kotlin.collections\" for Map.Entry . simpleName val simpleName: String Simple name of this class, like \"Entry\" for Map.Entry . simpleNames val simpleNames: List String The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry . Inherited Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary compareTo fun compareTo(other: ClassName ): Int Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: constructorReference fun constructorReference(): CodeBlock Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ClassName enclosingClassName fun enclosingClassName(): ClassName ? Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class. nestedClass fun nestedClass(name: String ): ClassName Returns a new ClassName instance for the specified name as nested inside this class. peerClass fun peerClass(name: String ): ClassName Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) . reflectionName fun reflectionName(): String Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry . topLevelClassName fun topLevelClassName(): ClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result s enclosing class is null. Inherited Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Companion Object Functions Name Summary bestGuess fun bestGuess(classNameString: String ): ClassName Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions. Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#classname","text":"class ClassName : TypeName , Comparable ClassName A fully-qualified class name for top-level and member classes.","title":"ClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#constructors","text":"Name Summary init ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry .","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#properties","text":"Name Summary canonicalName val canonicalName: String Fully qualified name using . as a separator, like kotlin.collections.Map.Entry . packageName val packageName: String Package name, like \"kotlin.collections\" for Map.Entry . simpleName val simpleName: String Simple name of this class, like \"Entry\" for Map.Entry . simpleNames val simpleNames: List String The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry .","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#inherited-properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Inherited Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#functions","text":"Name Summary compareTo fun compareTo(other: ClassName ): Int Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: constructorReference fun constructorReference(): CodeBlock Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ClassName enclosingClassName fun enclosingClassName(): ClassName ? Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class. nestedClass fun nestedClass(name: String ): ClassName Returns a new ClassName instance for the specified name as nested inside this class. peerClass fun peerClass(name: String ): ClassName Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) . reflectionName fun reflectionName(): String Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry . topLevelClassName fun topLevelClassName(): ClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result s enclosing class is null.","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#inherited-functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#companion-object-functions","text":"Name Summary bestGuess fun bestGuess(classNameString: String ): ClassName Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions.","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / init init ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry .","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/-init-/#init","text":"ClassName(packageName: String , simpleName: String , vararg simpleNames: String ) Returns a class name created from the given parts. For example, calling this with package name \"java.util\" and simple names \"Map\" , \"Entry\" yields Map.Entry .","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/best-guess/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / bestGuess bestGuess @JvmStatic fun bestGuess(classNameString: String ): ClassName Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions.","title":"Best guess"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/best-guess/#bestguess","text":"@JvmStatic fun bestGuess(classNameString: String ): ClassName Returns a new ClassName instance for the given fully-qualified class name string. This method assumes that the input is ASCII and follows typical Java style (lowercase package names, UpperCamelCase class names) and may produce incorrect results or throw IllegalArgumentException otherwise. For that reason, the constructor should be preferred as it can create ClassName instances without such restrictions.","title":"bestGuess"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/canonical-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / canonicalName canonicalName val canonicalName: String Fully qualified name using . as a separator, like kotlin.collections.Map.Entry .","title":"Canonical name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/canonical-name/#canonicalname","text":"val canonicalName: String Fully qualified name using . as a separator, like kotlin.collections.Map.Entry .","title":"canonicalName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/compare-to/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / compareTo compareTo fun compareTo(other: ClassName ): Int Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: com.example.Robot com.example.Robot.Motor com.example.RoboticVacuum","title":"Compare to"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/compare-to/#compareto","text":"fun compareTo(other: ClassName ): Int Orders by the fully-qualified name. Nested types are ordered immediately after their enclosing type. For example, the following types are ordered by this method: com.example.Robot com.example.Robot.Motor com.example.RoboticVacuum","title":"compareTo"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/constructor-reference/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / constructorReference constructorReference fun constructorReference(): CodeBlock Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level class with a conflicting name.","title":"Constructor reference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/constructor-reference/#constructorreference","text":"fun constructorReference(): CodeBlock Callable reference to the constructor of this class. Emits the enclosing class if one exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level class. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level class with a conflicting name.","title":"constructorReference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / copy copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ClassName Overrides TypeName.copy","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ClassName Overrides TypeName.copy","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/enclosing-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / enclosingClassName enclosingClassName fun enclosingClassName(): ClassName ? Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class.","title":"Enclosing class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/enclosing-class-name/#enclosingclassname","text":"fun enclosingClassName(): ClassName ? Returns the enclosing class, like Map for Map.Entry . Returns null if this class is not nested in another class.","title":"enclosingClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/nested-class/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / nestedClass nestedClass fun nestedClass(name: String ): ClassName Returns a new ClassName instance for the specified name as nested inside this class.","title":"Nested class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/nested-class/#nestedclass","text":"fun nestedClass(name: String ): ClassName Returns a new ClassName instance for the specified name as nested inside this class.","title":"nestedClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / packageName packageName val packageName: String Package name, like \"kotlin.collections\" for Map.Entry .","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/package-name/#packagename","text":"val packageName: String Package name, like \"kotlin.collections\" for Map.Entry .","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/peer-class/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / peerClass peerClass fun peerClass(name: String ): ClassName Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) .","title":"Peer class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/peer-class/#peerclass","text":"fun peerClass(name: String ): ClassName Returns a class that shares the same enclosing package or class. If this class is enclosed by another class, this is equivalent to enclosingClassName().nestedClass(name) . Otherwise it is equivalent to get(packageName(), name) .","title":"peerClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/reflection-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / reflectionName reflectionName fun reflectionName(): String Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry .","title":"Reflection name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/reflection-name/#reflectionname","text":"fun reflectionName(): String Fully qualified name using . to separate package from the top level class name, and $ to separate nested classes, like kotlin.collections.Map$Entry .","title":"reflectionName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / simpleName simpleName val simpleName: String Simple name of this class, like \"Entry\" for Map.Entry .","title":"Simple name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-name/#simplename","text":"val simpleName: String Simple name of this class, like \"Entry\" for Map.Entry .","title":"simpleName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-names/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / simpleNames simpleNames val simpleNames: List String The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry .","title":"Simple names"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/simple-names/#simplenames","text":"val simpleNames: List String The enclosing classes, outermost first, followed by the simple name. This is [\"Map\", \"Entry\"] for Map.Entry .","title":"simpleNames"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/top-level-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ClassName / topLevelClassName topLevelClassName fun topLevelClassName(): ClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result s enclosing class is null.","title":"Top level class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-class-name/top-level-class-name/#toplevelclassname","text":"fun topLevelClassName(): ClassName Returns the top class in this nesting group. Equivalent to chained calls to ClassName.enclosingClassName until the result s enclosing class is null.","title":"topLevelClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock CodeBlock class CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! Code blocks support placeholders like java.text.Format . This class primarily uses a percent sign % but has its own set of permitted placeholders: %L emits a literal value with no escaping. Arguments for literals may be strings, primitives, type declarations , annotations and even other code blocks. %N emits a name , using name collision avoidance where necessary. Arguments for names may be strings (actually any character sequence ), parameters , properties , functions , and types . %S escapes the value as a string , wraps it with double quotes, and emits that. For example, 6\" sandwich is emitted \"6\\\" sandwich\" . %S will also escape all dollar signs ( $ ), use %P for string templates. %P - Similar to %S , but doesn t escape dollar signs ( $ ) to allow creation of string templates. If the string contains dollar signs that should be escaped - use %S . %T emits a type reference. Types will be imported if possible. Arguments for types may be classes , type mirrors , and elements . %M emits a member reference. A member is either a function or a property. If the member is importable, e.g. it s a top-level function or a property declared inside an object, the import will be resolved if possible. Arguments for members must be of type MemberName . %% emits a percent sign. \u00b7 emits a space that never wraps. KotlinPoet prefers to wrap lines longer than 100 columns. It does this by replacing normal spaces with a newline and indent. Note that spaces in strings are never wrapped. \u21e5 increases the indentation level. \u21e4 decreases the indentation level. \u00ab begins a statement. For multiline statements, every line after the first line is double-indented. \u00bb ends a statement. Types Name Summary Builder class Builder Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty fun isEmpty(): Boolean A heterogeneous list containing string literals and value placeholders. isNotEmpty fun isNotEmpty(): Boolean toBuilder fun toBuilder(): CodeBlock.Builder toString fun toString(): String Companion Object Functions Name Summary builder fun builder(): CodeBlock.Builder of fun of(format: String , vararg args: Any ?): CodeBlock","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#codeblock","text":"class CodeBlock A fragment of a .kt file, potentially containing declarations, statements, and documentation. Code blocks are not necessarily well-formed Kotlin code, and are not validated. This class assumes kotlinc will check correctness later! Code blocks support placeholders like java.text.Format . This class primarily uses a percent sign % but has its own set of permitted placeholders: %L emits a literal value with no escaping. Arguments for literals may be strings, primitives, type declarations , annotations and even other code blocks. %N emits a name , using name collision avoidance where necessary. Arguments for names may be strings (actually any character sequence ), parameters , properties , functions , and types . %S escapes the value as a string , wraps it with double quotes, and emits that. For example, 6\" sandwich is emitted \"6\\\" sandwich\" . %S will also escape all dollar signs ( $ ), use %P for string templates. %P - Similar to %S , but doesn t escape dollar signs ( $ ) to allow creation of string templates. If the string contains dollar signs that should be escaped - use %S . %T emits a type reference. Types will be imported if possible. Arguments for types may be classes , type mirrors , and elements . %M emits a member reference. A member is either a function or a property. If the member is importable, e.g. it s a top-level function or a property declared inside an object, the import will be resolved if possible. Arguments for members must be of type MemberName . %% emits a percent sign. \u00b7 emits a space that never wraps. KotlinPoet prefers to wrap lines longer than 100 columns. It does this by replacing normal spaces with a newline and indent. Note that spaces in strings are never wrapped. \u21e5 increases the indentation level. \u21e4 decreases the indentation level. \u00ab begins a statement. For multiline statements, every line after the first line is double-indented. \u00bb ends a statement.","title":"CodeBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty fun isEmpty(): Boolean A heterogeneous list containing string literals and value placeholders. isNotEmpty fun isNotEmpty(): Boolean toBuilder fun toBuilder(): CodeBlock.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/#companion-object-functions","text":"Name Summary builder fun builder(): CodeBlock.Builder of fun of(format: String , vararg args: Any ?): CodeBlock","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / builder builder @JvmStatic fun builder(): CodeBlock.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/builder/#builder","text":"@JvmStatic fun builder(): CodeBlock.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / isEmpty isEmpty fun isEmpty(): Boolean A heterogeneous list containing string literals and value placeholders.","title":"Is empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-empty/#isempty","text":"fun isEmpty(): Boolean A heterogeneous list containing string literals and value placeholders.","title":"isEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-not-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / isNotEmpty isNotEmpty fun isNotEmpty(): Boolean","title":"Is not empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/is-not-empty/#isnotempty","text":"fun isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/of/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / of of @JvmStatic fun of(format: String , vararg args: Any ?): CodeBlock","title":"Of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/of/#of","text":"@JvmStatic fun of(format: String , vararg args: Any ?): CodeBlock","title":"of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / toBuilder toBuilder fun toBuilder(): CodeBlock.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-builder/#tobuilder","text":"fun toBuilder(): CodeBlock.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder Builder class Builder Constructors Name Summary init Builder() Functions Name Summary add fun add(format: String , vararg args: Any ?): CodeBlock.Builder Add code with positional or relative arguments. fun add(codeBlock: CodeBlock ): CodeBlock.Builder addNamed fun addNamed(format: String , arguments: Map String , * ): CodeBlock.Builder Adds code using named arguments. addStatement fun addStatement(format: String , vararg args: Any ?): CodeBlock.Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder build fun build(): CodeBlock endControlFlow fun endControlFlow(): CodeBlock.Builder indent fun indent(): CodeBlock.Builder isEmpty fun isEmpty(): Boolean isNotEmpty fun isNotEmpty(): Boolean nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder unindent fun unindent(): CodeBlock.Builder","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/#constructors","text":"Name Summary init Builder()","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/#functions","text":"Name Summary add fun add(format: String , vararg args: Any ?): CodeBlock.Builder Add code with positional or relative arguments. fun add(codeBlock: CodeBlock ): CodeBlock.Builder addNamed fun addNamed(format: String , arguments: Map String , * ): CodeBlock.Builder Adds code using named arguments. addStatement fun addStatement(format: String , vararg args: Any ?): CodeBlock.Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder build fun build(): CodeBlock endControlFlow fun endControlFlow(): CodeBlock.Builder indent fun indent(): CodeBlock.Builder isEmpty fun isEmpty(): Boolean isNotEmpty fun isNotEmpty(): Boolean nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder unindent fun unindent(): CodeBlock.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / init init Builder()","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-named/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / addNamed addNamed fun addNamed(format: String , arguments: Map String , * ): CodeBlock.Builder Adds code using named arguments. Named arguments specify their name after the % followed by : and the corresponding type character. Argument names consist of characters in a-z, A-Z, 0-9, and _ and must start with a lowercase character. For example, to refer to the type java.lang.Integer with the argument name clazz use a format string containing %clazz:T and include the key clazz with value java.lang.Integer.class in the argument map.","title":"Add named"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-named/#addnamed","text":"fun addNamed(format: String , arguments: Map String , * ): CodeBlock.Builder Adds code using named arguments. Named arguments specify their name after the % followed by : and the corresponding type character. Argument names consist of characters in a-z, A-Z, 0-9, and _ and must start with a lowercase character. For example, to refer to the type java.lang.Integer with the argument name clazz use a format string containing %clazz:T and include the key clazz with value java.lang.Integer.class in the argument map.","title":"addNamed"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-statement/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / addStatement addStatement fun addStatement(format: String , vararg args: Any ?): CodeBlock.Builder","title":"Add statement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add-statement/#addstatement","text":"fun addStatement(format: String , vararg args: Any ?): CodeBlock.Builder","title":"addStatement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / add add fun add(format: String , vararg args: Any ?): CodeBlock.Builder Add code with positional or relative arguments. Relative arguments map 1:1 with the placeholders in the format string. Positional arguments use an index after the placeholder to identify which argument index to use. For example, for a literal to reference the 3 rd argument: %3L (1 based index) Mixing relative and positional arguments in a call to add is invalid and will result in an error. fun add(codeBlock: CodeBlock ): CodeBlock.Builder","title":"Add"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/add/#add","text":"fun add(format: String , vararg args: Any ?): CodeBlock.Builder Add code with positional or relative arguments. Relative arguments map 1:1 with the placeholders in the format string. Positional arguments use an index after the placeholder to identify which argument index to use. For example, for a literal to reference the 3 rd argument: %3L (1 based index) Mixing relative and positional arguments in a call to add is invalid and will result in an error. fun add(codeBlock: CodeBlock ): CodeBlock.Builder","title":"add"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/begin-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / beginControlFlow beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder Parameters controlFlow - the control flow construct and its code, such as if (foo == 5) . Shouldn t contain newline characters. Can contain opening braces, e.g. beginControlFlow(\"list.forEach { element - \") . If there s no opening brace at the end of the string, it will be added.","title":"Begin control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/begin-control-flow/#begincontrolflow","text":"fun beginControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder","title":"beginControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/begin-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as if (foo == 5) . Shouldn t contain newline characters. Can contain opening braces, e.g. beginControlFlow(\"list.forEach { element - \") . If there s no opening brace at the end of the string, it will be added.","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / build build fun build(): CodeBlock","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/build/#build","text":"fun build(): CodeBlock","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/end-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / endControlFlow endControlFlow fun endControlFlow(): CodeBlock.Builder","title":"End control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/end-control-flow/#endcontrolflow","text":"fun endControlFlow(): CodeBlock.Builder","title":"endControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/indent/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / indent indent fun indent(): CodeBlock.Builder","title":"Indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/indent/#indent","text":"fun indent(): CodeBlock.Builder","title":"indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / isEmpty isEmpty fun isEmpty(): Boolean","title":"Is empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-empty/#isempty","text":"fun isEmpty(): Boolean","title":"isEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-not-empty/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / isNotEmpty isNotEmpty fun isNotEmpty(): Boolean","title":"Is not empty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/is-not-empty/#isnotempty","text":"fun isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/next-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / nextControlFlow nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder Parameters controlFlow - the control flow construct and its code, such as else if (foo == 10) . Shouldn t contain braces or newline characters.","title":"Next control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/next-control-flow/#nextcontrolflow","text":"fun nextControlFlow(controlFlow: String , vararg args: Any ?): CodeBlock.Builder","title":"nextControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/next-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as else if (foo == 10) . Shouldn t contain braces or newline characters.","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/unindent/","text":"kotlinpoet / com.squareup.kotlinpoet / CodeBlock / Builder / unindent unindent fun unindent(): CodeBlock.Builder","title":"Unindent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-code-block/-builder/unindent/#unindent","text":"fun unindent(): CodeBlock.Builder","title":"unindent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/","text":"kotlinpoet / com.squareup.kotlinpoet / Dynamic Dynamic object Dynamic : TypeName Inherited Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): Nothing Inherited Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#dynamic","text":"object Dynamic : TypeName","title":"Dynamic"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#inherited-properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Inherited Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): Nothing","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#inherited-functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / Dynamic / copy copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): Nothing Overrides TypeName.copy","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-dynamic/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List AnnotationSpec ): Nothing Overrides TypeName.copy","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec FileSpec class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. Items are output in the following order: Comment Annotations Package Imports Members Types Name Summary Builder class Builder : Taggable.Builder FileSpec.Builder Properties Name Summary annotations val annotations: List AnnotationSpec comment val comment: CodeBlock members val members: List Any name val name: String packageName val packageName: String Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): FileSpec.Builder toJavaFileObject fun toJavaFileObject(): JavaFileObject toString fun toString(): String writeTo fun writeTo(out: Appendable ): Unit fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(filer: Filer ): Unit Writes this to filer . Companion Object Functions Name Summary builder fun builder(packageName: String , fileName: String ): FileSpec.Builder get fun get(packageName: String , typeSpec: TypeSpec ): FileSpec Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#filespec","text":"class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. Items are output in the following order: Comment Annotations Package Imports Members","title":"FileSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder FileSpec.Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#properties","text":"Name Summary annotations val annotations: List AnnotationSpec comment val comment: CodeBlock members val members: List Any name val name: String packageName val packageName: String","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): FileSpec.Builder toJavaFileObject fun toJavaFileObject(): JavaFileObject toString fun toString(): String writeTo fun writeTo(out: Appendable ): Unit fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(filer: Filer ): Unit Writes this to filer .","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#companion-object-functions","text":"Name Summary builder fun builder(packageName: String , fileName: String ): FileSpec.Builder get fun get(packageName: String , typeSpec: TypeSpec ): FileSpec","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / annotations annotations val annotations: List AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/annotations/#annotations","text":"val annotations: List AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / builder builder @JvmStatic fun builder(packageName: String , fileName: String ): FileSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/builder/#builder","text":"@JvmStatic fun builder(packageName: String , fileName: String ): FileSpec.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / comment comment val comment: CodeBlock","title":"Comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/comment/#comment","text":"val comment: CodeBlock","title":"comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/get/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / get get @JvmStatic fun get(packageName: String , typeSpec: TypeSpec ): FileSpec","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/get/#get","text":"@JvmStatic fun get(packageName: String , typeSpec: TypeSpec ): FileSpec","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/members/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / members members val members: List Any","title":"Members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/members/#members","text":"val members: List Any","title":"members"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / packageName packageName val packageName: String","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/package-name/#packagename","text":"val packageName: String","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / toBuilder toBuilder fun toBuilder(): FileSpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-builder/#tobuilder","text":"fun toBuilder(): FileSpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-java-file-object/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / toJavaFileObject toJavaFileObject fun toJavaFileObject(): JavaFileObject","title":"To java file object"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-java-file-object/#tojavafileobject","text":"fun toJavaFileObject(): JavaFileObject","title":"toJavaFileObject"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/write-to/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / writeTo writeTo fun writeTo(out: Appendable ): Unit fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(filer: Filer ): Unit Writes this to filer .","title":"Write to"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/write-to/#writeto","text":"fun writeTo(out: Appendable ): Unit fun writeTo(directory: Path): Unit fun writeTo(directory: File ): Unit Writes this to directory as UTF-8 using the standard directory structure. fun writeTo(filer: Filer ): Unit Writes this to filer .","title":"writeTo"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder Builder class Builder : Taggable.Builder FileSpec.Builder Properties Name Summary annotations val annotations: MutableList AnnotationSpec name val name: String packageName val packageName: String tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. Functions Name Summary addAliasedImport fun addAliasedImport(class: Class * , as: String ): FileSpec.Builder fun addAliasedImport(class: KClass * , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): FileSpec.Builder fun addAliasedImport(memberName: MemberName , as: String ): FileSpec.Builder addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): FileSpec.Builder Add an annotation to the file. fun addAnnotation(annotation: ClassName ): FileSpec.Builder fun addAnnotation(annotation: Class * ): FileSpec.Builder fun addAnnotation(annotation: KClass * ): FileSpec.Builder addComment fun addComment(format: String , vararg args: Any ): FileSpec.Builder addFunction fun addFunction(funSpec: FunSpec ): FileSpec.Builder addImport fun addImport(constant: Enum * ): FileSpec.Builder fun addImport(class: Class * , vararg names: String ): FileSpec.Builder fun addImport(class: KClass * , vararg names: String ): FileSpec.Builder fun addImport(className: ClassName , vararg names: String ): FileSpec.Builder fun addImport(packageName: String , vararg names: String ): FileSpec.Builder addProperty fun addProperty(propertySpec: PropertySpec ): FileSpec.Builder addType fun addType(typeSpec: TypeSpec ): FileSpec.Builder addTypeAlias fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): FileSpec.Builder build fun build(): FileSpec indent fun indent(indent: String ): FileSpec.Builder Inherited Functions Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary jvmMultifileClass fun FileSpec.Builder .jvmMultifileClass(): FileSpec.Builder jvmName fun FileSpec.Builder .jvmName(name: String ): FileSpec.Builder tag fun T : Any FileSpec.Builder .tag(tag: T ?): FileSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#builder","text":"class Builder : Taggable.Builder FileSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList AnnotationSpec name val name: String packageName val packageName: String tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#functions","text":"Name Summary addAliasedImport fun addAliasedImport(class: Class * , as: String ): FileSpec.Builder fun addAliasedImport(class: KClass * , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): FileSpec.Builder fun addAliasedImport(memberName: MemberName , as: String ): FileSpec.Builder addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): FileSpec.Builder Add an annotation to the file. fun addAnnotation(annotation: ClassName ): FileSpec.Builder fun addAnnotation(annotation: Class * ): FileSpec.Builder fun addAnnotation(annotation: KClass * ): FileSpec.Builder addComment fun addComment(format: String , vararg args: Any ): FileSpec.Builder addFunction fun addFunction(funSpec: FunSpec ): FileSpec.Builder addImport fun addImport(constant: Enum * ): FileSpec.Builder fun addImport(class: Class * , vararg names: String ): FileSpec.Builder fun addImport(class: KClass * , vararg names: String ): FileSpec.Builder fun addImport(className: ClassName , vararg names: String ): FileSpec.Builder fun addImport(packageName: String , vararg names: String ): FileSpec.Builder addProperty fun addProperty(propertySpec: PropertySpec ): FileSpec.Builder addType fun addType(typeSpec: TypeSpec ): FileSpec.Builder addTypeAlias fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): FileSpec.Builder build fun build(): FileSpec indent fun indent(indent: String ): FileSpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#inherited-functions","text":"Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/#extension-functions","text":"Name Summary jvmMultifileClass fun FileSpec.Builder .jvmMultifileClass(): FileSpec.Builder jvmName fun FileSpec.Builder .jvmName(name: String ): FileSpec.Builder tag fun T : Any FileSpec.Builder .tag(tag: T ?): FileSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-aliased-import/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addAliasedImport addAliasedImport fun addAliasedImport(class: Class * , as: String ): FileSpec.Builder fun addAliasedImport(class: KClass * , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): FileSpec.Builder fun addAliasedImport(memberName: MemberName , as: String ): FileSpec.Builder","title":"Add aliased import"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-aliased-import/#addaliasedimport","text":"fun addAliasedImport(class: Class * , as: String ): FileSpec.Builder fun addAliasedImport(class: KClass * , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , as: String ): FileSpec.Builder fun addAliasedImport(className: ClassName , memberName: String , as: String ): FileSpec.Builder fun addAliasedImport(memberName: MemberName , as: String ): FileSpec.Builder","title":"addAliasedImport"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addAnnotation addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): FileSpec.Builder Add an annotation to the file. The annotation must either have a file use-site target or not have a use-site target specified (in which case it will be changed to file ). fun addAnnotation(annotation: ClassName ): FileSpec.Builder fun addAnnotation(annotation: Class * ): FileSpec.Builder fun addAnnotation(annotation: KClass * ): FileSpec.Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): FileSpec.Builder Add an annotation to the file. The annotation must either have a file use-site target or not have a use-site target specified (in which case it will be changed to file ). fun addAnnotation(annotation: ClassName ): FileSpec.Builder fun addAnnotation(annotation: Class * ): FileSpec.Builder fun addAnnotation(annotation: KClass * ): FileSpec.Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addComment addComment fun addComment(format: String , vararg args: Any ): FileSpec.Builder","title":"Add comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-comment/#addcomment","text":"fun addComment(format: String , vararg args: Any ): FileSpec.Builder","title":"addComment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-function/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addFunction addFunction fun addFunction(funSpec: FunSpec ): FileSpec.Builder","title":"Add function"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-function/#addfunction","text":"fun addFunction(funSpec: FunSpec ): FileSpec.Builder","title":"addFunction"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-import/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addImport addImport fun addImport(constant: Enum * ): FileSpec.Builder fun addImport(class: Class * , vararg names: String ): FileSpec.Builder fun addImport(class: KClass * , vararg names: String ): FileSpec.Builder fun addImport(className: ClassName , vararg names: String ): FileSpec.Builder fun addImport(packageName: String , vararg names: String ): FileSpec.Builder","title":"Add import"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-import/#addimport","text":"fun addImport(constant: Enum * ): FileSpec.Builder fun addImport(class: Class * , vararg names: String ): FileSpec.Builder fun addImport(class: KClass * , vararg names: String ): FileSpec.Builder fun addImport(className: ClassName , vararg names: String ): FileSpec.Builder fun addImport(packageName: String , vararg names: String ): FileSpec.Builder","title":"addImport"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-property/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addProperty addProperty fun addProperty(propertySpec: PropertySpec ): FileSpec.Builder","title":"Add property"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-property/#addproperty","text":"fun addProperty(propertySpec: PropertySpec ): FileSpec.Builder","title":"addProperty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type-alias/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addTypeAlias addTypeAlias fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): FileSpec.Builder","title":"Add type alias"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type-alias/#addtypealias","text":"fun addTypeAlias(typeAliasSpec: TypeAliasSpec ): FileSpec.Builder","title":"addTypeAlias"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / addType addType fun addType(typeSpec: TypeSpec ): FileSpec.Builder","title":"Add type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/add-type/#addtype","text":"fun addType(typeSpec: TypeSpec ): FileSpec.Builder","title":"addType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / annotations annotations val annotations: MutableList AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/annotations/#annotations","text":"val annotations: MutableList AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / build build fun build(): FileSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/build/#build","text":"fun build(): FileSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/indent/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / indent indent fun indent(indent: String ): FileSpec.Builder","title":"Indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/indent/#indent","text":"fun indent(indent: String ): FileSpec.Builder","title":"indent"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / packageName packageName val packageName: String","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/package-name/#packagename","text":"val packageName: String","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / FileSpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-file-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. Types Name Summary Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder Properties Name Summary annotations val annotations: List AnnotationSpec body val body: CodeBlock delegateConstructor val delegateConstructor: String ? delegateConstructorArguments val delegateConstructorArguments: List CodeBlock isAccessor val isAccessor: Boolean isConstructor val isConstructor: Boolean kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier name val name: String parameters val parameters: List ParameterSpec receiverKdoc val receiverKdoc: CodeBlock receiverType val receiverType: TypeName ? returnKdoc val returnKdoc: CodeBlock returnType val returnType: TypeName ? typeVariables val typeVariables: List TypeVariableName Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): FunSpec.Builder toString fun toString(): String Companion Object Functions Name Summary builder fun builder(name: String ): FunSpec.Builder constructorBuilder fun constructorBuilder(): FunSpec.Builder getterBuilder fun getterBuilder(): FunSpec.Builder overriding fun overriding(method: ExecutableElement ): FunSpec.Builder Returns a new fun spec builder that overrides method . fun overriding(method: ExecutableElement , enclosing: DeclaredType , types: Types ): FunSpec.Builder Returns a new function spec builder that overrides method as a member of enclosing . This will resolve type parameters: for example overriding Comparable.compareTo in a type that implements Comparable Movie , the T parameter will be resolved to Movie . setterBuilder fun setterBuilder(): FunSpec.Builder Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#funspec","text":"class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration.","title":"FunSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#properties","text":"Name Summary annotations val annotations: List AnnotationSpec body val body: CodeBlock delegateConstructor val delegateConstructor: String ? delegateConstructorArguments val delegateConstructorArguments: List CodeBlock isAccessor val isAccessor: Boolean isConstructor val isConstructor: Boolean kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier name val name: String parameters val parameters: List ParameterSpec receiverKdoc val receiverKdoc: CodeBlock receiverType val receiverType: TypeName ? returnKdoc val returnKdoc: CodeBlock returnType val returnType: TypeName ? typeVariables val typeVariables: List TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): FunSpec.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String ): FunSpec.Builder constructorBuilder fun constructorBuilder(): FunSpec.Builder getterBuilder fun getterBuilder(): FunSpec.Builder overriding fun overriding(method: ExecutableElement ): FunSpec.Builder Returns a new fun spec builder that overrides method . fun overriding(method: ExecutableElement , enclosing: DeclaredType , types: Types ): FunSpec.Builder Returns a new function spec builder that overrides method as a member of enclosing . This will resolve type parameters: for example overriding Comparable.compareTo in a type that implements Comparable Movie , the T parameter will be resolved to Movie . setterBuilder fun setterBuilder(): FunSpec.Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / annotations annotations val annotations: List AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/annotations/#annotations","text":"val annotations: List AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/body/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / body body val body: CodeBlock","title":"Body"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/body/#body","text":"val body: CodeBlock","title":"body"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / builder builder @JvmStatic fun builder(name: String ): FunSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/builder/#builder","text":"@JvmStatic fun builder(name: String ): FunSpec.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/constructor-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / constructorBuilder constructorBuilder @JvmStatic fun constructorBuilder(): FunSpec.Builder","title":"Constructor builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/constructor-builder/#constructorbuilder","text":"@JvmStatic fun constructorBuilder(): FunSpec.Builder","title":"constructorBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor-arguments/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / delegateConstructorArguments delegateConstructorArguments val delegateConstructorArguments: List CodeBlock","title":"Delegate constructor arguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor-arguments/#delegateconstructorarguments","text":"val delegateConstructorArguments: List CodeBlock","title":"delegateConstructorArguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / delegateConstructor delegateConstructor val delegateConstructor: String ?","title":"Delegate constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/delegate-constructor/#delegateconstructor","text":"val delegateConstructor: String ?","title":"delegateConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/getter-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / getterBuilder getterBuilder @JvmStatic fun getterBuilder(): FunSpec.Builder","title":"Getter builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/getter-builder/#getterbuilder","text":"@JvmStatic fun getterBuilder(): FunSpec.Builder","title":"getterBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-accessor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / isAccessor isAccessor val isAccessor: Boolean","title":"Is accessor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-accessor/#isaccessor","text":"val isAccessor: Boolean","title":"isAccessor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / isConstructor isConstructor val isConstructor: Boolean","title":"Is constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/is-constructor/#isconstructor","text":"val isConstructor: Boolean","title":"isConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / kdoc kdoc val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / modifiers modifiers val modifiers: Set KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/modifiers/#modifiers","text":"val modifiers: Set KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/overriding/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / overriding overriding @JvmStatic fun overriding(method: ExecutableElement ): FunSpec.Builder Returns a new fun spec builder that overrides method . This will copy its visibility modifiers, type parameters, return type, name, parameters, and throws declarations. An override modifier will be added. @JvmStatic fun overriding(method: ExecutableElement , enclosing: DeclaredType , types: Types ): FunSpec.Builder Returns a new function spec builder that overrides method as a member of enclosing . This will resolve type parameters: for example overriding Comparable.compareTo in a type that implements Comparable Movie , the T parameter will be resolved to Movie . This will copy its visibility modifiers, type parameters, return type, name, parameters, and throws declarations. An override modifier will be added.","title":"Overriding"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/overriding/#overriding","text":"@JvmStatic fun overriding(method: ExecutableElement ): FunSpec.Builder Returns a new fun spec builder that overrides method . This will copy its visibility modifiers, type parameters, return type, name, parameters, and throws declarations. An override modifier will be added. @JvmStatic fun overriding(method: ExecutableElement , enclosing: DeclaredType , types: Types ): FunSpec.Builder Returns a new function spec builder that overrides method as a member of enclosing . This will resolve type parameters: for example overriding Comparable.compareTo in a type that implements Comparable Movie , the T parameter will be resolved to Movie . This will copy its visibility modifiers, type parameters, return type, name, parameters, and throws declarations. An override modifier will be added.","title":"overriding"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / parameters parameters val parameters: List ParameterSpec","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/parameters/#parameters","text":"val parameters: List ParameterSpec","title":"parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / receiverKdoc receiverKdoc val receiverKdoc: CodeBlock","title":"Receiver kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-kdoc/#receiverkdoc","text":"val receiverKdoc: CodeBlock","title":"receiverKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-type/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / receiverType receiverType val receiverType: TypeName ?","title":"Receiver type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/receiver-type/#receivertype","text":"val receiverType: TypeName ?","title":"receiverType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / returnKdoc returnKdoc val returnKdoc: CodeBlock","title":"Return kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-kdoc/#returnkdoc","text":"val returnKdoc: CodeBlock","title":"returnKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-type/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / returnType returnType val returnType: TypeName ?","title":"Return type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/return-type/#returntype","text":"val returnType: TypeName ?","title":"returnType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/setter-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / setterBuilder setterBuilder @JvmStatic fun setterBuilder(): FunSpec.Builder","title":"Setter builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/setter-builder/#setterbuilder","text":"@JvmStatic fun setterBuilder(): FunSpec.Builder","title":"setterBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / toBuilder toBuilder fun toBuilder(): FunSpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-builder/#tobuilder","text":"fun toBuilder(): FunSpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / typeVariables typeVariables val typeVariables: List TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/type-variables/#typevariables","text":"val typeVariables: List TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder Properties Name Summary annotations val annotations: MutableList AnnotationSpec modifiers val modifiers: MutableList KModifier originatingElements val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. parameters val parameters: MutableList ParameterSpec tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeVariables val typeVariables: MutableList TypeVariableName Functions Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): FunSpec.Builder fun addAnnotation(annotation: ClassName ): FunSpec.Builder fun addAnnotation(annotation: Class * ): FunSpec.Builder fun addAnnotation(annotation: KClass * ): FunSpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): FunSpec.Builder addCode fun addCode(format: String , vararg args: Any ?): FunSpec.Builder fun addCode(codeBlock: CodeBlock ): FunSpec.Builder addComment fun addComment(format: String , vararg args: Any ): FunSpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): FunSpec.Builder fun addKdoc(block: CodeBlock ): FunSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): FunSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): FunSpec.Builder addNamedCode fun addNamedCode(format: String , args: Map String , * ): FunSpec.Builder addParameter fun addParameter(parameterSpec: ParameterSpec ): FunSpec.Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: KClass * , vararg modifiers: KModifier ): FunSpec.Builder addParameters fun addParameters(parameterSpecs: Iterable ParameterSpec ): FunSpec.Builder addStatement fun addStatement(format: String , vararg args: Any ): FunSpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): FunSpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): FunSpec.Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder build fun build(): FunSpec callSuperConstructor fun callSuperConstructor(vararg args: String ): FunSpec.Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder callThisConstructor fun callThisConstructor(vararg args: String ): FunSpec.Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder endControlFlow fun endControlFlow(): FunSpec.Builder jvmModifiers fun jvmModifiers(modifiers: Iterable Modifier ): Unit nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder receiver fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder fun receiver(receiverType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder returns fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder fun returns(returnType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder Inherited Functions Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary jvmDefault fun FunSpec.Builder .jvmDefault(): FunSpec.Builder jvmName fun FunSpec.Builder .jvmName(name: String ): FunSpec.Builder jvmOverloads fun FunSpec.Builder .jvmOverloads(): FunSpec.Builder jvmStatic fun FunSpec.Builder .jvmStatic(): FunSpec.Builder jvmSuppressWildcards fun FunSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): FunSpec.Builder strictfp fun FunSpec.Builder .strictfp(): FunSpec.Builder synchronized fun FunSpec.Builder .synchronized(): FunSpec.Builder tag fun T : Any FunSpec.Builder .tag(tag: T ?): FunSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . throws fun FunSpec.Builder .throws(vararg exceptionClasses: KClass out Throwable ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: Type ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: TypeName ): FunSpec.Builder","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#builder","text":"class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList AnnotationSpec modifiers val modifiers: MutableList KModifier originatingElements val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. parameters val parameters: MutableList ParameterSpec tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeVariables val typeVariables: MutableList TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): FunSpec.Builder fun addAnnotation(annotation: ClassName ): FunSpec.Builder fun addAnnotation(annotation: Class * ): FunSpec.Builder fun addAnnotation(annotation: KClass * ): FunSpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): FunSpec.Builder addCode fun addCode(format: String , vararg args: Any ?): FunSpec.Builder fun addCode(codeBlock: CodeBlock ): FunSpec.Builder addComment fun addComment(format: String , vararg args: Any ): FunSpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): FunSpec.Builder fun addKdoc(block: CodeBlock ): FunSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): FunSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): FunSpec.Builder addNamedCode fun addNamedCode(format: String , args: Map String , * ): FunSpec.Builder addParameter fun addParameter(parameterSpec: ParameterSpec ): FunSpec.Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: KClass * , vararg modifiers: KModifier ): FunSpec.Builder addParameters fun addParameters(parameterSpecs: Iterable ParameterSpec ): FunSpec.Builder addStatement fun addStatement(format: String , vararg args: Any ): FunSpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): FunSpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): FunSpec.Builder beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder build fun build(): FunSpec callSuperConstructor fun callSuperConstructor(vararg args: String ): FunSpec.Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder callThisConstructor fun callThisConstructor(vararg args: String ): FunSpec.Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder endControlFlow fun endControlFlow(): FunSpec.Builder jvmModifiers fun jvmModifiers(modifiers: Iterable Modifier ): Unit nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder receiver fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder fun receiver(receiverType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder returns fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder fun returns(returnType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#inherited-functions","text":"Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/#extension-functions","text":"Name Summary jvmDefault fun FunSpec.Builder .jvmDefault(): FunSpec.Builder jvmName fun FunSpec.Builder .jvmName(name: String ): FunSpec.Builder jvmOverloads fun FunSpec.Builder .jvmOverloads(): FunSpec.Builder jvmStatic fun FunSpec.Builder .jvmStatic(): FunSpec.Builder jvmSuppressWildcards fun FunSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): FunSpec.Builder strictfp fun FunSpec.Builder .strictfp(): FunSpec.Builder synchronized fun FunSpec.Builder .synchronized(): FunSpec.Builder tag fun T : Any FunSpec.Builder .tag(tag: T ?): FunSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . throws fun FunSpec.Builder .throws(vararg exceptionClasses: KClass out Throwable ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: Type ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: TypeName ): FunSpec.Builder","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addAnnotation addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): FunSpec.Builder fun addAnnotation(annotation: ClassName ): FunSpec.Builder fun addAnnotation(annotation: Class * ): FunSpec.Builder fun addAnnotation(annotation: KClass * ): FunSpec.Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): FunSpec.Builder fun addAnnotation(annotation: ClassName ): FunSpec.Builder fun addAnnotation(annotation: Class * ): FunSpec.Builder fun addAnnotation(annotation: KClass * ): FunSpec.Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addAnnotations addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): FunSpec.Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): FunSpec.Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addCode addCode fun addCode(format: String , vararg args: Any ?): FunSpec.Builder fun addCode(codeBlock: CodeBlock ): FunSpec.Builder","title":"Add code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-code/#addcode","text":"fun addCode(format: String , vararg args: Any ?): FunSpec.Builder fun addCode(codeBlock: CodeBlock ): FunSpec.Builder","title":"addCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-comment/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addComment addComment fun addComment(format: String , vararg args: Any ): FunSpec.Builder","title":"Add comment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-comment/#addcomment","text":"fun addComment(format: String , vararg args: Any ): FunSpec.Builder","title":"addComment"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addKdoc addKdoc fun addKdoc(format: String , vararg args: Any ): FunSpec.Builder fun addKdoc(block: CodeBlock ): FunSpec.Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): FunSpec.Builder fun addKdoc(block: CodeBlock ): FunSpec.Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addModifiers addModifiers fun addModifiers(vararg modifiers: KModifier ): FunSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): FunSpec.Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): FunSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): FunSpec.Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-named-code/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addNamedCode addNamedCode fun addNamedCode(format: String , args: Map String , * ): FunSpec.Builder","title":"Add named code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-named-code/#addnamedcode","text":"fun addNamedCode(format: String , args: Map String , * ): FunSpec.Builder","title":"addNamedCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addParameter addParameter fun addParameter(parameterSpec: ParameterSpec ): FunSpec.Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: KClass * , vararg modifiers: KModifier ): FunSpec.Builder","title":"Add parameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameter/#addparameter","text":"fun addParameter(parameterSpec: ParameterSpec ): FunSpec.Builder fun addParameter(name: String , type: TypeName , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: Type , vararg modifiers: KModifier ): FunSpec.Builder fun addParameter(name: String , type: KClass * , vararg modifiers: KModifier ): FunSpec.Builder","title":"addParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addParameters addParameters fun addParameters(parameterSpecs: Iterable ParameterSpec ): FunSpec.Builder","title":"Add parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-parameters/#addparameters","text":"fun addParameters(parameterSpecs: Iterable ParameterSpec ): FunSpec.Builder","title":"addParameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-statement/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addStatement addStatement fun addStatement(format: String , vararg args: Any ): FunSpec.Builder","title":"Add statement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-statement/#addstatement","text":"fun addStatement(format: String , vararg args: Any ): FunSpec.Builder","title":"addStatement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addTypeVariable addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): FunSpec.Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): FunSpec.Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / addTypeVariables addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): FunSpec.Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable TypeVariableName ): FunSpec.Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / annotations annotations val annotations: MutableList AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/annotations/#annotations","text":"val annotations: MutableList AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/begin-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / beginControlFlow beginControlFlow fun beginControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder Parameters controlFlow - the control flow construct and its code, such as if (foo == 5) .","title":"Begin control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/begin-control-flow/#begincontrolflow","text":"fun beginControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder","title":"beginControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/begin-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as if (foo == 5) .","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / build build fun build(): FunSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/build/#build","text":"fun build(): FunSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-super-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / callSuperConstructor callSuperConstructor fun callSuperConstructor(vararg args: String ): FunSpec.Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder","title":"Call super constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-super-constructor/#callsuperconstructor","text":"fun callSuperConstructor(vararg args: String ): FunSpec.Builder fun callSuperConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder","title":"callSuperConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-this-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / callThisConstructor callThisConstructor fun callThisConstructor(vararg args: String ): FunSpec.Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder","title":"Call this constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/call-this-constructor/#callthisconstructor","text":"fun callThisConstructor(vararg args: String ): FunSpec.Builder fun callThisConstructor(vararg args: CodeBlock = emptyArray()): FunSpec.Builder","title":"callThisConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/end-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / endControlFlow endControlFlow fun endControlFlow(): FunSpec.Builder","title":"End control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/end-control-flow/#endcontrolflow","text":"fun endControlFlow(): FunSpec.Builder","title":"endControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/jvm-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / jvmModifiers jvmModifiers fun jvmModifiers(modifiers: Iterable Modifier ): Unit","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/jvm-modifiers/#jvmmodifiers","text":"fun jvmModifiers(modifiers: Iterable Modifier ): Unit","title":"jvmModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / modifiers modifiers val modifiers: MutableList KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableList KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/next-control-flow/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / nextControlFlow nextControlFlow fun nextControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder Parameters controlFlow - the control flow construct and its code, such as else if (foo == 10) .","title":"Next control flow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/next-control-flow/#nextcontrolflow","text":"fun nextControlFlow(controlFlow: String , vararg args: Any ): FunSpec.Builder","title":"nextControlFlow"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/next-control-flow/#parameters","text":"controlFlow - the control flow construct and its code, such as else if (foo == 10) .","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / originatingElements originatingElements val originatingElements: MutableList Element Overrides Builder.originatingElements Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/originating-elements/#originatingelements","text":"val originatingElements: MutableList Element Overrides Builder.originatingElements Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / parameters parameters val parameters: MutableList ParameterSpec","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/parameters/#parameters","text":"val parameters: MutableList ParameterSpec","title":"parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/receiver/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / receiver receiver @JvmOverloads fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder @JvmOverloads fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder @JvmOverloads fun receiver(receiverType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder","title":"Receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/receiver/#receiver","text":"@JvmOverloads fun receiver(receiverType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder @JvmOverloads fun receiver(receiverType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder @JvmOverloads fun receiver(receiverType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun receiver(receiverType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder","title":"receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/returns/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / returns returns @JvmOverloads fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder @JvmOverloads fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder @JvmOverloads fun returns(returnType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder","title":"Returns"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/returns/#returns","text":"@JvmOverloads fun returns(returnType: TypeName , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder @JvmOverloads fun returns(returnType: Type , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: Type , kdoc: String , vararg args: Any ): FunSpec.Builder @JvmOverloads fun returns(returnType: KClass * , kdoc: CodeBlock = CodeBlock.EMPTY): FunSpec.Builder fun returns(returnType: KClass * , kdoc: String , vararg args: Any ): FunSpec.Builder","title":"returns"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / FunSpec / Builder / typeVariables typeVariables val typeVariables: MutableList TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-fun-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableList TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier KModifier enum class KModifier Enum Values Name Summary PUBLIC PROTECTED PRIVATE INTERNAL EXPECT ACTUAL FINAL OPEN ABSTRACT SEALED CONST EXTERNAL OVERRIDE LATEINIT TAILREC VARARG SUSPEND INNER ENUM ANNOTATION COMPANION INLINE NOINLINE CROSSINLINE REIFIED INFIX OPERATOR DATA IN OUT","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/#kmodifier","text":"enum class KModifier","title":"KModifier"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/#enum-values","text":"Name Summary PUBLIC PROTECTED PRIVATE INTERNAL EXPECT ACTUAL FINAL OPEN ABSTRACT SEALED CONST EXTERNAL OVERRIDE LATEINIT TAILREC VARARG SUSPEND INNER ENUM ANNOTATION COMPANION INLINE NOINLINE CROSSINLINE REIFIED INFIX OPERATOR DATA IN OUT","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-b-s-t-r-a-c-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ABSTRACT ABSTRACT ABSTRACT","title":" a b s t r a c t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-b-s-t-r-a-c-t/#abstract","text":"ABSTRACT","title":"ABSTRACT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-c-t-u-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ACTUAL ACTUAL ACTUAL","title":" a c t u a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-c-t-u-a-l/#actual","text":"ACTUAL","title":"ACTUAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-n-n-o-t-a-t-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ANNOTATION ANNOTATION ANNOTATION","title":" a n n o t a t i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-a-n-n-o-t-a-t-i-o-n/#annotation","text":"ANNOTATION","title":"ANNOTATION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-m-p-a-n-i-o-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / COMPANION COMPANION COMPANION","title":" c o m p a n i o n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-m-p-a-n-i-o-n/#companion","text":"COMPANION","title":"COMPANION"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-n-s-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / CONST CONST CONST","title":" c o n s t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-o-n-s-t/#const","text":"CONST","title":"CONST"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-r-o-s-s-i-n-l-i-n-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / CROSSINLINE CROSSINLINE CROSSINLINE","title":" c r o s s i n l i n e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-c-r-o-s-s-i-n-l-i-n-e/#crossinline","text":"CROSSINLINE","title":"CROSSINLINE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-d-a-t-a/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / DATA DATA DATA","title":" d a t a"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-d-a-t-a/#data","text":"DATA","title":"DATA"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-n-u-m/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / ENUM ENUM ENUM","title":" e n u m"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-n-u-m/#enum","text":"ENUM","title":"ENUM"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-p-e-c-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / EXPECT EXPECT EXPECT","title":" e x p e c t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-p-e-c-t/#expect","text":"EXPECT","title":"EXPECT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-t-e-r-n-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / EXTERNAL EXTERNAL EXTERNAL","title":" e x t e r n a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-e-x-t-e-r-n-a-l/#external","text":"EXTERNAL","title":"EXTERNAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-f-i-n-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / FINAL FINAL FINAL","title":" f i n a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-f-i-n-a-l/#final","text":"FINAL","title":"FINAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-f-i-x/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INFIX INFIX INFIX","title":" i n f i x"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-f-i-x/#infix","text":"INFIX","title":"INFIX"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-l-i-n-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INLINE INLINE INLINE","title":" i n l i n e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-l-i-n-e/#inline","text":"INLINE","title":"INLINE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-n-e-r/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INNER INNER INNER","title":" i n n e r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-n-e-r/#inner","text":"INNER","title":"INNER"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-t-e-r-n-a-l/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / INTERNAL INTERNAL INTERNAL","title":" i n t e r n a l"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n-t-e-r-n-a-l/#internal","text":"INTERNAL","title":"INTERNAL"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / IN IN IN","title":" i n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-i-n/#in","text":"IN","title":"IN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-l-a-t-e-i-n-i-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / LATEINIT LATEINIT LATEINIT","title":" l a t e i n i t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-l-a-t-e-i-n-i-t/#lateinit","text":"LATEINIT","title":"LATEINIT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-n-o-i-n-l-i-n-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / NOINLINE NOINLINE NOINLINE","title":" n o i n l i n e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-n-o-i-n-l-i-n-e/#noinline","text":"NOINLINE","title":"NOINLINE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-n/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OPEN OPEN OPEN","title":" o p e n"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-n/#open","text":"OPEN","title":"OPEN"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-r-a-t-o-r/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OPERATOR OPERATOR OPERATOR","title":" o p e r a t o r"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-p-e-r-a-t-o-r/#operator","text":"OPERATOR","title":"OPERATOR"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-u-t/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OUT OUT OUT","title":" o u t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-u-t/#out","text":"OUT","title":"OUT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-v-e-r-r-i-d-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / OVERRIDE OVERRIDE OVERRIDE","title":" o v e r r i d e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-o-v-e-r-r-i-d-e/#override","text":"OVERRIDE","title":"OVERRIDE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-i-v-a-t-e/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / PRIVATE PRIVATE PRIVATE","title":" p r i v a t e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-i-v-a-t-e/#private","text":"PRIVATE","title":"PRIVATE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-o-t-e-c-t-e-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / PROTECTED PROTECTED PROTECTED","title":" p r o t e c t e d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-r-o-t-e-c-t-e-d/#protected","text":"PROTECTED","title":"PROTECTED"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-u-b-l-i-c/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / PUBLIC PUBLIC PUBLIC","title":" p u b l i c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-p-u-b-l-i-c/#public","text":"PUBLIC","title":"PUBLIC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-r-e-i-f-i-e-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / REIFIED REIFIED REIFIED","title":" r e i f i e d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-r-e-i-f-i-e-d/#reified","text":"REIFIED","title":"REIFIED"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-e-a-l-e-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / SEALED SEALED SEALED","title":" s e a l e d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-e-a-l-e-d/#sealed","text":"SEALED","title":"SEALED"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-u-s-p-e-n-d/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / SUSPEND SUSPEND SUSPEND","title":" s u s p e n d"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-s-u-s-p-e-n-d/#suspend","text":"SUSPEND","title":"SUSPEND"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-t-a-i-l-r-e-c/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / TAILREC TAILREC TAILREC","title":" t a i l r e c"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-t-a-i-l-r-e-c/#tailrec","text":"TAILREC","title":"TAILREC"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-v-a-r-a-r-g/","text":"kotlinpoet / com.squareup.kotlinpoet / KModifier / VARARG VARARG VARARG","title":" v a r a r g"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-k-modifier/-v-a-r-a-r-g/#vararg","text":"VARARG","title":"VARARG"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName LambdaTypeName class LambdaTypeName : TypeName Properties Name Summary isSuspending val isSuspending: Boolean parameters val parameters: List ParameterSpec receiver val receiver: TypeName ? returnType val returnType: TypeName Inherited Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): LambdaTypeName fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), suspending: Boolean = this.isSuspending): LambdaTypeName Inherited Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Companion Object Functions Name Summary get fun get(receiver: TypeName ? = null, parameters: List ParameterSpec = emptyList(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Returns a lambda type with returnType and parameters listed in parameters . Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#lambdatypename","text":"class LambdaTypeName : TypeName","title":"LambdaTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#properties","text":"Name Summary isSuspending val isSuspending: Boolean parameters val parameters: List ParameterSpec receiver val receiver: TypeName ? returnType val returnType: TypeName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#inherited-properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Inherited Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): LambdaTypeName fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), suspending: Boolean = this.isSuspending): LambdaTypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#inherited-functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#companion-object-functions","text":"Name Summary get fun get(receiver: TypeName ? = null, parameters: List ParameterSpec = emptyList(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Returns a lambda type with returnType and parameters listed in parameters .","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / copy copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): LambdaTypeName Overrides TypeName.copy fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), suspending: Boolean = this.isSuspending): LambdaTypeName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List AnnotationSpec ): LambdaTypeName Overrides TypeName.copy fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), suspending: Boolean = this.isSuspending): LambdaTypeName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/get/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / get get @JvmStatic fun get(receiver: TypeName ? = null, parameters: List ParameterSpec = emptyList(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Returns a lambda type with returnType and parameters listed in parameters .","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/get/#get","text":"@JvmStatic fun get(receiver: TypeName ? = null, parameters: List ParameterSpec = emptyList(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: TypeName = emptyArray(), returnType: TypeName ): LambdaTypeName @JvmStatic fun get(receiver: TypeName ? = null, vararg parameters: ParameterSpec = emptyArray(), returnType: TypeName ): LambdaTypeName Returns a lambda type with returnType and parameters listed in parameters .","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/is-suspending/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / isSuspending isSuspending val isSuspending: Boolean","title":"Is suspending"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/is-suspending/#issuspending","text":"val isSuspending: Boolean","title":"isSuspending"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / parameters parameters val parameters: List ParameterSpec","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/parameters/#parameters","text":"val parameters: List ParameterSpec","title":"parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/receiver/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / receiver receiver val receiver: TypeName ?","title":"Receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/receiver/#receiver","text":"val receiver: TypeName ?","title":"receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/return-type/","text":"kotlinpoet / com.squareup.kotlinpoet / LambdaTypeName / returnType returnType val returnType: TypeName","title":"Return type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-lambda-type-name/return-type/#returntype","text":"val returnType: TypeName","title":"returnType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName MemberName data class MemberName Represents the name of a member (such as a function or a property). Parameters packageName - e.g. kotlin.collections enclosingClassName - e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class simpleName - e.g. isBlank , size Constructors Name Summary init MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String ) Properties Name Summary canonicalName val canonicalName: String Fully qualified name using . as a separator, like kotlin.String.isBlank . enclosingClassName val enclosingClassName: ClassName ? e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class packageName val packageName: String e.g. kotlin.collections simpleName val simpleName: String e.g. isBlank , size Functions Name Summary reference fun reference(): CodeBlock Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. toString fun toString(): String Companion Object Functions Name Summary member fun ClassName .member(simpleName: String ): MemberName fun KClass * .member(simpleName: String ): MemberName fun Class * .member(simpleName: String ): MemberName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#membername","text":"data class MemberName Represents the name of a member (such as a function or a property).","title":"MemberName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#parameters","text":"packageName - e.g. kotlin.collections enclosingClassName - e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class simpleName - e.g. isBlank , size","title":"Parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#constructors","text":"Name Summary init MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String )","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#properties","text":"Name Summary canonicalName val canonicalName: String Fully qualified name using . as a separator, like kotlin.String.isBlank . enclosingClassName val enclosingClassName: ClassName ? e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class packageName val packageName: String e.g. kotlin.collections simpleName val simpleName: String e.g. isBlank , size","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#functions","text":"Name Summary reference fun reference(): CodeBlock Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/#companion-object-functions","text":"Name Summary member fun ClassName .member(simpleName: String ): MemberName fun KClass * .member(simpleName: String ): MemberName fun Class * .member(simpleName: String ): MemberName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / init init MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String )","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/-init-/#init","text":"MemberName(packageName: String , simpleName: String ) MemberName(enclosingClassName: ClassName , simpleName: String )","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/canonical-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / canonicalName canonicalName val canonicalName: String Fully qualified name using . as a separator, like kotlin.String.isBlank .","title":"Canonical name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/canonical-name/#canonicalname","text":"val canonicalName: String Fully qualified name using . as a separator, like kotlin.String.isBlank .","title":"canonicalName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/enclosing-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / enclosingClassName enclosingClassName val enclosingClassName: ClassName ? e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class","title":"Enclosing class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/enclosing-class-name/#enclosingclassname","text":"val enclosingClassName: ClassName ? e.g. Map.Entry.Companion , if the member is declared inside the companion object of the Map.Entry class","title":"enclosingClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/member/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / member member @JvmStatic inline fun ClassName .member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun KClass * .member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun Class * .member(simpleName: String ): MemberName","title":"Member"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/member/#member","text":"@JvmStatic inline fun ClassName .member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun KClass * .member(simpleName: String ): MemberName @JvmStatic @JvmName(\"get\") fun Class * .member(simpleName: String ): MemberName","title":"member"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/package-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / packageName packageName val packageName: String e.g. kotlin.collections","title":"Package name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/package-name/#packagename","text":"val packageName: String e.g. kotlin.collections","title":"packageName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/reference/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / reference reference fun reference(): CodeBlock Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level member with a conflicting name.","title":"Reference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/reference/#reference","text":"fun reference(): CodeBlock Callable reference to this member. Emits enclosingClassName if it exists, followed by the reference operator :: , followed by either simpleName or the fully-qualified name if this is a top-level member. Note: As ::$packageName.$simpleName is not valid syntax, an aliased import may be required for a top-level member with a conflicting name.","title":"reference"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/simple-name/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / simpleName simpleName val simpleName: String e.g. isBlank , size","title":"Simple name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/simple-name/#simplename","text":"val simpleName: String e.g. isBlank , size","title":"simpleName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / MemberName / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-member-name/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator NameAllocator class NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: val nameAllocator = NameAllocator() for (property in properties) { nameAllocator.newName(property.name, property) } nameAllocator.newName( sb , string builder ) Pass a unique tag object to each allocation. The tag scopes the name, and can be used to look up the allocated name later. Typically the tag is the object that is being named. In the above example we use property for the user-supplied property names, and \"string builder\" for our constant string builder. Once we ve allocated names we can use them when generating code: val builder = FunSpec.builder( toString ) .addModifiers(KModifier.OVERRIDE) .returns(String::class) builder.addStatement( val %N = %T() , nameAllocator.get( string builder ), StringBuilder::class) for (property in properties) { builder.addStatement( %N.append(%N) , nameAllocator.get( string builder ), nameAllocator.get(property)) } builder.addStatement( return %N.toString() , nameAllocator.get( string builder )) return builder.build() The above code generates unique names if presented with conflicts. Given user-supplied properties with names ab and sb this generates the following: override fun toString(): kotlin.String { val sb_ = java.lang.StringBuilder() sb_.append(ab) sb_.append(sb) return sb_.toString() } The underscore is appended to sb to avoid conflicting with the user-supplied sb property. Underscores are also prefixed for names that start with a digit, and used to replace name-unsafe characters like space or dash. When dealing with multiple independent inner scopes, use a copy of the NameAllocator used for the outer scope to further refine name allocation for a specific inner scope. Constructors Name Summary init NameAllocator() Functions Name Summary copy fun copy(): NameAllocator Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. get operator fun get(tag: Any ): String Retrieve a name created with NameAllocator.newName . newName fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/#nameallocator","text":"class NameAllocator Assigns Kotlin identifier names to avoid collisions, keywords, and invalid characters. To use, first create an instance and allocate all of the names that you need. Typically this is a mix of user-supplied names and constants: val nameAllocator = NameAllocator() for (property in properties) { nameAllocator.newName(property.name, property) } nameAllocator.newName( sb , string builder ) Pass a unique tag object to each allocation. The tag scopes the name, and can be used to look up the allocated name later. Typically the tag is the object that is being named. In the above example we use property for the user-supplied property names, and \"string builder\" for our constant string builder. Once we ve allocated names we can use them when generating code: val builder = FunSpec.builder( toString ) .addModifiers(KModifier.OVERRIDE) .returns(String::class) builder.addStatement( val %N = %T() , nameAllocator.get( string builder ), StringBuilder::class) for (property in properties) { builder.addStatement( %N.append(%N) , nameAllocator.get( string builder ), nameAllocator.get(property)) } builder.addStatement( return %N.toString() , nameAllocator.get( string builder )) return builder.build() The above code generates unique names if presented with conflicts. Given user-supplied properties with names ab and sb this generates the following: override fun toString(): kotlin.String { val sb_ = java.lang.StringBuilder() sb_.append(ab) sb_.append(sb) return sb_.toString() } The underscore is appended to sb to avoid conflicting with the user-supplied sb property. Underscores are also prefixed for names that start with a digit, and used to replace name-unsafe characters like space or dash. When dealing with multiple independent inner scopes, use a copy of the NameAllocator used for the outer scope to further refine name allocation for a specific inner scope.","title":"NameAllocator"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/#constructors","text":"Name Summary init NameAllocator()","title":"Constructors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/#functions","text":"Name Summary copy fun copy(): NameAllocator Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. get operator fun get(tag: Any ): String Retrieve a name created with NameAllocator.newName . newName fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get .","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/-init-/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / init init NameAllocator()","title":" init "},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/-init-/#init","text":"NameAllocator()","title":"&lt;init&gt;"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / copy copy fun copy(): NameAllocator Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. Return A deep copy of this NameAllocator.","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/copy/#copy","text":"fun copy(): NameAllocator Create a deep copy of this NameAllocator. Useful to create multiple independent refinements of a NameAllocator to be used in the respective definition of multiples, independently-scoped, inner code blocks. Return A deep copy of this NameAllocator.","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/get/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / get get operator fun get(tag: Any ): String Retrieve a name created with NameAllocator.newName .","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/get/#get","text":"operator fun get(tag: Any ): String Retrieve a name created with NameAllocator.newName .","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/new-name/","text":"kotlinpoet / com.squareup.kotlinpoet / NameAllocator / newName newName @JvmOverloads fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get .","title":"New name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-name-allocator/new-name/#newname","text":"@JvmOverloads fun newName(suggestion: String , tag: Any = UUID.randomUUID().toString()): String Return a new name using suggestion that will not be a Java identifier or clash with other names. The returned value can be queried multiple times by passing tag to NameAllocator.get .","title":"newName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder OriginatingElementsHolder interface OriginatingElementsHolder A type that can have originating elements . Types Name Summary Builder interface Builder out T : OriginatingElementsHolder.Builder T The builder analogue to OriginatingElementsHolder types. Properties Name Summary originatingElements abstract val originatingElements: List Element The originating elements of this type. Inheritors Name Summary FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#originatingelementsholder","text":"interface OriginatingElementsHolder A type that can have originating elements .","title":"OriginatingElementsHolder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#types","text":"Name Summary Builder interface Builder out T : OriginatingElementsHolder.Builder T The builder analogue to OriginatingElementsHolder types.","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#properties","text":"Name Summary originatingElements abstract val originatingElements: List Element The originating elements of this type.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/#inheritors","text":"Name Summary FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration.","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / originatingElements originatingElements abstract val originatingElements: List Element The originating elements of this type.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/originating-elements/#originatingelements","text":"abstract val originatingElements: List Element The originating elements of this type.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / Builder Builder interface Builder out T : OriginatingElementsHolder.Builder T The builder analogue to OriginatingElementsHolder types. Properties Name Summary originatingElements abstract val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. Functions Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. Inheritors Name Summary Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#builder","text":"interface Builder out T : OriginatingElementsHolder.Builder T The builder analogue to OriginatingElementsHolder types.","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#properties","text":"Name Summary originatingElements abstract val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#functions","text":"Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements.","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/#inheritors","text":"Name Summary Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/add-originating-element/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / Builder / addOriginatingElement addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements.","title":"Add originating element"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/add-originating-element/#addoriginatingelement","text":"open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements.","title":"addOriginatingElement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / OriginatingElementsHolder / Builder / originatingElements originatingElements abstract val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-originating-elements-holder/-builder/originating-elements/#originatingelements","text":"abstract val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec ParameterSpec class ParameterSpec : Taggable A generated parameter declaration. Types Name Summary Builder class Builder : Taggable.Builder ParameterSpec.Builder Properties Name Summary annotations val annotations: List AnnotationSpec defaultValue val defaultValue: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier name val name: String type val type: TypeName Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): ParameterSpec.Builder toString fun toString(): String Companion Object Functions Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): ParameterSpec.Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): ParameterSpec.Builder fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): ParameterSpec.Builder get fun get(element: VariableElement ): ParameterSpec parametersOf fun parametersOf(method: ExecutableElement ): List ParameterSpec unnamed fun unnamed(type: KClass * ): ParameterSpec fun unnamed(type: Type ): ParameterSpec fun unnamed(type: TypeName ): ParameterSpec Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#parameterspec","text":"class ParameterSpec : Taggable A generated parameter declaration.","title":"ParameterSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder ParameterSpec.Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#properties","text":"Name Summary annotations val annotations: List AnnotationSpec defaultValue val defaultValue: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier name val name: String type val type: TypeName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): ParameterSpec.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): ParameterSpec.Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): ParameterSpec.Builder fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): ParameterSpec.Builder get fun get(element: VariableElement ): ParameterSpec parametersOf fun parametersOf(method: ExecutableElement ): List ParameterSpec unnamed fun unnamed(type: KClass * ): ParameterSpec fun unnamed(type: Type ): ParameterSpec fun unnamed(type: TypeName ): ParameterSpec","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / annotations annotations val annotations: List AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/annotations/#annotations","text":"val annotations: List AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / builder builder @JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): ParameterSpec.Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): ParameterSpec.Builder @JvmStatic fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): ParameterSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/builder/#builder","text":"@JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): ParameterSpec.Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): ParameterSpec.Builder @JvmStatic fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): ParameterSpec.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/default-value/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / defaultValue defaultValue val defaultValue: CodeBlock ?","title":"Default value"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/default-value/#defaultvalue","text":"val defaultValue: CodeBlock ?","title":"defaultValue"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/get/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / get get @JvmStatic fun get(element: VariableElement ): ParameterSpec","title":"Get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/get/#get","text":"@JvmStatic fun get(element: VariableElement ): ParameterSpec","title":"get"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / kdoc kdoc val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / modifiers modifiers val modifiers: Set KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/modifiers/#modifiers","text":"val modifiers: Set KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/parameters-of/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / parametersOf parametersOf @JvmStatic fun parametersOf(method: ExecutableElement ): List ParameterSpec","title":"Parameters of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/parameters-of/#parametersof","text":"@JvmStatic fun parametersOf(method: ExecutableElement ): List ParameterSpec","title":"parametersOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / toBuilder toBuilder fun toBuilder(name: String = this.name, type: TypeName = this.type): ParameterSpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-builder/#tobuilder","text":"fun toBuilder(name: String = this.name, type: TypeName = this.type): ParameterSpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/type/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / type type val type: TypeName","title":"Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/type/#type","text":"val type: TypeName","title":"type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/unnamed/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / unnamed unnamed @JvmStatic fun unnamed(type: KClass * ): ParameterSpec @JvmStatic fun unnamed(type: Type ): ParameterSpec @JvmStatic fun unnamed(type: TypeName ): ParameterSpec","title":"Unnamed"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/unnamed/#unnamed","text":"@JvmStatic fun unnamed(type: KClass * ): ParameterSpec @JvmStatic fun unnamed(type: Type ): ParameterSpec @JvmStatic fun unnamed(type: TypeName ): ParameterSpec","title":"unnamed"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder Builder class Builder : Taggable.Builder ParameterSpec.Builder Properties Name Summary annotations val annotations: MutableList AnnotationSpec kdoc val kdoc: CodeBlock.Builder modifiers val modifiers: MutableList KModifier tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. Functions Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): ParameterSpec.Builder fun addAnnotation(annotation: ClassName ): ParameterSpec.Builder fun addAnnotation(annotation: Class * ): ParameterSpec.Builder fun addAnnotation(annotation: KClass * ): ParameterSpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): ParameterSpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): ParameterSpec.Builder fun addKdoc(block: CodeBlock ): ParameterSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): ParameterSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): ParameterSpec.Builder build fun build(): ParameterSpec defaultValue fun defaultValue(format: String , vararg args: Any ?): ParameterSpec.Builder fun defaultValue(codeBlock: CodeBlock ): ParameterSpec.Builder jvmModifiers fun jvmModifiers(modifiers: Iterable Modifier ): ParameterSpec.Builder Inherited Functions Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary tag fun T : Any ParameterSpec.Builder .tag(tag: T ?): ParameterSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#builder","text":"class Builder : Taggable.Builder ParameterSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList AnnotationSpec kdoc val kdoc: CodeBlock.Builder modifiers val modifiers: MutableList KModifier tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): ParameterSpec.Builder fun addAnnotation(annotation: ClassName ): ParameterSpec.Builder fun addAnnotation(annotation: Class * ): ParameterSpec.Builder fun addAnnotation(annotation: KClass * ): ParameterSpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): ParameterSpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): ParameterSpec.Builder fun addKdoc(block: CodeBlock ): ParameterSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): ParameterSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): ParameterSpec.Builder build fun build(): ParameterSpec defaultValue fun defaultValue(format: String , vararg args: Any ?): ParameterSpec.Builder fun defaultValue(codeBlock: CodeBlock ): ParameterSpec.Builder jvmModifiers fun jvmModifiers(modifiers: Iterable Modifier ): ParameterSpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#inherited-functions","text":"Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/#extension-functions","text":"Name Summary tag fun T : Any ParameterSpec.Builder .tag(tag: T ?): ParameterSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addAnnotation addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): ParameterSpec.Builder fun addAnnotation(annotation: ClassName ): ParameterSpec.Builder fun addAnnotation(annotation: Class * ): ParameterSpec.Builder fun addAnnotation(annotation: KClass * ): ParameterSpec.Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): ParameterSpec.Builder fun addAnnotation(annotation: ClassName ): ParameterSpec.Builder fun addAnnotation(annotation: Class * ): ParameterSpec.Builder fun addAnnotation(annotation: KClass * ): ParameterSpec.Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addAnnotations addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): ParameterSpec.Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): ParameterSpec.Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addKdoc addKdoc fun addKdoc(format: String , vararg args: Any ): ParameterSpec.Builder fun addKdoc(block: CodeBlock ): ParameterSpec.Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): ParameterSpec.Builder fun addKdoc(block: CodeBlock ): ParameterSpec.Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / addModifiers addModifiers fun addModifiers(vararg modifiers: KModifier ): ParameterSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): ParameterSpec.Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): ParameterSpec.Builder fun addModifiers(modifiers: Iterable KModifier ): ParameterSpec.Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / annotations annotations val annotations: MutableList AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/annotations/#annotations","text":"val annotations: MutableList AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / build build fun build(): ParameterSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/build/#build","text":"fun build(): ParameterSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/default-value/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / defaultValue defaultValue fun defaultValue(format: String , vararg args: Any ?): ParameterSpec.Builder fun defaultValue(codeBlock: CodeBlock ): ParameterSpec.Builder","title":"Default value"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/default-value/#defaultvalue","text":"fun defaultValue(format: String , vararg args: Any ?): ParameterSpec.Builder fun defaultValue(codeBlock: CodeBlock ): ParameterSpec.Builder","title":"defaultValue"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/jvm-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / jvmModifiers jvmModifiers fun jvmModifiers(modifiers: Iterable Modifier ): ParameterSpec.Builder","title":"Jvm modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/jvm-modifiers/#jvmmodifiers","text":"fun jvmModifiers(modifiers: Iterable Modifier ): ParameterSpec.Builder","title":"jvmModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / kdoc kdoc val kdoc: CodeBlock.Builder","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/kdoc/#kdoc","text":"val kdoc: CodeBlock.Builder","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / modifiers modifiers val modifiers: MutableList KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableList KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterSpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameter-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName ParameterizedTypeName class ParameterizedTypeName : TypeName Properties Name Summary rawType val rawType: ClassName typeArguments val typeArguments: List TypeName Inherited Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ParameterizedTypeName nestedClass fun nestedClass(name: String , typeArguments: List TypeName ): ParameterizedTypeName Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments . plusParameter fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass * ): ParameterizedTypeName fun plusParameter(typeArgument: Class * ): ParameterizedTypeName Inherited Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Companion Object Functions Name Summary parameterizedBy fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName fun KClass * .parameterizedBy(vararg typeArguments: KClass * ): ParameterizedTypeName fun Class * .parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName Returns a parameterized type, applying typeArguments to this . plusParameter fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun KClass * .plusParameter(typeArgument: KClass * ): ParameterizedTypeName fun Class * .plusParameter(typeArgument: Class * ): ParameterizedTypeName Returns a parameterized type, applying typeArgument to this . Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#parameterizedtypename","text":"class ParameterizedTypeName : TypeName","title":"ParameterizedTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#properties","text":"Name Summary rawType val rawType: ClassName typeArguments val typeArguments: List TypeName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#inherited-properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Inherited Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ParameterizedTypeName nestedClass fun nestedClass(name: String , typeArguments: List TypeName ): ParameterizedTypeName Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments . plusParameter fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass * ): ParameterizedTypeName fun plusParameter(typeArgument: Class * ): ParameterizedTypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#inherited-functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#companion-object-functions","text":"Name Summary parameterizedBy fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName fun KClass * .parameterizedBy(vararg typeArguments: KClass * ): ParameterizedTypeName fun Class * .parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName Returns a parameterized type, applying typeArguments to this . plusParameter fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun KClass * .plusParameter(typeArgument: KClass * ): ParameterizedTypeName fun Class * .plusParameter(typeArgument: Class * ): ParameterizedTypeName Returns a parameterized type, applying typeArgument to this .","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / copy copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ParameterizedTypeName Overrides TypeName.copy","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List AnnotationSpec ): ParameterizedTypeName Overrides TypeName.copy","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/nested-class/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / nestedClass nestedClass fun nestedClass(name: String , typeArguments: List TypeName ): ParameterizedTypeName Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments .","title":"Nested class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/nested-class/#nestedclass","text":"fun nestedClass(name: String , typeArguments: List TypeName ): ParameterizedTypeName Returns a new ParameterizedTypeName instance for the specified name as nested inside this class, with the specified typeArguments .","title":"nestedClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/parameterized-by/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / parameterizedBy parameterizedBy @JvmStatic @JvmName(\"get\") fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass * .parameterizedBy(vararg typeArguments: KClass * ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class * .parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName Returns a parameterized type, applying typeArguments to this .","title":"Parameterized by"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/parameterized-by/#parameterizedby","text":"@JvmStatic @JvmName(\"get\") fun ClassName .parameterizedBy(vararg typeArguments: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass * .parameterizedBy(vararg typeArguments: KClass * ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class * .parameterizedBy(vararg typeArguments: Type ): ParameterizedTypeName Returns a parameterized type, applying typeArguments to this .","title":"parameterizedBy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/plus-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / plusParameter plusParameter fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass * ): ParameterizedTypeName fun plusParameter(typeArgument: Class * ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass * .plusParameter(typeArgument: KClass * ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class * .plusParameter(typeArgument: Class * ): ParameterizedTypeName Returns a parameterized type, applying typeArgument to this .","title":"Plus parameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/plus-parameter/#plusparameter","text":"fun plusParameter(typeArgument: TypeName ): ParameterizedTypeName fun plusParameter(typeArgument: KClass * ): ParameterizedTypeName fun plusParameter(typeArgument: Class * ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun ClassName .plusParameter(typeArgument: TypeName ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun KClass * .plusParameter(typeArgument: KClass * ): ParameterizedTypeName @JvmStatic @JvmName(\"get\") fun Class * .plusParameter(typeArgument: Class * ): ParameterizedTypeName Returns a parameterized type, applying typeArgument to this .","title":"plusParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/raw-type/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / rawType rawType val rawType: ClassName","title":"Raw type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/raw-type/#rawtype","text":"val rawType: ClassName","title":"rawType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/type-arguments/","text":"kotlinpoet / com.squareup.kotlinpoet / ParameterizedTypeName / typeArguments typeArguments val typeArguments: List TypeName","title":"Type arguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-parameterized-type-name/type-arguments/#typearguments","text":"val typeArguments: List TypeName","title":"typeArguments"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. Types Name Summary Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder Properties Name Summary annotations val annotations: List AnnotationSpec delegated val delegated: Boolean getter val getter: FunSpec ? initializer val initializer: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier mutable val mutable: Boolean name val name: String receiverType val receiverType: TypeName ? setter val setter: FunSpec ? type val type: TypeName typeVariables val typeVariables: List TypeVariableName Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): PropertySpec.Builder toString fun toString(): String Companion Object Functions Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): PropertySpec.Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): PropertySpec.Builder fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): PropertySpec.Builder Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#propertyspec","text":"class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration.","title":"PropertySpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#properties","text":"Name Summary annotations val annotations: List AnnotationSpec delegated val delegated: Boolean getter val getter: FunSpec ? initializer val initializer: CodeBlock ? kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier mutable val mutable: Boolean name val name: String receiverType val receiverType: TypeName ? setter val setter: FunSpec ? type val type: TypeName typeVariables val typeVariables: List TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): PropertySpec.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): PropertySpec.Builder fun builder(name: String , type: Type , vararg modifiers: KModifier ): PropertySpec.Builder fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): PropertySpec.Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / annotations annotations val annotations: List AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/annotations/#annotations","text":"val annotations: List AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / builder builder @JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): PropertySpec.Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): PropertySpec.Builder @JvmStatic fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): PropertySpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/builder/#builder","text":"@JvmStatic fun builder(name: String , type: TypeName , vararg modifiers: KModifier ): PropertySpec.Builder @JvmStatic fun builder(name: String , type: Type , vararg modifiers: KModifier ): PropertySpec.Builder @JvmStatic fun builder(name: String , type: KClass * , vararg modifiers: KModifier ): PropertySpec.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/delegated/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / delegated delegated val delegated: Boolean","title":"Delegated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/delegated/#delegated","text":"val delegated: Boolean","title":"delegated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/getter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / getter getter val getter: FunSpec ?","title":"Getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/getter/#getter","text":"val getter: FunSpec ?","title":"getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/initializer/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / initializer initializer val initializer: CodeBlock ?","title":"Initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/initializer/#initializer","text":"val initializer: CodeBlock ?","title":"initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / kdoc kdoc val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / modifiers modifiers val modifiers: Set KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/modifiers/#modifiers","text":"val modifiers: Set KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/mutable/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / mutable mutable val mutable: Boolean","title":"Mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/mutable/#mutable","text":"val mutable: Boolean","title":"mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/receiver-type/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / receiverType receiverType val receiverType: TypeName ?","title":"Receiver type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/receiver-type/#receivertype","text":"val receiverType: TypeName ?","title":"receiverType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/setter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / setter setter val setter: FunSpec ?","title":"Setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/setter/#setter","text":"val setter: FunSpec ?","title":"setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / toBuilder toBuilder fun toBuilder(): PropertySpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-builder/#tobuilder","text":"fun toBuilder(): PropertySpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / typeVariables typeVariables val typeVariables: List TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type-variables/#typevariables","text":"val typeVariables: List TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / type type val type: TypeName","title":"Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/type/#type","text":"val type: TypeName","title":"type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder Properties Name Summary annotations val annotations: MutableList AnnotationSpec modifiers val modifiers: MutableList KModifier originatingElements val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeVariables val typeVariables: MutableList TypeVariableName Functions Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): PropertySpec.Builder fun addAnnotation(annotation: ClassName ): PropertySpec.Builder fun addAnnotation(annotation: Class * ): PropertySpec.Builder fun addAnnotation(annotation: KClass * ): PropertySpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): PropertySpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): PropertySpec.Builder fun addKdoc(block: CodeBlock ): PropertySpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): PropertySpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): PropertySpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): PropertySpec.Builder build fun build(): PropertySpec delegate fun delegate(format: String , vararg args: Any ?): PropertySpec.Builder fun delegate(codeBlock: CodeBlock ): PropertySpec.Builder getter fun getter(getter: FunSpec ): PropertySpec.Builder initializer fun initializer(format: String , vararg args: Any ?): PropertySpec.Builder fun initializer(codeBlock: CodeBlock ): PropertySpec.Builder mutable fun mutable(mutable: Boolean = true): PropertySpec.Builder True to create a var instead of a val . receiver fun receiver(receiverType: TypeName ): PropertySpec.Builder fun receiver(receiverType: Type ): PropertySpec.Builder fun receiver(receiverType: KClass * ): PropertySpec.Builder setter fun setter(setter: FunSpec ): PropertySpec.Builder Inherited Functions Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary jvmDefault fun PropertySpec.Builder .jvmDefault(): PropertySpec.Builder jvmField fun PropertySpec.Builder .jvmField(): PropertySpec.Builder jvmStatic fun PropertySpec.Builder .jvmStatic(): PropertySpec.Builder jvmSuppressWildcards fun PropertySpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): PropertySpec.Builder tag fun T : Any PropertySpec.Builder .tag(tag: T ?): PropertySpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . transient fun PropertySpec.Builder .transient(): PropertySpec.Builder volatile fun PropertySpec.Builder .volatile(): PropertySpec.Builder","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#builder","text":"class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#properties","text":"Name Summary annotations val annotations: MutableList AnnotationSpec modifiers val modifiers: MutableList KModifier originatingElements val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeVariables val typeVariables: MutableList TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): PropertySpec.Builder fun addAnnotation(annotation: ClassName ): PropertySpec.Builder fun addAnnotation(annotation: Class * ): PropertySpec.Builder fun addAnnotation(annotation: KClass * ): PropertySpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): PropertySpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): PropertySpec.Builder fun addKdoc(block: CodeBlock ): PropertySpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): PropertySpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): PropertySpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): PropertySpec.Builder build fun build(): PropertySpec delegate fun delegate(format: String , vararg args: Any ?): PropertySpec.Builder fun delegate(codeBlock: CodeBlock ): PropertySpec.Builder getter fun getter(getter: FunSpec ): PropertySpec.Builder initializer fun initializer(format: String , vararg args: Any ?): PropertySpec.Builder fun initializer(codeBlock: CodeBlock ): PropertySpec.Builder mutable fun mutable(mutable: Boolean = true): PropertySpec.Builder True to create a var instead of a val . receiver fun receiver(receiverType: TypeName ): PropertySpec.Builder fun receiver(receiverType: Type ): PropertySpec.Builder fun receiver(receiverType: KClass * ): PropertySpec.Builder setter fun setter(setter: FunSpec ): PropertySpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#inherited-functions","text":"Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/#extension-functions","text":"Name Summary jvmDefault fun PropertySpec.Builder .jvmDefault(): PropertySpec.Builder jvmField fun PropertySpec.Builder .jvmField(): PropertySpec.Builder jvmStatic fun PropertySpec.Builder .jvmStatic(): PropertySpec.Builder jvmSuppressWildcards fun PropertySpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): PropertySpec.Builder tag fun T : Any PropertySpec.Builder .tag(tag: T ?): PropertySpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T . transient fun PropertySpec.Builder .transient(): PropertySpec.Builder volatile fun PropertySpec.Builder .volatile(): PropertySpec.Builder","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addAnnotation addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): PropertySpec.Builder fun addAnnotation(annotation: ClassName ): PropertySpec.Builder fun addAnnotation(annotation: Class * ): PropertySpec.Builder fun addAnnotation(annotation: KClass * ): PropertySpec.Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): PropertySpec.Builder fun addAnnotation(annotation: ClassName ): PropertySpec.Builder fun addAnnotation(annotation: Class * ): PropertySpec.Builder fun addAnnotation(annotation: KClass * ): PropertySpec.Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addAnnotations addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): PropertySpec.Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): PropertySpec.Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addKdoc addKdoc fun addKdoc(format: String , vararg args: Any ): PropertySpec.Builder fun addKdoc(block: CodeBlock ): PropertySpec.Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): PropertySpec.Builder fun addKdoc(block: CodeBlock ): PropertySpec.Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addModifiers addModifiers fun addModifiers(vararg modifiers: KModifier ): PropertySpec.Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): PropertySpec.Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addTypeVariable addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): PropertySpec.Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): PropertySpec.Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / addTypeVariables addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): PropertySpec.Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable TypeVariableName ): PropertySpec.Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / annotations annotations val annotations: MutableList AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/annotations/#annotations","text":"val annotations: MutableList AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / build build fun build(): PropertySpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/build/#build","text":"fun build(): PropertySpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/delegate/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / delegate delegate fun delegate(format: String , vararg args: Any ?): PropertySpec.Builder fun delegate(codeBlock: CodeBlock ): PropertySpec.Builder","title":"Delegate"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/delegate/#delegate","text":"fun delegate(format: String , vararg args: Any ?): PropertySpec.Builder fun delegate(codeBlock: CodeBlock ): PropertySpec.Builder","title":"delegate"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/getter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / getter getter fun getter(getter: FunSpec ): PropertySpec.Builder","title":"Getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/getter/#getter","text":"fun getter(getter: FunSpec ): PropertySpec.Builder","title":"getter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/initializer/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / initializer initializer fun initializer(format: String , vararg args: Any ?): PropertySpec.Builder fun initializer(codeBlock: CodeBlock ): PropertySpec.Builder","title":"Initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/initializer/#initializer","text":"fun initializer(format: String , vararg args: Any ?): PropertySpec.Builder fun initializer(codeBlock: CodeBlock ): PropertySpec.Builder","title":"initializer"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / modifiers modifiers val modifiers: MutableList KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableList KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/mutable/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / mutable mutable fun mutable(mutable: Boolean = true): PropertySpec.Builder True to create a var instead of a val .","title":"Mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/mutable/#mutable","text":"fun mutable(mutable: Boolean = true): PropertySpec.Builder True to create a var instead of a val .","title":"mutable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / originatingElements originatingElements val originatingElements: MutableList Element Overrides Builder.originatingElements Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/originating-elements/#originatingelements","text":"val originatingElements: MutableList Element Overrides Builder.originatingElements Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/receiver/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / receiver receiver fun receiver(receiverType: TypeName ): PropertySpec.Builder fun receiver(receiverType: Type ): PropertySpec.Builder fun receiver(receiverType: KClass * ): PropertySpec.Builder","title":"Receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/receiver/#receiver","text":"fun receiver(receiverType: TypeName ): PropertySpec.Builder fun receiver(receiverType: Type ): PropertySpec.Builder fun receiver(receiverType: KClass * ): PropertySpec.Builder","title":"receiver"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/setter/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / setter setter fun setter(setter: FunSpec ): PropertySpec.Builder","title":"Setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/setter/#setter","text":"fun setter(setter: FunSpec ): PropertySpec.Builder","title":"setter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / PropertySpec / Builder / typeVariables typeVariables val typeVariables: MutableList TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-property-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableList TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable Taggable interface Taggable A type that can be tagged with extra metadata of the user s choice. Types Name Summary Builder interface Builder out T : Taggable.Builder T The builder analogue to Taggable types. Functions Name Summary tag open fun T : Any tag(type: Class T ): T ? abstract fun T : Any tag(type: KClass T ): T ? Returns the tag attached with type as a key, or null if no tag is attached with that key. Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key. Inheritors Name Summary AnnotationSpec class AnnotationSpec : Taggable A generated annotation on a declaration. FileSpec class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. ParameterSpec class ParameterSpec : Taggable A generated parameter declaration. PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. TypeAliasSpec class TypeAliasSpec : Taggable A generated typealias declaration TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#taggable","text":"interface Taggable A type that can be tagged with extra metadata of the user s choice.","title":"Taggable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#types","text":"Name Summary Builder interface Builder out T : Taggable.Builder T The builder analogue to Taggable types.","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#functions","text":"Name Summary tag open fun T : Any tag(type: Class T ): T ? abstract fun T : Any tag(type: KClass T ): T ? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/#inheritors","text":"Name Summary AnnotationSpec class AnnotationSpec : Taggable A generated annotation on a declaration. FileSpec class FileSpec : Taggable A Kotlin file containing top level objects like classes, objects, functions, properties, and type aliases. FunSpec class FunSpec : Taggable , OriginatingElementsHolder A generated function declaration. ParameterSpec class ParameterSpec : Taggable A generated parameter declaration. PropertySpec class PropertySpec : Taggable , OriginatingElementsHolder A generated property declaration. TypeAliasSpec class TypeAliasSpec : Taggable A generated typealias declaration TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration.","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/tag/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / tag tag open fun T : Any tag(type: Class T ): T ? abstract fun T : Any tag(type: KClass T ): T ? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"Tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/tag/#tag","text":"open fun T : Any tag(type: Class T ): T ? abstract fun T : Any tag(type: KClass T ): T ? Returns the tag attached with type as a key, or null if no tag is attached with that key.","title":"tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / Builder Builder interface Builder out T : Taggable.Builder T The builder analogue to Taggable types. Properties Name Summary tags abstract val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. Functions Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Inheritors Name Summary Builder class Builder : Taggable.Builder AnnotationSpec.Builder Builder class Builder : Taggable.Builder FileSpec.Builder Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder Builder class Builder : Taggable.Builder ParameterSpec.Builder Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder Builder class Builder : Taggable.Builder TypeAliasSpec.Builder Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#builder","text":"interface Builder out T : Taggable.Builder T The builder analogue to Taggable types.","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#properties","text":"Name Summary tags abstract val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#functions","text":"Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/#inheritors","text":"Name Summary Builder class Builder : Taggable.Builder AnnotationSpec.Builder Builder class Builder : Taggable.Builder FileSpec.Builder Builder class Builder : Taggable.Builder FunSpec.Builder , OriginatingElementsHolder.Builder FunSpec.Builder Builder class Builder : Taggable.Builder ParameterSpec.Builder Builder class Builder : Taggable.Builder PropertySpec.Builder , OriginatingElementsHolder.Builder PropertySpec.Builder Builder class Builder : Taggable.Builder TypeAliasSpec.Builder Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tag/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / Builder / tag tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Use this API to attach originating elements, debugging, or other application data to a spec so that you may read it in other APIs or callbacks.","title":"Tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tag/#tag","text":"open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Use this API to attach originating elements, debugging, or other application data to a spec so that you may read it in other APIs or callbacks.","title":"tag"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / Taggable / Builder / tags tags abstract val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-taggable/-builder/tags/#tags","text":"abstract val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec TypeAliasSpec class TypeAliasSpec : Taggable A generated typealias declaration Types Name Summary Builder class Builder : Taggable.Builder TypeAliasSpec.Builder Properties Name Summary kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier name val name: String type val type: TypeName typeVariables val typeVariables: List TypeVariableName Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): TypeAliasSpec.Builder toString fun toString(): String Companion Object Functions Name Summary builder fun builder(name: String , type: TypeName ): TypeAliasSpec.Builder fun builder(name: String , type: Type ): TypeAliasSpec.Builder fun builder(name: String , type: KClass * ): TypeAliasSpec.Builder Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#typealiasspec","text":"class TypeAliasSpec : Taggable A generated typealias declaration","title":"TypeAliasSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder TypeAliasSpec.Builder","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#properties","text":"Name Summary kdoc val kdoc: CodeBlock modifiers val modifiers: Set KModifier name val name: String type val type: TypeName typeVariables val typeVariables: List TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): TypeAliasSpec.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#companion-object-functions","text":"Name Summary builder fun builder(name: String , type: TypeName ): TypeAliasSpec.Builder fun builder(name: String , type: Type ): TypeAliasSpec.Builder fun builder(name: String , type: KClass * ): TypeAliasSpec.Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / builder builder @JvmStatic fun builder(name: String , type: TypeName ): TypeAliasSpec.Builder @JvmStatic fun builder(name: String , type: Type ): TypeAliasSpec.Builder @JvmStatic fun builder(name: String , type: KClass * ): TypeAliasSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/builder/#builder","text":"@JvmStatic fun builder(name: String , type: TypeName ): TypeAliasSpec.Builder @JvmStatic fun builder(name: String , type: Type ): TypeAliasSpec.Builder @JvmStatic fun builder(name: String , type: KClass * ): TypeAliasSpec.Builder","title":"builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / kdoc kdoc val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / modifiers modifiers val modifiers: Set KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/modifiers/#modifiers","text":"val modifiers: Set KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / toBuilder toBuilder fun toBuilder(): TypeAliasSpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-builder/#tobuilder","text":"fun toBuilder(): TypeAliasSpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / typeVariables typeVariables val typeVariables: List TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type-variables/#typevariables","text":"val typeVariables: List TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / type type val type: TypeName","title":"Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/type/#type","text":"val type: TypeName","title":"type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder Builder class Builder : Taggable.Builder TypeAliasSpec.Builder Properties Name Summary modifiers val modifiers: MutableSet KModifier tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeVariables val typeVariables: MutableSet TypeVariableName Functions Name Summary addKdoc fun addKdoc(format: String , vararg args: Any ): TypeAliasSpec.Builder fun addKdoc(block: CodeBlock ): TypeAliasSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): TypeAliasSpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): TypeAliasSpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeAliasSpec.Builder build fun build(): TypeAliasSpec Inherited Functions Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary tag fun T : Any TypeAliasSpec.Builder .tag(tag: T ?): TypeAliasSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#builder","text":"class Builder : Taggable.Builder TypeAliasSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#properties","text":"Name Summary modifiers val modifiers: MutableSet KModifier tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeVariables val typeVariables: MutableSet TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#functions","text":"Name Summary addKdoc fun addKdoc(format: String , vararg args: Any ): TypeAliasSpec.Builder fun addKdoc(block: CodeBlock ): TypeAliasSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): TypeAliasSpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): TypeAliasSpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeAliasSpec.Builder build fun build(): TypeAliasSpec","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#inherited-functions","text":"Name Summary tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/#extension-functions","text":"Name Summary tag fun T : Any TypeAliasSpec.Builder .tag(tag: T ?): TypeAliasSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addKdoc addKdoc fun addKdoc(format: String , vararg args: Any ): TypeAliasSpec.Builder fun addKdoc(block: CodeBlock ): TypeAliasSpec.Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): TypeAliasSpec.Builder fun addKdoc(block: CodeBlock ): TypeAliasSpec.Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addModifiers addModifiers fun addModifiers(vararg modifiers: KModifier ): TypeAliasSpec.Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): TypeAliasSpec.Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addTypeVariable addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): TypeAliasSpec.Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): TypeAliasSpec.Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / addTypeVariables addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeAliasSpec.Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeAliasSpec.Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / build build fun build(): TypeAliasSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/build/#build","text":"fun build(): TypeAliasSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / modifiers modifiers val modifiers: MutableSet KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableSet KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeAliasSpec / Builder / typeVariables typeVariables val typeVariables: MutableSet TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-alias-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableSet TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName TypeName sealed class TypeName Any type in Kotlin s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array String and Set String , and unassignable types like Unit . Type names are dumb identifiers only and do not model the values they name. For example, the type name for kotlin.List doesn t know about the size() function, the fact that lists are collections, or even that it accepts a single type parameter. Instances of this class are immutable value objects that implement equals() and hashCode() properly. Referencing existing types In an annotation processor you can get a type name instance for a type mirror by calling asTypeName . In reflection code, you can use asTypeName . Defining new types Create new reference types like com.example.HelloWorld with ClassName.bestGuess . To build composite types like Set Long , use the factory methods on ParameterizedTypeName , TypeVariableName , and WildcardTypeName . Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary copy abstract fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList()): TypeName equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName Inheritors Name Summary ClassName class ClassName : TypeName , Comparable ClassName A fully-qualified class name for top-level and member classes. Dynamic object Dynamic : TypeName LambdaTypeName class LambdaTypeName : TypeName ParameterizedTypeName class ParameterizedTypeName : TypeName TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#typename","text":"sealed class TypeName Any type in Kotlin s type system. This class identifies simple types like Int and String , nullable types like Int? , composite types like Array String and Set String , and unassignable types like Unit . Type names are dumb identifiers only and do not model the values they name. For example, the type name for kotlin.List doesn t know about the size() function, the fact that lists are collections, or even that it accepts a single type parameter. Instances of this class are immutable value objects that implement equals() and hashCode() properly. Referencing existing types In an annotation processor you can get a type name instance for a type mirror by calling asTypeName . In reflection code, you can use asTypeName . Defining new types Create new reference types like com.example.HelloWorld with ClassName.bestGuess . To build composite types like Set Long , use the factory methods on ParameterizedTypeName , TypeVariableName , and WildcardTypeName .","title":"TypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#functions","text":"Name Summary copy abstract fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList()): TypeName equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/#inheritors","text":"Name Summary ClassName class ClassName : TypeName , Comparable ClassName A fully-qualified class name for top-level and member classes. Dynamic object Dynamic : TypeName LambdaTypeName class LambdaTypeName : TypeName ParameterizedTypeName class ParameterizedTypeName : TypeName TypeVariableName class TypeVariableName : TypeName WildcardTypeName class WildcardTypeName : TypeName","title":"Inheritors"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / annotations annotations val annotations: List AnnotationSpec","title":"Annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/annotations/#annotations","text":"val annotations: List AnnotationSpec","title":"annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / copy copy abstract fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList()): TypeName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/copy/#copy","text":"abstract fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList()): TypeName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / equals equals open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/equals/#equals","text":"open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / hashCode hashCode open fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/hash-code/#hashcode","text":"open fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-annotated/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / isAnnotated isAnnotated val isAnnotated: Boolean","title":"Is annotated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-annotated/#isannotated","text":"val isAnnotated: Boolean","title":"isAnnotated"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-nullable/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / isNullable isNullable val isNullable: Boolean","title":"Is nullable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/is-nullable/#isnullable","text":"val isNullable: Boolean","title":"isNullable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeName / toString toString open fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-name/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec TypeSpec class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration. Types Name Summary Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder Kind enum class Kind Properties Name Summary annotationSpecs val annotationSpecs: List AnnotationSpec enumConstants val enumConstants: Map String , TypeSpec funSpecs val funSpecs: List FunSpec initializerBlock val initializerBlock: CodeBlock isAnnotation val isAnnotation: Boolean isAnonymousClass val isAnonymousClass: Boolean isCompanion val isCompanion: Boolean isEnum val isEnum: Boolean kdoc val kdoc: CodeBlock kind val kind: TypeSpec.Kind modifiers val modifiers: Set KModifier name val name: String ? primaryConstructor val primaryConstructor: FunSpec ? propertySpecs val propertySpecs: List PropertySpec superclass val superclass: TypeName superclassConstructorParameters val superclassConstructorParameters: List CodeBlock superinterfaces val superinterfaces: Map TypeName , CodeBlock ? Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value typeSpecs val typeSpecs: List TypeSpec typeVariables val typeVariables: List TypeVariableName Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): TypeSpec.Builder toString fun toString(): String Companion Object Functions Name Summary annotationBuilder fun annotationBuilder(name: String ): TypeSpec.Builder fun annotationBuilder(className: ClassName ): TypeSpec.Builder anonymousClassBuilder fun anonymousClassBuilder(): TypeSpec.Builder classBuilder fun classBuilder(name: String ): TypeSpec.Builder fun classBuilder(className: ClassName ): TypeSpec.Builder companionObjectBuilder fun companionObjectBuilder(name: String ? = null): TypeSpec.Builder enumBuilder fun enumBuilder(name: String ): TypeSpec.Builder fun enumBuilder(className: ClassName ): TypeSpec.Builder expectClassBuilder fun expectClassBuilder(name: String ): TypeSpec.Builder fun expectClassBuilder(className: ClassName ): TypeSpec.Builder interfaceBuilder fun interfaceBuilder(name: String ): TypeSpec.Builder fun interfaceBuilder(className: ClassName ): TypeSpec.Builder objectBuilder fun objectBuilder(name: String ): TypeSpec.Builder fun objectBuilder(className: ClassName ): TypeSpec.Builder Extension Functions Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#typespec","text":"class TypeSpec : Taggable , OriginatingElementsHolder A generated class, interface, or enum declaration.","title":"TypeSpec"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#types","text":"Name Summary Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder Kind enum class Kind","title":"Types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#properties","text":"Name Summary annotationSpecs val annotationSpecs: List AnnotationSpec enumConstants val enumConstants: Map String , TypeSpec funSpecs val funSpecs: List FunSpec initializerBlock val initializerBlock: CodeBlock isAnnotation val isAnnotation: Boolean isAnonymousClass val isAnonymousClass: Boolean isCompanion val isCompanion: Boolean isEnum val isEnum: Boolean kdoc val kdoc: CodeBlock kind val kind: TypeSpec.Kind modifiers val modifiers: Set KModifier name val name: String ? primaryConstructor val primaryConstructor: FunSpec ? propertySpecs val propertySpecs: List PropertySpec superclass val superclass: TypeName superclassConstructorParameters val superclassConstructorParameters: List CodeBlock superinterfaces val superinterfaces: Map TypeName , CodeBlock ? Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value typeSpecs val typeSpecs: List TypeSpec typeVariables val typeVariables: List TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toBuilder fun toBuilder(): TypeSpec.Builder toString fun toString(): String","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#companion-object-functions","text":"Name Summary annotationBuilder fun annotationBuilder(name: String ): TypeSpec.Builder fun annotationBuilder(className: ClassName ): TypeSpec.Builder anonymousClassBuilder fun anonymousClassBuilder(): TypeSpec.Builder classBuilder fun classBuilder(name: String ): TypeSpec.Builder fun classBuilder(className: ClassName ): TypeSpec.Builder companionObjectBuilder fun companionObjectBuilder(name: String ? = null): TypeSpec.Builder enumBuilder fun enumBuilder(name: String ): TypeSpec.Builder fun enumBuilder(className: ClassName ): TypeSpec.Builder expectClassBuilder fun expectClassBuilder(name: String ): TypeSpec.Builder fun expectClassBuilder(className: ClassName ): TypeSpec.Builder interfaceBuilder fun interfaceBuilder(name: String ): TypeSpec.Builder fun interfaceBuilder(className: ClassName ): TypeSpec.Builder objectBuilder fun objectBuilder(name: String ): TypeSpec.Builder fun objectBuilder(className: ClassName ): TypeSpec.Builder","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/#extension-functions","text":"Name Summary tag fun T : Any Taggable .tag(): T ? Returns the tag attached with T as a key, or null if no tag is attached with that key.","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / annotationBuilder annotationBuilder @JvmStatic fun annotationBuilder(name: String ): TypeSpec.Builder @JvmStatic fun annotationBuilder(className: ClassName ): TypeSpec.Builder","title":"Annotation builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-builder/#annotationbuilder","text":"@JvmStatic fun annotationBuilder(name: String ): TypeSpec.Builder @JvmStatic fun annotationBuilder(className: ClassName ): TypeSpec.Builder","title":"annotationBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / annotationSpecs annotationSpecs val annotationSpecs: List AnnotationSpec","title":"Annotation specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/annotation-specs/#annotationspecs","text":"val annotationSpecs: List AnnotationSpec","title":"annotationSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/anonymous-class-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / anonymousClassBuilder anonymousClassBuilder @JvmStatic fun anonymousClassBuilder(): TypeSpec.Builder","title":"Anonymous class builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/anonymous-class-builder/#anonymousclassbuilder","text":"@JvmStatic fun anonymousClassBuilder(): TypeSpec.Builder","title":"anonymousClassBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/class-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / classBuilder classBuilder @JvmStatic fun classBuilder(name: String ): TypeSpec.Builder @JvmStatic fun classBuilder(className: ClassName ): TypeSpec.Builder","title":"Class builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/class-builder/#classbuilder","text":"@JvmStatic fun classBuilder(name: String ): TypeSpec.Builder @JvmStatic fun classBuilder(className: ClassName ): TypeSpec.Builder","title":"classBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/companion-object-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / companionObjectBuilder companionObjectBuilder @JvmStatic @JvmOverloads fun companionObjectBuilder(name: String ? = null): TypeSpec.Builder","title":"Companion object builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/companion-object-builder/#companionobjectbuilder","text":"@JvmStatic @JvmOverloads fun companionObjectBuilder(name: String ? = null): TypeSpec.Builder","title":"companionObjectBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / enumBuilder enumBuilder @JvmStatic fun enumBuilder(name: String ): TypeSpec.Builder @JvmStatic fun enumBuilder(className: ClassName ): TypeSpec.Builder","title":"Enum builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-builder/#enumbuilder","text":"@JvmStatic fun enumBuilder(name: String ): TypeSpec.Builder @JvmStatic fun enumBuilder(className: ClassName ): TypeSpec.Builder","title":"enumBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-constants/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / enumConstants enumConstants val enumConstants: Map String , TypeSpec","title":"Enum constants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/enum-constants/#enumconstants","text":"val enumConstants: Map String , TypeSpec","title":"enumConstants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/equals/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/expect-class-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / expectClassBuilder expectClassBuilder @JvmStatic fun expectClassBuilder(name: String ): TypeSpec.Builder @JvmStatic fun expectClassBuilder(className: ClassName ): TypeSpec.Builder","title":"Expect class builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/expect-class-builder/#expectclassbuilder","text":"@JvmStatic fun expectClassBuilder(name: String ): TypeSpec.Builder @JvmStatic fun expectClassBuilder(className: ClassName ): TypeSpec.Builder","title":"expectClassBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/fun-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / funSpecs funSpecs val funSpecs: List FunSpec","title":"Fun specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/fun-specs/#funspecs","text":"val funSpecs: List FunSpec","title":"funSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/hash-code/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/initializer-block/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / initializerBlock initializerBlock val initializerBlock: CodeBlock","title":"Initializer block"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/initializer-block/#initializerblock","text":"val initializerBlock: CodeBlock","title":"initializerBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/interface-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / interfaceBuilder interfaceBuilder @JvmStatic fun interfaceBuilder(name: String ): TypeSpec.Builder @JvmStatic fun interfaceBuilder(className: ClassName ): TypeSpec.Builder","title":"Interface builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/interface-builder/#interfacebuilder","text":"@JvmStatic fun interfaceBuilder(name: String ): TypeSpec.Builder @JvmStatic fun interfaceBuilder(className: ClassName ): TypeSpec.Builder","title":"interfaceBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isAnnotation isAnnotation val isAnnotation: Boolean","title":"Is annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-annotation/#isannotation","text":"val isAnnotation: Boolean","title":"isAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-anonymous-class/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isAnonymousClass isAnonymousClass val isAnonymousClass: Boolean","title":"Is anonymous class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-anonymous-class/#isanonymousclass","text":"val isAnonymousClass: Boolean","title":"isAnonymousClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-companion/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isCompanion isCompanion val isCompanion: Boolean","title":"Is companion"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-companion/#iscompanion","text":"val isCompanion: Boolean","title":"isCompanion"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-enum/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / isEnum isEnum val isEnum: Boolean","title":"Is enum"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/is-enum/#isenum","text":"val isEnum: Boolean","title":"isEnum"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / kdoc kdoc val kdoc: CodeBlock","title":"Kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kdoc/#kdoc","text":"val kdoc: CodeBlock","title":"kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kind/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / kind kind val kind: TypeSpec.Kind","title":"Kind"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/kind/#kind","text":"val kind: TypeSpec.Kind","title":"kind"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / modifiers modifiers val modifiers: Set KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/modifiers/#modifiers","text":"val modifiers: Set KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / name name val name: String ?","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/name/#name","text":"val name: String ?","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/object-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / objectBuilder objectBuilder @JvmStatic fun objectBuilder(name: String ): TypeSpec.Builder @JvmStatic fun objectBuilder(className: ClassName ): TypeSpec.Builder","title":"Object builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/object-builder/#objectbuilder","text":"@JvmStatic fun objectBuilder(name: String ): TypeSpec.Builder @JvmStatic fun objectBuilder(className: ClassName ): TypeSpec.Builder","title":"objectBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/primary-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / primaryConstructor primaryConstructor val primaryConstructor: FunSpec ?","title":"Primary constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/primary-constructor/#primaryconstructor","text":"val primaryConstructor: FunSpec ?","title":"primaryConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/property-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / propertySpecs propertySpecs val propertySpecs: List PropertySpec","title":"Property specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/property-specs/#propertyspecs","text":"val propertySpecs: List PropertySpec","title":"propertySpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass-constructor-parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / superclassConstructorParameters superclassConstructorParameters val superclassConstructorParameters: List CodeBlock","title":"Superclass constructor parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass-constructor-parameters/#superclassconstructorparameters","text":"val superclassConstructorParameters: List CodeBlock","title":"superclassConstructorParameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / superclass superclass val superclass: TypeName","title":"Superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superclass/#superclass","text":"val superclass: TypeName","title":"superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superinterfaces/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / superinterfaces superinterfaces val superinterfaces: Map TypeName , CodeBlock ? Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value","title":"Superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/superinterfaces/#superinterfaces","text":"val superinterfaces: Map TypeName , CodeBlock ? Map of superinterfaces - entries with a null value represent a regular superinterface (with no delegation), while non-null CodeBlock values represent delegates for the corresponding TypeSpec interface (key) value","title":"superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / toBuilder toBuilder fun toBuilder(): TypeSpec.Builder","title":"To builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-builder/#tobuilder","text":"fun toBuilder(): TypeSpec.Builder","title":"toBuilder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-string/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / toString toString fun toString(): String","title":"To string"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / typeSpecs typeSpecs val typeSpecs: List TypeSpec","title":"Type specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-specs/#typespecs","text":"val typeSpecs: List TypeSpec","title":"typeSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / typeVariables typeVariables val typeVariables: List TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/type-variables/#typevariables","text":"val typeVariables: List TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder Builder class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder Properties Name Summary annotationSpecs val annotationSpecs: MutableList AnnotationSpec enumConstants val enumConstants: MutableMap String , TypeSpec funSpecs val funSpecs: MutableList FunSpec modifiers val modifiers: MutableSet KModifier originatingElements val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. propertySpecs val propertySpecs: MutableList PropertySpec superclassConstructorParameters val superclassConstructorParameters: MutableList CodeBlock superinterfaces val superinterfaces: MutableMap TypeName , CodeBlock ? tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeSpecs val typeSpecs: MutableList TypeSpec typeVariables val typeVariables: MutableList TypeVariableName Functions Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): TypeSpec.Builder fun addAnnotation(annotation: ClassName ): TypeSpec.Builder fun addAnnotation(annotation: Class * ): TypeSpec.Builder fun addAnnotation(annotation: KClass * ): TypeSpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): TypeSpec.Builder addEnumConstant fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): TypeSpec.Builder addFunction fun addFunction(funSpec: FunSpec ): TypeSpec.Builder addFunctions fun addFunctions(funSpecs: Iterable FunSpec ): TypeSpec.Builder addInitializerBlock fun addInitializerBlock(block: CodeBlock ): TypeSpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): TypeSpec.Builder fun addKdoc(block: CodeBlock ): TypeSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): TypeSpec.Builder addProperties fun addProperties(propertySpecs: Iterable PropertySpec ): TypeSpec.Builder addProperty fun addProperty(propertySpec: PropertySpec ): TypeSpec.Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: KClass * , vararg modifiers: KModifier ): TypeSpec.Builder addSuperclassConstructorParameter fun addSuperclassConstructorParameter(format: String , vararg args: Any ): TypeSpec.Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): TypeSpec.Builder addSuperinterface fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , constructorParameterName: String ): TypeSpec.Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): TypeSpec.Builder addSuperinterfaces fun addSuperinterfaces(superinterfaces: Iterable TypeName ): TypeSpec.Builder addType fun addType(typeSpec: TypeSpec ): TypeSpec.Builder addTypes fun addTypes(typeSpecs: Iterable TypeSpec ): TypeSpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): TypeSpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeSpec.Builder build fun build(): TypeSpec primaryConstructor fun primaryConstructor(primaryConstructor: FunSpec ?): TypeSpec.Builder superclass fun superclass(superclass: TypeName ): TypeSpec.Builder fun superclass(superclass: Type ): TypeSpec.Builder fun superclass(superclass: KClass * ): TypeSpec.Builder Inherited Functions Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type . Extension Functions Name Summary jvmSuppressWildcards fun TypeSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): TypeSpec.Builder tag fun T : Any TypeSpec.Builder .tag(tag: T ?): TypeSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#builder","text":"class Builder : Taggable.Builder TypeSpec.Builder , OriginatingElementsHolder.Builder TypeSpec.Builder","title":"Builder"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#properties","text":"Name Summary annotationSpecs val annotationSpecs: MutableList AnnotationSpec enumConstants val enumConstants: MutableMap String , TypeSpec funSpecs val funSpecs: MutableList FunSpec modifiers val modifiers: MutableSet KModifier originatingElements val originatingElements: MutableList Element Mutable map of the current originating elements this builder contains. propertySpecs val propertySpecs: MutableList PropertySpec superclassConstructorParameters val superclassConstructorParameters: MutableList CodeBlock superinterfaces val superinterfaces: MutableMap TypeName , CodeBlock ? tags val tags: MutableMap KClass * , Any Mutable map of the current tags this builder contains. typeSpecs val typeSpecs: MutableList TypeSpec typeVariables val typeVariables: MutableList TypeVariableName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#functions","text":"Name Summary addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): TypeSpec.Builder fun addAnnotation(annotation: ClassName ): TypeSpec.Builder fun addAnnotation(annotation: Class * ): TypeSpec.Builder fun addAnnotation(annotation: KClass * ): TypeSpec.Builder addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): TypeSpec.Builder addEnumConstant fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): TypeSpec.Builder addFunction fun addFunction(funSpec: FunSpec ): TypeSpec.Builder addFunctions fun addFunctions(funSpecs: Iterable FunSpec ): TypeSpec.Builder addInitializerBlock fun addInitializerBlock(block: CodeBlock ): TypeSpec.Builder addKdoc fun addKdoc(format: String , vararg args: Any ): TypeSpec.Builder fun addKdoc(block: CodeBlock ): TypeSpec.Builder addModifiers fun addModifiers(vararg modifiers: KModifier ): TypeSpec.Builder addProperties fun addProperties(propertySpecs: Iterable PropertySpec ): TypeSpec.Builder addProperty fun addProperty(propertySpec: PropertySpec ): TypeSpec.Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: KClass * , vararg modifiers: KModifier ): TypeSpec.Builder addSuperclassConstructorParameter fun addSuperclassConstructorParameter(format: String , vararg args: Any ): TypeSpec.Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): TypeSpec.Builder addSuperinterface fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , constructorParameterName: String ): TypeSpec.Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): TypeSpec.Builder addSuperinterfaces fun addSuperinterfaces(superinterfaces: Iterable TypeName ): TypeSpec.Builder addType fun addType(typeSpec: TypeSpec ): TypeSpec.Builder addTypes fun addTypes(typeSpecs: Iterable TypeSpec ): TypeSpec.Builder addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): TypeSpec.Builder addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeSpec.Builder build fun build(): TypeSpec primaryConstructor fun primaryConstructor(primaryConstructor: FunSpec ?): TypeSpec.Builder superclass fun superclass(superclass: TypeName ): TypeSpec.Builder fun superclass(superclass: Type ): TypeSpec.Builder fun superclass(superclass: KClass * ): TypeSpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#inherited-functions","text":"Name Summary addOriginatingElement open fun addOriginatingElement(originatingElement: Element ): T Adds an originatingElement to this type s list of originating elements. tag open fun tag(type: Class * , tag: Any ?): T open fun tag(type: KClass * , tag: Any ?): T Attaches tag to the request using type as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for type .","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): TypeSpec.Builder tag fun T : Any TypeSpec.Builder .tag(tag: T ?): TypeSpec.Builder Attaches tag to the request using T as a key. Tags can be read from a request using Taggable.tag . Use null to remove any existing tag assigned for T .","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotation/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addAnnotation addAnnotation fun addAnnotation(annotationSpec: AnnotationSpec ): TypeSpec.Builder fun addAnnotation(annotation: ClassName ): TypeSpec.Builder fun addAnnotation(annotation: Class * ): TypeSpec.Builder fun addAnnotation(annotation: KClass * ): TypeSpec.Builder","title":"Add annotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotation/#addannotation","text":"fun addAnnotation(annotationSpec: AnnotationSpec ): TypeSpec.Builder fun addAnnotation(annotation: ClassName ): TypeSpec.Builder fun addAnnotation(annotation: Class * ): TypeSpec.Builder fun addAnnotation(annotation: KClass * ): TypeSpec.Builder","title":"addAnnotation"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotations/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addAnnotations addAnnotations fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): TypeSpec.Builder","title":"Add annotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-annotations/#addannotations","text":"fun addAnnotations(annotationSpecs: Iterable AnnotationSpec ): TypeSpec.Builder","title":"addAnnotations"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-enum-constant/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addEnumConstant addEnumConstant @JvmOverloads fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): TypeSpec.Builder","title":"Add enum constant"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-enum-constant/#addenumconstant","text":"@JvmOverloads fun addEnumConstant(name: String , typeSpec: TypeSpec = anonymousClassBuilder().build()): TypeSpec.Builder","title":"addEnumConstant"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-function/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addFunction addFunction fun addFunction(funSpec: FunSpec ): TypeSpec.Builder","title":"Add function"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-function/#addfunction","text":"fun addFunction(funSpec: FunSpec ): TypeSpec.Builder","title":"addFunction"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-functions/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addFunctions addFunctions fun addFunctions(funSpecs: Iterable FunSpec ): TypeSpec.Builder","title":"Add functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-functions/#addfunctions","text":"fun addFunctions(funSpecs: Iterable FunSpec ): TypeSpec.Builder","title":"addFunctions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-initializer-block/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addInitializerBlock addInitializerBlock fun addInitializerBlock(block: CodeBlock ): TypeSpec.Builder","title":"Add initializer block"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-initializer-block/#addinitializerblock","text":"fun addInitializerBlock(block: CodeBlock ): TypeSpec.Builder","title":"addInitializerBlock"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-kdoc/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addKdoc addKdoc fun addKdoc(format: String , vararg args: Any ): TypeSpec.Builder fun addKdoc(block: CodeBlock ): TypeSpec.Builder","title":"Add kdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-kdoc/#addkdoc","text":"fun addKdoc(format: String , vararg args: Any ): TypeSpec.Builder fun addKdoc(block: CodeBlock ): TypeSpec.Builder","title":"addKdoc"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addModifiers addModifiers fun addModifiers(vararg modifiers: KModifier ): TypeSpec.Builder","title":"Add modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-modifiers/#addmodifiers","text":"fun addModifiers(vararg modifiers: KModifier ): TypeSpec.Builder","title":"addModifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-properties/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addProperties addProperties fun addProperties(propertySpecs: Iterable PropertySpec ): TypeSpec.Builder","title":"Add properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-properties/#addproperties","text":"fun addProperties(propertySpecs: Iterable PropertySpec ): TypeSpec.Builder","title":"addProperties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-property/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addProperty addProperty fun addProperty(propertySpec: PropertySpec ): TypeSpec.Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: KClass * , vararg modifiers: KModifier ): TypeSpec.Builder","title":"Add property"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-property/#addproperty","text":"fun addProperty(propertySpec: PropertySpec ): TypeSpec.Builder fun addProperty(name: String , type: TypeName , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: Type , vararg modifiers: KModifier ): TypeSpec.Builder fun addProperty(name: String , type: KClass * , vararg modifiers: KModifier ): TypeSpec.Builder","title":"addProperty"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superclass-constructor-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addSuperclassConstructorParameter addSuperclassConstructorParameter fun addSuperclassConstructorParameter(format: String , vararg args: Any ): TypeSpec.Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): TypeSpec.Builder","title":"Add superclass constructor parameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superclass-constructor-parameter/#addsuperclassconstructorparameter","text":"fun addSuperclassConstructorParameter(format: String , vararg args: Any ): TypeSpec.Builder fun addSuperclassConstructorParameter(codeBlock: CodeBlock ): TypeSpec.Builder","title":"addSuperclassConstructorParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterface/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addSuperinterface addSuperinterface fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , constructorParameterName: String ): TypeSpec.Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): TypeSpec.Builder","title":"Add superinterface"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterface/#addsuperinterface","text":"fun addSuperinterface(superinterface: TypeName , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: Type , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , delegate: CodeBlock = CodeBlock.EMPTY): TypeSpec.Builder fun addSuperinterface(superinterface: KClass * , constructorParameterName: String ): TypeSpec.Builder fun addSuperinterface(superinterface: TypeName , constructorParameter: String ): TypeSpec.Builder","title":"addSuperinterface"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterfaces/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addSuperinterfaces addSuperinterfaces fun addSuperinterfaces(superinterfaces: Iterable TypeName ): TypeSpec.Builder","title":"Add superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-superinterfaces/#addsuperinterfaces","text":"fun addSuperinterfaces(superinterfaces: Iterable TypeName ): TypeSpec.Builder","title":"addSuperinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addTypeVariable addTypeVariable fun addTypeVariable(typeVariable: TypeVariableName ): TypeSpec.Builder","title":"Add type variable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variable/#addtypevariable","text":"fun addTypeVariable(typeVariable: TypeVariableName ): TypeSpec.Builder","title":"addTypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addTypeVariables addTypeVariables fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeSpec.Builder","title":"Add type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type-variables/#addtypevariables","text":"fun addTypeVariables(typeVariables: Iterable TypeVariableName ): TypeSpec.Builder","title":"addTypeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addType addType fun addType(typeSpec: TypeSpec ): TypeSpec.Builder","title":"Add type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-type/#addtype","text":"fun addType(typeSpec: TypeSpec ): TypeSpec.Builder","title":"addType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-types/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / addTypes addTypes fun addTypes(typeSpecs: Iterable TypeSpec ): TypeSpec.Builder","title":"Add types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/add-types/#addtypes","text":"fun addTypes(typeSpecs: Iterable TypeSpec ): TypeSpec.Builder","title":"addTypes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/annotation-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / annotationSpecs annotationSpecs val annotationSpecs: MutableList AnnotationSpec","title":"Annotation specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/annotation-specs/#annotationspecs","text":"val annotationSpecs: MutableList AnnotationSpec","title":"annotationSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/build/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / build build fun build(): TypeSpec","title":"Build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/build/#build","text":"fun build(): TypeSpec","title":"build"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/enum-constants/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / enumConstants enumConstants val enumConstants: MutableMap String , TypeSpec","title":"Enum constants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/enum-constants/#enumconstants","text":"val enumConstants: MutableMap String , TypeSpec","title":"enumConstants"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/fun-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / funSpecs funSpecs val funSpecs: MutableList FunSpec","title":"Fun specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/fun-specs/#funspecs","text":"val funSpecs: MutableList FunSpec","title":"funSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/modifiers/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / modifiers modifiers val modifiers: MutableSet KModifier","title":"Modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/modifiers/#modifiers","text":"val modifiers: MutableSet KModifier","title":"modifiers"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/originating-elements/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / originatingElements originatingElements val originatingElements: MutableList Element Overrides Builder.originatingElements Mutable map of the current originating elements this builder contains.","title":"Originating elements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/originating-elements/#originatingelements","text":"val originatingElements: MutableList Element Overrides Builder.originatingElements Mutable map of the current originating elements this builder contains.","title":"originatingElements"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/primary-constructor/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / primaryConstructor primaryConstructor fun primaryConstructor(primaryConstructor: FunSpec ?): TypeSpec.Builder","title":"Primary constructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/primary-constructor/#primaryconstructor","text":"fun primaryConstructor(primaryConstructor: FunSpec ?): TypeSpec.Builder","title":"primaryConstructor"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/property-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / propertySpecs propertySpecs val propertySpecs: MutableList PropertySpec","title":"Property specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/property-specs/#propertyspecs","text":"val propertySpecs: MutableList PropertySpec","title":"propertySpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass-constructor-parameters/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / superclassConstructorParameters superclassConstructorParameters val superclassConstructorParameters: MutableList CodeBlock","title":"Superclass constructor parameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass-constructor-parameters/#superclassconstructorparameters","text":"val superclassConstructorParameters: MutableList CodeBlock","title":"superclassConstructorParameters"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / superclass superclass fun superclass(superclass: TypeName ): TypeSpec.Builder fun superclass(superclass: Type ): TypeSpec.Builder fun superclass(superclass: KClass * ): TypeSpec.Builder","title":"Superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superclass/#superclass","text":"fun superclass(superclass: TypeName ): TypeSpec.Builder fun superclass(superclass: Type ): TypeSpec.Builder fun superclass(superclass: KClass * ): TypeSpec.Builder","title":"superclass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superinterfaces/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / superinterfaces superinterfaces val superinterfaces: MutableMap TypeName , CodeBlock ?","title":"Superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/superinterfaces/#superinterfaces","text":"val superinterfaces: MutableMap TypeName , CodeBlock ?","title":"superinterfaces"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/tags/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / tags tags val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"Tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/tags/#tags","text":"val tags: MutableMap KClass * , Any Overrides Builder.tags Mutable map of the current tags this builder contains.","title":"tags"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-specs/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / typeSpecs typeSpecs val typeSpecs: MutableList TypeSpec","title":"Type specs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-specs/#typespecs","text":"val typeSpecs: MutableList TypeSpec","title":"typeSpecs"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-variables/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Builder / typeVariables typeVariables val typeVariables: MutableList TypeVariableName","title":"Type variables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-builder/type-variables/#typevariables","text":"val typeVariables: MutableList TypeVariableName","title":"typeVariables"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind Kind enum class Kind Enum Values Name Summary CLASS OBJECT INTERFACE","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/#kind","text":"enum class Kind","title":"Kind"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/#enum-values","text":"Name Summary CLASS OBJECT INTERFACE","title":"Enum Values"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-c-l-a-s-s/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind / CLASS CLASS CLASS","title":" c l a s s"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-c-l-a-s-s/#class","text":"CLASS","title":"CLASS"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-i-n-t-e-r-f-a-c-e/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind / INTERFACE INTERFACE INTERFACE","title":" i n t e r f a c e"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-i-n-t-e-r-f-a-c-e/#interface","text":"INTERFACE","title":"INTERFACE"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-o-b-j-e-c-t/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeSpec / Kind / OBJECT OBJECT OBJECT","title":" o b j e c t"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-spec/-kind/-o-b-j-e-c-t/#object","text":"OBJECT","title":"OBJECT"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName TypeVariableName class TypeVariableName : TypeName Properties Name Summary bounds val bounds: List TypeName isReified val isReified: Boolean name val name: String variance val variance: KModifier ? Either KModifier.IN , KModifier.OUT , or null. Inherited Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): TypeVariableName fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), bounds: List TypeName = this.bounds.toList(), reified: Boolean = this.isReified): TypeVariableName Inherited Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Companion Object Functions Name Summary invoke operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and without bounds. operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: KClass * , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds . Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#typevariablename","text":"class TypeVariableName : TypeName","title":"TypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#properties","text":"Name Summary bounds val bounds: List TypeName isReified val isReified: Boolean name val name: String variance val variance: KModifier ? Either KModifier.IN , KModifier.OUT , or null.","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#inherited-properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Inherited Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): TypeVariableName fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), bounds: List TypeName = this.bounds.toList(), reified: Boolean = this.isReified): TypeVariableName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#inherited-functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#companion-object-functions","text":"Name Summary invoke operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and without bounds. operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: KClass * , variance: KModifier ? = null): TypeVariableName operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds .","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/bounds/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / bounds bounds val bounds: List TypeName","title":"Bounds"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/bounds/#bounds","text":"val bounds: List TypeName","title":"bounds"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / copy copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): TypeVariableName Overrides TypeName.copy fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), bounds: List TypeName = this.bounds.toList(), reified: Boolean = this.isReified): TypeVariableName","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List AnnotationSpec ): TypeVariableName Overrides TypeName.copy fun copy(nullable: Boolean = this.isNullable, annotations: List AnnotationSpec = this.annotations.toList(), bounds: List TypeName = this.bounds.toList(), reified: Boolean = this.isReified): TypeVariableName","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/invoke/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / invoke invoke @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and without bounds. @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: KClass * , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds .","title":"Invoke"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/invoke/#invoke","text":"@JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and without bounds. @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: TypeName , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: KClass * , variance: KModifier ? = null): TypeVariableName @JvmStatic @JvmName(\"get\") @JvmOverloads operator fun invoke(name: String , vararg bounds: Type , variance: KModifier ? = null): TypeVariableName Returns type variable named name with variance and bounds .","title":"invoke"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/is-reified/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / isReified isReified val isReified: Boolean","title":"Is reified"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/is-reified/#isreified","text":"val isReified: Boolean","title":"isReified"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/name/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / name name val name: String","title":"Name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/name/#name","text":"val name: String","title":"name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/variance/","text":"kotlinpoet / com.squareup.kotlinpoet / TypeVariableName / variance variance val variance: KModifier ? Either KModifier.IN , KModifier.OUT , or null.","title":"Variance"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-type-variable-name/variance/#variance","text":"val variance: KModifier ? Either KModifier.IN , KModifier.OUT , or null.","title":"variance"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName WildcardTypeName class WildcardTypeName : TypeName Properties Name Summary inTypes val inTypes: List TypeName outTypes val outTypes: List TypeName Inherited Properties Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean Functions Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): WildcardTypeName Inherited Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Companion Object Functions Name Summary consumerOf fun consumerOf(inType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . fun consumerOf(inType: Type ): WildcardTypeName fun consumerOf(inType: KClass * ): WildcardTypeName producerOf fun producerOf(outType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . fun producerOf(outType: Type ): WildcardTypeName fun producerOf(outType: KClass * ): WildcardTypeName Extension Functions Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#wildcardtypename","text":"class WildcardTypeName : TypeName","title":"WildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#properties","text":"Name Summary inTypes val inTypes: List TypeName outTypes val outTypes: List TypeName","title":"Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#inherited-properties","text":"Name Summary annotations val annotations: List AnnotationSpec isAnnotated val isAnnotated: Boolean isNullable val isNullable: Boolean","title":"Inherited Properties"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#functions","text":"Name Summary copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): WildcardTypeName","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#inherited-functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#companion-object-functions","text":"Name Summary consumerOf fun consumerOf(inType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . fun consumerOf(inType: Type ): WildcardTypeName fun consumerOf(inType: KClass * ): WildcardTypeName producerOf fun producerOf(outType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . fun producerOf(outType: Type ): WildcardTypeName fun producerOf(outType: KClass * ): WildcardTypeName","title":"Companion Object Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/#extension-functions","text":"Name Summary jvmSuppressWildcards fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Extension Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/consumer-of/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / consumerOf consumerOf @JvmStatic fun consumerOf(inType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . @JvmStatic fun consumerOf(inType: Type ): WildcardTypeName @JvmStatic fun consumerOf(inType: KClass * ): WildcardTypeName","title":"Consumer of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/consumer-of/#consumerof","text":"@JvmStatic fun consumerOf(inType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that consumes inType . For example, if inType is String , this returns in String . @JvmStatic fun consumerOf(inType: Type ): WildcardTypeName @JvmStatic fun consumerOf(inType: KClass * ): WildcardTypeName","title":"consumerOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/copy/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / copy copy fun copy(nullable: Boolean , annotations: List AnnotationSpec ): WildcardTypeName Overrides TypeName.copy","title":"Copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/copy/#copy","text":"fun copy(nullable: Boolean , annotations: List AnnotationSpec ): WildcardTypeName Overrides TypeName.copy","title":"copy"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/in-types/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / inTypes inTypes val inTypes: List TypeName","title":"In types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/in-types/#intypes","text":"val inTypes: List TypeName","title":"inTypes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/out-types/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / outTypes outTypes val outTypes: List TypeName","title":"Out types"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/out-types/#outtypes","text":"val outTypes: List TypeName","title":"outTypes"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/producer-of/","text":"kotlinpoet / com.squareup.kotlinpoet / WildcardTypeName / producerOf producerOf @JvmStatic fun producerOf(outType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . @JvmStatic fun producerOf(outType: Type ): WildcardTypeName @JvmStatic fun producerOf(outType: KClass * ): WildcardTypeName","title":"Producer of"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/-wildcard-type-name/producer-of/#producerof","text":"@JvmStatic fun producerOf(outType: TypeName ): WildcardTypeName Returns a type that represents an unknown type that produces outType . For example, if outType is CharSequence , this returns out CharSequence . If outType is Any? , this returns * , which is shorthand for out Any? . @JvmStatic fun producerOf(outType: Type ): WildcardTypeName @JvmStatic fun producerOf(outType: KClass * ): WildcardTypeName","title":"producerOf"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.Class Extensions for java.lang.Class Name Summary asClassName fun Class * .asClassName(): ClassName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/#extensions-for-javalangclass","text":"Name Summary asClassName fun Class * .asClassName(): ClassName","title":"Extensions for java.lang.Class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/as-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.Class / asClassName asClassName @JvmName(\"get\") fun Class * .asClassName(): ClassName","title":"As class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.-class/as-class-name/#asclassname","text":"@JvmName(\"get\") fun Class * .asClassName(): ClassName","title":"asClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.ParameterizedType Extensions for java.lang.reflect.ParameterizedType Name Summary asParameterizedTypeName fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName Returns a parameterized type equivalent to type .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/#extensions-for-javalangreflectparameterizedtype","text":"Name Summary asParameterizedTypeName fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName Returns a parameterized type equivalent to type .","title":"Extensions for java.lang.reflect.ParameterizedType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/as-parameterized-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.ParameterizedType / asParameterizedTypeName asParameterizedTypeName @JvmName(\"get\") fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName Returns a parameterized type equivalent to type .","title":"As parameterized type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-parameterized-type/as-parameterized-type-name/#asparameterizedtypename","text":"@JvmName(\"get\") fun ParameterizedType .asParameterizedTypeName(): ParameterizedTypeName Returns a parameterized type equivalent to type .","title":"asParameterizedTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.Type Extensions for java.lang.reflect.Type Name Summary asTypeName fun Type .asTypeName(): TypeName Returns a TypeName equivalent to this Type .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/#extensions-for-javalangreflecttype","text":"Name Summary asTypeName fun Type .asTypeName(): TypeName Returns a TypeName equivalent to this Type .","title":"Extensions for java.lang.reflect.Type"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.Type / asTypeName asTypeName @JvmName(\"get\") fun Type .asTypeName(): TypeName Returns a TypeName equivalent to this Type .","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-type/as-type-name/#astypename","text":"@JvmName(\"get\") fun Type .asTypeName(): TypeName Returns a TypeName equivalent to this Type .","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.WildcardType Extensions for java.lang.reflect.WildcardType Name Summary asWildcardTypeName fun WildcardType .asWildcardTypeName(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/#extensions-for-javalangreflectwildcardtype","text":"Name Summary asWildcardTypeName fun WildcardType .asWildcardTypeName(): TypeName","title":"Extensions for java.lang.reflect.WildcardType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/as-wildcard-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / java.lang.reflect.WildcardType / asWildcardTypeName asWildcardTypeName @JvmName(\"get\") fun WildcardType .asWildcardTypeName(): TypeName","title":"As wildcard type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/java.lang.reflect.-wildcard-type/as-wildcard-type-name/#aswildcardtypename","text":"@JvmName(\"get\") fun WildcardType .asWildcardTypeName(): TypeName","title":"asWildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeElement Extensions for javax.lang.model.element.TypeElement Name Summary asClassName fun TypeElement .asClassName(): ClassName Returns the class name for element .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/#extensions-for-javaxlangmodelelementtypeelement","text":"Name Summary asClassName fun TypeElement .asClassName(): ClassName Returns the class name for element .","title":"Extensions for javax.lang.model.element.TypeElement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/as-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeElement / asClassName asClassName @JvmName(\"get\") fun TypeElement .asClassName(): ClassName Returns the class name for element .","title":"As class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-element/as-class-name/#asclassname","text":"@JvmName(\"get\") fun TypeElement .asClassName(): ClassName Returns the class name for element .","title":"asClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeParameterElement Extensions for javax.lang.model.element.TypeParameterElement Name Summary asTypeVariableName fun TypeParameterElement .asTypeVariableName(): TypeVariableName Returns type variable equivalent to element .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/#extensions-for-javaxlangmodelelementtypeparameterelement","text":"Name Summary asTypeVariableName fun TypeParameterElement .asTypeVariableName(): TypeVariableName Returns type variable equivalent to element .","title":"Extensions for javax.lang.model.element.TypeParameterElement"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/as-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.element.TypeParameterElement / asTypeVariableName asTypeVariableName @JvmName(\"get\") fun TypeParameterElement .asTypeVariableName(): TypeVariableName Returns type variable equivalent to element .","title":"As type variable name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.element.-type-parameter-element/as-type-variable-name/#astypevariablename","text":"@JvmName(\"get\") fun TypeParameterElement .asTypeVariableName(): TypeVariableName Returns type variable equivalent to element .","title":"asTypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeMirror Extensions for javax.lang.model.type.TypeMirror Name Summary asTypeName fun TypeMirror .asTypeName(): TypeName Returns a TypeName equivalent to this TypeMirror .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/#extensions-for-javaxlangmodeltypetypemirror","text":"Name Summary asTypeName fun TypeMirror .asTypeName(): TypeName Returns a TypeName equivalent to this TypeMirror .","title":"Extensions for javax.lang.model.type.TypeMirror"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeMirror / asTypeName asTypeName @JvmName(\"get\") fun TypeMirror .asTypeName(): TypeName Returns a TypeName equivalent to this TypeMirror .","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-mirror/as-type-name/#astypename","text":"@JvmName(\"get\") fun TypeMirror .asTypeName(): TypeName Returns a TypeName equivalent to this TypeMirror .","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeVariable Extensions for javax.lang.model.type.TypeVariable Name Summary asTypeVariableName fun TypeVariable .asTypeVariableName(): TypeVariableName Returns type variable equivalent to mirror .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/#extensions-for-javaxlangmodeltypetypevariable","text":"Name Summary asTypeVariableName fun TypeVariable .asTypeVariableName(): TypeVariableName Returns type variable equivalent to mirror .","title":"Extensions for javax.lang.model.type.TypeVariable"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/as-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.TypeVariable / asTypeVariableName asTypeVariableName @JvmName(\"get\") fun TypeVariable .asTypeVariableName(): TypeVariableName Returns type variable equivalent to mirror .","title":"As type variable name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-type-variable/as-type-variable-name/#astypevariablename","text":"@JvmName(\"get\") fun TypeVariable .asTypeVariableName(): TypeVariableName Returns type variable equivalent to mirror .","title":"asTypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.WildcardType Extensions for javax.lang.model.type.WildcardType Name Summary asWildcardTypeName fun WildcardType .asWildcardTypeName(): TypeName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/#extensions-for-javaxlangmodeltypewildcardtype","text":"Name Summary asWildcardTypeName fun WildcardType .asWildcardTypeName(): TypeName","title":"Extensions for javax.lang.model.type.WildcardType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/as-wildcard-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / javax.lang.model.type.WildcardType / asWildcardTypeName asWildcardTypeName @JvmName(\"get\") fun WildcardType .asWildcardTypeName(): TypeName","title":"As wildcard type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/javax.lang.model.type.-wildcard-type/as-wildcard-type-name/#aswildcardtypename","text":"@JvmName(\"get\") fun WildcardType .asWildcardTypeName(): TypeName","title":"asWildcardTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.collections.Collection Extensions for kotlin.collections.Collection Name Summary joinToCode fun Collection CodeBlock .joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/#extensions-for-kotlincollectionscollection","text":"Name Summary joinToCode fun Collection CodeBlock .joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"Extensions for kotlin.collections.Collection"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/join-to-code/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.collections.Collection / joinToCode joinToCode @JvmOverloads fun Collection CodeBlock .joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"Join to code"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.collections.-collection/join-to-code/#jointocode","text":"@JvmOverloads fun Collection CodeBlock .joinToCode(separator: CharSequence = \", \", prefix: CharSequence = \"\", suffix: CharSequence = \"\"): CodeBlock","title":"joinToCode"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KClass Extensions for kotlin.reflect.KClass Name Summary asClassName fun KClass * .asClassName(): ClassName asTypeName fun KClass * .asTypeName(): ClassName Returns a TypeName equivalent to this KClass .","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/#extensions-for-kotlinreflectkclass","text":"Name Summary asClassName fun KClass * .asClassName(): ClassName asTypeName fun KClass * .asTypeName(): ClassName Returns a TypeName equivalent to this KClass .","title":"Extensions for kotlin.reflect.KClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-class-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KClass / asClassName asClassName @JvmName(\"get\") fun KClass * .asClassName(): ClassName","title":"As class name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-class-name/#asclassname","text":"@JvmName(\"get\") fun KClass * .asClassName(): ClassName","title":"asClassName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KClass / asTypeName asTypeName @JvmName(\"get\") fun KClass * .asTypeName(): ClassName Returns a TypeName equivalent to this KClass .","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-class/as-type-name/#astypename","text":"@JvmName(\"get\") fun KClass * .asTypeName(): ClassName Returns a TypeName equivalent to this KClass .","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KType Extensions for kotlin.reflect.KType Name Summary asTypeName fun KType .asTypeName(): TypeName Returns a class name equivalent to given Kotlin KType.","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/#extensions-for-kotlinreflectktype","text":"Name Summary asTypeName fun KType .asTypeName(): TypeName Returns a class name equivalent to given Kotlin KType.","title":"Extensions for kotlin.reflect.KType"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/as-type-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KType / asTypeName asTypeName fun KType .asTypeName(): TypeName Returns a class name equivalent to given Kotlin KType.","title":"As type name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type/as-type-name/#astypename","text":"fun KType .asTypeName(): TypeName Returns a class name equivalent to given Kotlin KType.","title":"asTypeName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KTypeParameter Extensions for kotlin.reflect.KTypeParameter Name Summary asTypeVariableName fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/#extensions-for-kotlinreflectktypeparameter","text":"Name Summary asTypeVariableName fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"Extensions for kotlin.reflect.KTypeParameter"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/as-type-variable-name/","text":"kotlinpoet / com.squareup.kotlinpoet / kotlin.reflect.KTypeParameter / asTypeVariableName asTypeVariableName fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"As type variable name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet/kotlin.reflect.-k-type-parameter/as-type-variable-name/#astypevariablename","text":"fun KTypeParameter .asTypeVariableName(): TypeVariableName","title":"asTypeVariableName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm Package com.squareup.kotlinpoet.jvm Functions Name Summary jvmDefault fun PropertySpec.Builder .jvmDefault(): PropertySpec.Builder fun FunSpec.Builder .jvmDefault(): FunSpec.Builder jvmField fun PropertySpec.Builder .jvmField(): PropertySpec.Builder jvmMultifileClass fun FileSpec.Builder .jvmMultifileClass(): FileSpec.Builder jvmName fun FileSpec.Builder .jvmName(name: String ): FileSpec.Builder fun FunSpec.Builder .jvmName(name: String ): FunSpec.Builder jvmOverloads fun FunSpec.Builder .jvmOverloads(): FunSpec.Builder jvmStatic fun FunSpec.Builder .jvmStatic(): FunSpec.Builder fun PropertySpec.Builder .jvmStatic(): PropertySpec.Builder jvmSuppressWildcards fun TypeSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): TypeSpec.Builder fun FunSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): FunSpec.Builder fun PropertySpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): PropertySpec.Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName strictfp fun FunSpec.Builder .strictfp(): FunSpec.Builder synchronized fun FunSpec.Builder .synchronized(): FunSpec.Builder throws fun FunSpec.Builder .throws(vararg exceptionClasses: KClass out Throwable ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: Type ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: TypeName ): FunSpec.Builder transient fun PropertySpec.Builder .transient(): PropertySpec.Builder volatile fun PropertySpec.Builder .volatile(): PropertySpec.Builder","title":"Home"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/#package-comsquareupkotlinpoetjvm","text":"","title":"Package com.squareup.kotlinpoet.jvm"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/#functions","text":"Name Summary jvmDefault fun PropertySpec.Builder .jvmDefault(): PropertySpec.Builder fun FunSpec.Builder .jvmDefault(): FunSpec.Builder jvmField fun PropertySpec.Builder .jvmField(): PropertySpec.Builder jvmMultifileClass fun FileSpec.Builder .jvmMultifileClass(): FileSpec.Builder jvmName fun FileSpec.Builder .jvmName(name: String ): FileSpec.Builder fun FunSpec.Builder .jvmName(name: String ): FunSpec.Builder jvmOverloads fun FunSpec.Builder .jvmOverloads(): FunSpec.Builder jvmStatic fun FunSpec.Builder .jvmStatic(): FunSpec.Builder fun PropertySpec.Builder .jvmStatic(): PropertySpec.Builder jvmSuppressWildcards fun TypeSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): TypeSpec.Builder fun FunSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): FunSpec.Builder fun PropertySpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): PropertySpec.Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName jvmWildcard fun TypeName .jvmWildcard(): TypeName strictfp fun FunSpec.Builder .strictfp(): FunSpec.Builder synchronized fun FunSpec.Builder .synchronized(): FunSpec.Builder throws fun FunSpec.Builder .throws(vararg exceptionClasses: KClass out Throwable ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: Type ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: TypeName ): FunSpec.Builder transient fun PropertySpec.Builder .transient(): PropertySpec.Builder volatile fun PropertySpec.Builder .volatile(): PropertySpec.Builder","title":"Functions"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-default/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmDefault jvmDefault fun PropertySpec.Builder .jvmDefault(): PropertySpec.Builder fun FunSpec.Builder .jvmDefault(): FunSpec.Builder","title":"Jvm default"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-default/#jvmdefault","text":"fun PropertySpec.Builder .jvmDefault(): PropertySpec.Builder fun FunSpec.Builder .jvmDefault(): FunSpec.Builder","title":"jvmDefault"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-field/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmField jvmField fun PropertySpec.Builder .jvmField(): PropertySpec.Builder","title":"Jvm field"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-field/#jvmfield","text":"fun PropertySpec.Builder .jvmField(): PropertySpec.Builder","title":"jvmField"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-multifile-class/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmMultifileClass jvmMultifileClass fun FileSpec.Builder .jvmMultifileClass(): FileSpec.Builder","title":"Jvm multifile class"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-multifile-class/#jvmmultifileclass","text":"fun FileSpec.Builder .jvmMultifileClass(): FileSpec.Builder","title":"jvmMultifileClass"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-name/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmName jvmName fun FileSpec.Builder .jvmName(name: String ): FileSpec.Builder fun FunSpec.Builder .jvmName(name: String ): FunSpec.Builder","title":"Jvm name"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-name/#jvmname","text":"fun FileSpec.Builder .jvmName(name: String ): FileSpec.Builder fun FunSpec.Builder .jvmName(name: String ): FunSpec.Builder","title":"jvmName"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-overloads/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmOverloads jvmOverloads fun FunSpec.Builder .jvmOverloads(): FunSpec.Builder","title":"Jvm overloads"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-overloads/#jvmoverloads","text":"fun FunSpec.Builder .jvmOverloads(): FunSpec.Builder","title":"jvmOverloads"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-static/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmStatic jvmStatic fun FunSpec.Builder .jvmStatic(): FunSpec.Builder fun PropertySpec.Builder .jvmStatic(): PropertySpec.Builder","title":"Jvm static"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-static/#jvmstatic","text":"fun FunSpec.Builder .jvmStatic(): FunSpec.Builder fun PropertySpec.Builder .jvmStatic(): PropertySpec.Builder","title":"jvmStatic"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-suppress-wildcards/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmSuppressWildcards jvmSuppressWildcards fun TypeSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): TypeSpec.Builder fun FunSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): FunSpec.Builder fun PropertySpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): PropertySpec.Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName","title":"Jvm suppress wildcards"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-suppress-wildcards/#jvmsuppresswildcards","text":"fun TypeSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): TypeSpec.Builder fun FunSpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): FunSpec.Builder fun PropertySpec.Builder .jvmSuppressWildcards(suppress: Boolean = true): PropertySpec.Builder fun TypeName .jvmSuppressWildcards(suppress: Boolean = true): TypeName","title":"jvmSuppressWildcards"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-wildcard/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / jvmWildcard jvmWildcard fun TypeName .jvmWildcard(): TypeName","title":"Jvm wildcard"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/jvm-wildcard/#jvmwildcard","text":"fun TypeName .jvmWildcard(): TypeName","title":"jvmWildcard"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/strictfp/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / strictfp strictfp fun FunSpec.Builder .strictfp(): FunSpec.Builder","title":"Strictfp"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/strictfp/#strictfp","text":"fun FunSpec.Builder .strictfp(): FunSpec.Builder","title":"strictfp"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/synchronized/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / synchronized synchronized fun FunSpec.Builder .synchronized(): FunSpec.Builder","title":"Synchronized"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/synchronized/#synchronized","text":"fun FunSpec.Builder .synchronized(): FunSpec.Builder","title":"synchronized"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/throws/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / throws throws fun FunSpec.Builder .throws(vararg exceptionClasses: KClass out Throwable ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: Type ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: TypeName ): FunSpec.Builder","title":"Throws"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/throws/#throws","text":"fun FunSpec.Builder .throws(vararg exceptionClasses: KClass out Throwable ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: Type ): FunSpec.Builder fun FunSpec.Builder .throws(vararg exceptionClasses: TypeName ): FunSpec.Builder","title":"throws"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/transient/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / transient transient fun PropertySpec.Builder .transient(): PropertySpec.Builder","title":"Transient"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/transient/#transient","text":"fun PropertySpec.Builder .transient(): PropertySpec.Builder","title":"transient"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/volatile/","text":"kotlinpoet / com.squareup.kotlinpoet.jvm / volatile volatile fun PropertySpec.Builder .volatile(): PropertySpec.Builder","title":"Volatile"},{"location":"1.x/kotlinpoet/com.squareup.kotlinpoet.jvm/volatile/#volatile","text":"fun PropertySpec.Builder .volatile(): PropertySpec.Builder","title":"volatile"}]}